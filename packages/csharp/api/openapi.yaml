openapi: 3.0.2
info:
  description: OpenAPI Specification of catapult-rest
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Catapult REST Endpoints
  version: 1.0.4
externalDocs:
  description: Symbol Technical Documentation
  url: https://docs.symbolplatform.com/
servers:
- description: Local development
  url: http://localhost:3000
tags:
- name: Account routes
- name: Block routes
- name: Chain routes
- name: Finalization routes
- name: Metadata routes
- name: Mosaic routes
- name: Multisig routes
- name: Namespace routes
- name: Network routes
- name: Node routes
- name: Restriction Mosaic routes
- name: Restriction Account routes
- name: Receipt routes
- name: Transaction routes
- name: Hash Lock routes
- name: Secret Lock routes
paths:
  /accounts:
    get:
      description: Gets an array of accounts.
      operationId: searchAccounts
      parameters:
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      - description: |
          Sort responses by the property set.
          If ``balance`` option is selected, the request must define the ``mosaicId`` filter.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/AccountOrderByEnum'
        style: form
      - description: Filter by mosaic identifier.
        explode: true
        in: query
        name: mosaicId
        required: false
        schema:
          $ref: '#/components/schemas/MosaicId'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search accounts
      tags:
      - Account routes
    post:
      description: Returns the account information for an array of accounts.
      operationId: getAccountsInfo
      requestBody:
        $ref: '#/components/requestBodies/accountIds'
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Array of accounts information.
                items:
                  $ref: '#/components/schemas/AccountInfoDTO'
                type: array
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get accounts information
      tags:
      - Account routes
  /accounts/{accountId}:
    get:
      description: Returns the account information.
      operationId: getAccountInfo
      parameters:
      - description: Account public key or address encoded using a 32-character set.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get account information
      tags:
      - Account routes
  /accounts/{accountId}/merkle:
    get:
      description: Returns the account merkle information.
      operationId: getAccountInfoMerkle
      parameters:
      - description: Account public key or address encoded using a 32-character set.
        explode: false
        in: path
        name: accountId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get account merkle information
      tags:
      - Account routes
  /blocks:
    get:
      description: Gets an array of bocks.
      operationId: searchBlocks
      parameters:
      - description: Filter by public key of the account signing the entity.
        explode: true
        in: query
        name: signerPublicKey
        required: false
        schema:
          $ref: '#/components/schemas/PublicKey'
        style: form
      - description: Filter by beneficiary address.
        explode: true
        in: query
        name: beneficiaryAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      - description: |
          Sort responses by the property set.
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          $ref: '#/components/schemas/BlockOrderByEnum'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search blocks
      tags:
      - Block routes
  /blocks/{height}:
    get:
      description: Gets a block from the chain that has the given height.
      operationId: getBlockByHeight
      parameters:
      - description: Block height.
        explode: false
        in: path
        name: height
        required: true
        schema:
          $ref: '#/components/schemas/Height'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get block information
      tags:
      - Block routes
  /blocks/{height}/transactions/{hash}/merkle:
    get:
      description: |
        Returns the merkle path for a transaction included in a block.
        The merkle path is the minimum number of nodes needed to calculate the merkle root.

        Steps to calculate the merkle root:
        1. proofHash = hash (leaf).
        2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:
        * a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).
        * b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).
        3. Repeat 2. for every item in the merklePath list.
        4. Compare if the calculated proofHash equals the one recorded in the
        block header (block.transactionsHash) to verify if the transaction was included in the block.
      operationId: getMerkleTransaction
      parameters:
      - description: Block height.
        explode: false
        in: path
        name: height
        required: true
        schema:
          $ref: '#/components/schemas/Height'
        style: simple
      - description: Transaction hash.
        explode: false
        in: path
        name: hash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleProofInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get the merkle path for a given a transaction and block
      tags:
      - Block routes
  /blocks/{height}/statements/{hash}/merkle:
    get:
      description: |
        Returns the merkle path for a receipt statement or resolution linked to a block.
        The merkle path is the minimum number of nodes needed to calculate the merkle root.

        Steps to calculate the merkle root:
        1. proofHash = hash (leaf).
        2. Concatenate proofHash with the first unprocessed item from the merklePath list as follows:
        * a) If item.position == left -> proofHash = sha_256(item.hash + proofHash).
        * b) If item.position == right -> proofHash = sha_256(proofHash+ item.hash).
        3. Repeat 2. for every item in the merklePath list.
        4. Compare if the calculated proofHash equals the one recorded in the
        block header (block.receiptsHash) to verify if the statement was linked with the block.
      operationId: getMerkleReceipts
      parameters:
      - description: Block height.
        explode: false
        in: path
        name: height
        required: true
        schema:
          $ref: '#/components/schemas/Height'
        style: simple
      - description: Receipt hash.
        explode: false
        in: path
        name: hash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleProofInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get the merkle path for a given a receipt statement hash and block
      tags:
      - Block routes
  /chain/info:
    get:
      description: |
        Returns the current information of the blockchain.

        The higher the score, the better the chain.
        During synchronization, nodes try to get the best blockchain in the network.

        The score for a block is derived from its difficulty and the time (in seconds) that has elapsed since the last block:

            block score = difficulty − time elapsed since last block
      operationId: getChainInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainInfoDTO'
          description: success
      summary: Get the current information of the chain
      tags:
      - Chain routes
  /finalization/proof/epoch/{epoch}:
    get:
      description: Gets finalization proof for the greatest height associated with
        the given epoch.
      operationId: getFinalizationProofAtEpoch
      parameters:
      - description: Finalization epoch.
        explode: false
        in: path
        name: epoch
        required: true
        schema:
          $ref: '#/components/schemas/FinalizationEpoch'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizationProofDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get finalization proof
      tags:
      - Finalization routes
  /finalization/proof/height/{height}:
    get:
      description: Gets finalization proof at the given height.
      operationId: getFinalizationProofAtHeight
      parameters:
      - description: Block height.
        explode: false
        in: path
        name: height
        required: true
        schema:
          $ref: '#/components/schemas/Height'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalizationProofDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get finalization proof
      tags:
      - Finalization routes
  /network:
    get:
      description: Returns the current network type.
      operationId: getNetworkType
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkTypeDTO'
          description: success
      summary: Get the current network type of the chain
      tags:
      - Network routes
  /network/fees/rental:
    get:
      description: |
        Returns the estimated effective rental fees for namespaces and mosaics.
        This endpoint is only available if the REST instance has access to catapult-server ``resources/config-network.properties`` file.
        To activate this feature, add the setting "network.propertiesFilePath" in the configuration file (rest/resources/rest.json).
      operationId: getRentalFees
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalFeesDTO'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get rental fees information
      tags:
      - Network routes
  /network/fees/transaction:
    get:
      description: |
        Returns the average, median, highest and lower fee multiplier over the last "numBlocksTransactionFeeStats".
        The setting "numBlocksTransactionFeeStats" is adjustable via the configuration file (rest/resources/rest.json) per REST instance.
      operationId: getTransactionFees
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionFeesDTO'
          description: success
      summary: Get transaction fees information
      tags:
      - Network routes
  /network/properties:
    get:
      description: |
        Returns the content from a catapult-server network configuration file (resources/config-network.properties).
        To enable this feature, the REST setting "network.propertiesFilePath" must define where the file is located.
        This is adjustable via the configuration file (rest/resources/rest.json) per REST instance.
      operationId: getNetworkProperties
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkConfigurationDTO'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get the network properties
      tags:
      - Network routes
  /node/health:
    get:
      description: Supplies information regarding the connection and services status.
      operationId: getNodeHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeHealthInfoDTO'
          description: Both API node and database services are reachable from REST
            server.
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeHealthInfoDTO'
          description: Either API node or database service is unavailable or unreachable
            from REST server.
      summary: Get the node health information
      tags:
      - Node routes
  /node/info:
    get:
      description: Supplies additional information about the application running on
        a node.
      operationId: getNodeInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeInfoDTO'
          description: success
      summary: Get the node information
      tags:
      - Node routes
  /node/peers:
    get:
      description: Gets the list of peers visible by the node.
      operationId: getNodePeers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NodeInfoDTO'
                type: array
          description: success
      summary: Get peers information
      tags:
      - Node routes
  /node/storage:
    get:
      description: Returns storage information about the node.
      operationId: getNodeStorage
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageInfoDTO'
          description: success
      summary: Get the storage information of the node
      tags:
      - Node routes
  /node/time:
    get:
      description: Gets the node time at the moment the reply was sent and received.
      operationId: getNodeTime
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTimeDTO'
          description: success
      summary: Get the node time
      tags:
      - Node routes
  /node/server:
    get:
      description: Returns the version of the running catapult-rest component.
      operationId: getServerInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfoDTO'
          description: success
      summary: Get the version of the running REST component
      tags:
      - Node routes
  /node/unlockedaccount:
    get:
      description: Returns array of unlocked account public keys.
      operationId: getUnlockedAccount
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnlockedAccountDTO'
          description: success
      summary: Get the unlocked harvesting account public keys.
      tags:
      - Node routes
  /transactions:
    put:
      description: "Announces a transaction to the network.\nThe [catbuffer library](https://github.com/nemtech/catbuffer)\
        \ defines the protocol to serialize and deserialize Symbol entities.\nCatbuffers\
        \ are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html). \n\
        It's recommended to use SDKs instead of calling the API endpoint directly\
        \ to announce transactions.\n"
      operationId: announceTransaction
      requestBody:
        $ref: '#/components/requestBodies/transactionPayload'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Announce a new transaction
      tags:
      - Transaction routes
  /transactions/confirmed:
    get:
      description: |
        Returns an array of confirmed transactions.
        If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that
        was resolved from the alias at confirmation time.
      operationId: searchConfirmedTransactions
      parameters:
      - description: |
          Filter by address involved in the transaction.
          An account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.
          This filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.
        explode: true
        in: query
        name: address
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by address of the account receiving the transaction.
        explode: true
        in: query
        name: recipientAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by public key of the account signing the entity.
        explode: true
        in: query
        name: signerPublicKey
        required: false
        schema:
          $ref: '#/components/schemas/PublicKey'
        style: form
      - description: Filter by block height.
        explode: true
        in: query
        name: height
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Only blocks with height greater or equal than this one are returned.
        explode: true
        in: query
        name: fromHeight
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Only blocks with height smaller or equal than this one are returned.
        explode: true
        in: query
        name: toHeight
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: |
          Requires providing the `transferMosaicId` filter.
          Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.
        explode: true
        in: query
        name: fromTransferAmount
        required: false
        schema:
          $ref: '#/components/schemas/Amount'
        style: form
      - description: |
          Requires providing the `transferMosaicId` filter.
          Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.
        explode: true
        in: query
        name: toTransferAmount
        required: false
        schema:
          $ref: '#/components/schemas/Amount'
        style: form
      - description: |
          Filter by transaction type.
          To filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.
        explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          type: array
        style: form
      - description: |
          When true, the endpoint also returns all the embedded aggregate transactions.
          Otherwise, only top-level transactions used to calculate the block transactionsHash are returned.
          **Note:** This field does not work when combined with the ``address`` parameter. This is,
          embedded transactions containing the address specified through the ``address`` parameter
          will not be returned even when used with ``embedded=true``. There is no problem when using
          other parameters like ``recipientAddress`` instead.
        explode: true
        in: query
        name: embedded
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filters transactions involving a specific ``mosaicId``.
        explode: true
        in: query
        name: transferMosaicId
        required: false
        schema:
          $ref: '#/components/schemas/MosaicId'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search confirmed transactions
      tags:
      - Transaction routes
    post:
      description: Returns confirmed transactions information for a given array of
        transactionIds.
      operationId: getConfirmedTransactions
      requestBody:
        $ref: '#/components/requestBodies/transactionIds'
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Array of transactions information.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
                type: array
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get confirmed trasactions information
      tags:
      - Transaction routes
  /transactions/confirmed/{transactionId}:
    get:
      description: Returns confirmed transaction information given a transactionId
        or hash.
      operationId: getConfirmedTransaction
      parameters:
      - description: Transaction id or hash.
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get confirmed transaction information
      tags:
      - Transaction routes
  /transactions/unconfirmed:
    get:
      description: Returns an array of unconfirmed transactions.
      operationId: searchUnconfirmedTransactions
      parameters:
      - description: |
          Filter by address involved in the transaction.
          An account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.
          This filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.
        explode: true
        in: query
        name: address
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by address of the account receiving the transaction.
        explode: true
        in: query
        name: recipientAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by public key of the account signing the entity.
        explode: true
        in: query
        name: signerPublicKey
        required: false
        schema:
          $ref: '#/components/schemas/PublicKey'
        style: form
      - description: Filter by block height.
        explode: true
        in: query
        name: height
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Only blocks with height greater or equal than this one are returned.
        explode: true
        in: query
        name: fromHeight
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Only blocks with height smaller or equal than this one are returned.
        explode: true
        in: query
        name: toHeight
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: |
          Requires providing the `transferMosaicId` filter.
          Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.
        explode: true
        in: query
        name: fromTransferAmount
        required: false
        schema:
          $ref: '#/components/schemas/Amount'
        style: form
      - description: |
          Requires providing the `transferMosaicId` filter.
          Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.
        explode: true
        in: query
        name: toTransferAmount
        required: false
        schema:
          $ref: '#/components/schemas/Amount'
        style: form
      - description: |
          Filter by transaction type.
          To filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.
        explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          type: array
        style: form
      - description: |
          When true, the endpoint also returns all the embedded aggregate transactions.
          Otherwise, only top-level transactions used to calculate the block transactionsHash are returned.
          **Note:** This field does not work when combined with the ``address`` parameter. This is,
          embedded transactions containing the address specified through the ``address`` parameter
          will not be returned even when used with ``embedded=true``. There is no problem when using
          other parameters like ``recipientAddress`` instead.
        explode: true
        in: query
        name: embedded
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filters transactions involving a specific ``mosaicId``.
        explode: true
        in: query
        name: transferMosaicId
        required: false
        schema:
          $ref: '#/components/schemas/MosaicId'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search unconfirmed transactions
      tags:
      - Transaction routes
    post:
      description: Returns unconfirmed transactions information for a given array
        of transactionIds.
      operationId: getUnconfirmedTransactions
      requestBody:
        $ref: '#/components/requestBodies/transactionIds'
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Array of transactions information.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
                type: array
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get unconfirmed trasactions information
      tags:
      - Transaction routes
  /transactions/unconfirmed/{transactionId}:
    get:
      description: Returns unconfirmed transaction information given a transactionId
        or hash.
      operationId: getUnconfirmedTransaction
      parameters:
      - description: Transaction id or hash.
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get unconfirmed transaction information
      tags:
      - Transaction routes
  /transactionStatus:
    post:
      description: Returns an array of transaction statuses for a given array of transaction
        hashes.
      operationId: getTransactionStatuses
      requestBody:
        $ref: '#/components/requestBodies/transactionHashes'
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Array of transactions status.
                items:
                  $ref: '#/components/schemas/TransactionStatusDTO'
                type: array
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get transaction statuses
      tags:
      - Transaction status routes
  /transactionStatus/{hash}:
    get:
      description: Returns the transaction status for a given hash.
      operationId: getTransactionStatus
      parameters:
      - description: Transaction hash.
        explode: false
        in: path
        name: hash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatusDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get transaction status
      tags:
      - Transaction status routes
  /transactions/partial:
    get:
      description: Returns an array of partial transactions.
      operationId: searchPartialTransactions
      parameters:
      - description: |
          Filter by address involved in the transaction.
          An account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.
          This filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.
        explode: true
        in: query
        name: address
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by address of the account receiving the transaction.
        explode: true
        in: query
        name: recipientAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by public key of the account signing the entity.
        explode: true
        in: query
        name: signerPublicKey
        required: false
        schema:
          $ref: '#/components/schemas/PublicKey'
        style: form
      - description: Filter by block height.
        explode: true
        in: query
        name: height
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Only blocks with height greater or equal than this one are returned.
        explode: true
        in: query
        name: fromHeight
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Only blocks with height smaller or equal than this one are returned.
        explode: true
        in: query
        name: toHeight
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: |
          Requires providing the `transferMosaicId` filter.
          Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.
        explode: true
        in: query
        name: fromTransferAmount
        required: false
        schema:
          $ref: '#/components/schemas/Amount'
        style: form
      - description: |
          Requires providing the `transferMosaicId` filter.
          Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.
        explode: true
        in: query
        name: toTransferAmount
        required: false
        schema:
          $ref: '#/components/schemas/Amount'
        style: form
      - description: |
          Filter by transaction type.
          To filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.
        explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          type: array
        style: form
      - description: |
          When true, the endpoint also returns all the embedded aggregate transactions.
          Otherwise, only top-level transactions used to calculate the block transactionsHash are returned.
          **Note:** This field does not work when combined with the ``address`` parameter. This is,
          embedded transactions containing the address specified through the ``address`` parameter
          will not be returned even when used with ``embedded=true``. There is no problem when using
          other parameters like ``recipientAddress`` instead.
        explode: true
        in: query
        name: embedded
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Filters transactions involving a specific ``mosaicId``.
        explode: true
        in: query
        name: transferMosaicId
        required: false
        schema:
          $ref: '#/components/schemas/MosaicId'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search partial transactions
      tags:
      - Transaction routes
    post:
      description: Returns partial transactions information for a given array of transactionIds.
      operationId: getPartialTransactions
      requestBody:
        $ref: '#/components/requestBodies/transactionIds'
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Array of transactions information.
                items:
                  $ref: '#/components/schemas/TransactionInfoDTO'
                type: array
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get partial trasactions information
      tags:
      - Transaction routes
    put:
      description: Announces an aggregate bonded transaction to the network.
      operationId: announcePartialTransaction
      requestBody:
        $ref: '#/components/requestBodies/transactionPayload'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Announce an aggregate bonded transaction
      tags:
      - Transaction routes
  /transactions/partial/{transactionId}:
    get:
      description: Returns partial transaction information given a transactionId or
        hash.
      operationId: getPartialTransaction
      parameters:
      - description: Transaction id or hash.
        explode: false
        in: path
        name: transactionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get partial transaction information
      tags:
      - Transaction routes
  /transactions/cosignature:
    put:
      description: Announces a cosignature transaction to the network.
      operationId: announceCosignatureTransaction
      requestBody:
        $ref: '#/components/requestBodies/cosignature'
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnounceTransactionInfoDTO'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Announce a cosignature transaction
      tags:
      - Transaction routes
  /lock/hash:
    get:
      description: Returns an array of hash locks.
      operationId: searchHashLock
      parameters:
      - description: |
          Filter by address involved in the transaction.
          An account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.
          This filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.
        explode: true
        in: query
        name: address
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashLockPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search hash lock entries
      tags:
      - Hash Lock routes
  /lock/hash/{hash}:
    get:
      description: Gets the hash lock for a given hash.
      operationId: getHashLock
      parameters:
      - description: Filter by hash.
        explode: false
        in: path
        name: hash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HashLockInfoDTO'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get hash lock information
      tags:
      - Hash Lock routes
  /lock/hash/{hash}/merkle:
    get:
      description: Gets the hash lock merkle for a given hash.
      operationId: getHashLockMerkle
      parameters:
      - description: Filter by hash.
        explode: false
        in: path
        name: hash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get hash lock merkle information
      tags:
      - Hash Lock routes
  /lock/secret:
    get:
      description: Returns an array of secret locks.
      operationId: searchSecretLock
      parameters:
      - description: |
          Filter by address involved in the transaction.
          An account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.
          This filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.
        explode: true
        in: query
        name: address
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by secret.
        explode: true
        in: query
        name: secret
        required: false
        schema:
          $ref: '#/components/schemas/Secret'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretLockPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search secret lock entries
      tags:
      - Secret Lock routes
  /lock/secret/{compositeHash}:
    get:
      description: Gets the hash lock for a given composite hash.
      operationId: getSecretLock
      parameters:
      - description: Filter by composite hash.
        explode: false
        in: path
        name: compositeHash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretLockInfoDTO'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get secret lock information
      tags:
      - Secret Lock routes
  /lock/secret/{compositeHash}/merkle:
    get:
      description: Gets the hash lock merkle for a given composite hash.
      operationId: getSecretLockMerkle
      parameters:
      - description: Filter by composite hash.
        explode: false
        in: path
        name: compositeHash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get secret lock merkle information
      tags:
      - Secret Lock routes
  /metadata:
    get:
      description: Returns an array of metadata.
      operationId: searchMetadataEntries
      parameters:
      - description: Filter by address sending the metadata entry.
        explode: true
        in: query
        name: sourceAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by target address.
        explode: true
        in: query
        name: targetAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by metadata key.
        explode: true
        in: query
        name: scopedMetadataKey
        required: false
        schema:
          $ref: '#/components/schemas/MetadataKey'
        style: form
      - description: Filter by namespace or mosaic id.
        explode: true
        in: query
        name: targetId
        required: false
        schema:
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        style: form
      - description: Filter by metadata type.
        explode: true
        in: query
        name: metadataType
        required: false
        schema:
          $ref: '#/components/schemas/MetadataTypeEnum'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search metadata entries
      tags:
      - Metadata routes
  /metadata/{compositeHash}:
    get:
      description: Gets the metadata for a given composite hash.
      operationId: getMetadata
      parameters:
      - description: Filter by composite hash.
        explode: false
        in: path
        name: compositeHash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataInfoDTO'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get metadata information
      tags:
      - Metadata routes
  /metadata/{compositeHash}/merkle:
    get:
      description: Gets the metadata merkle for a given composite hash.
      operationId: getMetadataMerkle
      parameters:
      - description: Filter by composite hash.
        explode: false
        in: path
        name: compositeHash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get metadata merkle information
      tags:
      - Metadata routes
  /mosaics/{mosaicId}:
    get:
      description: Gets the mosaic definition for a given mosaic identifier.
      operationId: getMosaic
      parameters:
      - description: Mosaic identifier.
        explode: false
        in: path
        name: mosaicId
        required: true
        schema:
          $ref: '#/components/schemas/MosaicId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get mosaic information
      tags:
      - Mosaic routes
  /mosaics/{mosaicId}/merkle:
    get:
      description: Gets the mosaic definition merkle for a given mosaic identifier.
      operationId: getMosaicMerkle
      parameters:
      - description: Mosaic identifier.
        explode: false
        in: path
        name: mosaicId
        required: true
        schema:
          $ref: '#/components/schemas/MosaicId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get mosaic merkle information
      tags:
      - Mosaic routes
  /mosaics:
    get:
      description: Gets an array of mosaics.
      operationId: searchMosaics
      parameters:
      - description: Filter by owner address.
        explode: true
        in: query
        name: ownerAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicPage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search mosaics
      tags:
      - Mosaic routes
    post:
      description: Gets an array of mosaic definition.
      operationId: getMosaics
      requestBody:
        $ref: '#/components/requestBodies/mosaicIds'
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Array of mosaics information.
                items:
                  $ref: '#/components/schemas/MosaicInfoDTO'
                type: array
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get mosaics information for an array of mosaics
      tags:
      - Mosaic routes
  /account/{address}/multisig:
    get:
      description: Returns the multisig account information.
      operationId: getAccountMultisig
      parameters:
      - description: Account address.
        explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultisigAccountInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get multisig account information
      tags:
      - Multisig routes
  /account/{address}/multisig/merkle:
    get:
      description: Returns the multisig account merkle information.
      operationId: getAccountMultisigMerkle
      parameters:
      - description: Account address.
        explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get multisig account merkle information
      tags:
      - Multisig routes
  /account/{address}/multisig/graph:
    get:
      description: Returns the multisig account graph.
      operationId: getAccountMultisigGraph
      parameters:
      - description: Account address.
        explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MultisigAccountGraphInfoDTO'
                type: array
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get multisig account graph information
      tags:
      - Multisig routes
  /namespaces:
    get:
      description: Gets an array of namespaces.
      operationId: searchNamespaces
      parameters:
      - description: Filter by owner address.
        explode: true
        in: query
        name: ownerAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by registration type.
        explode: true
        in: query
        name: registrationType
        required: false
        schema:
          $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
        style: form
      - description: Filter by root namespace.
        explode: true
        in: query
        name: level0
        required: false
        schema:
          $ref: '#/components/schemas/NamespaceId'
        style: form
      - description: Filter by alias type.
        explode: true
        in: query
        name: aliasType
        required: false
        schema:
          $ref: '#/components/schemas/AliasTypeEnum'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespacePage'
          description: success
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search namespaces
      tags:
      - Namespace routes
  /namespaces/{namespaceId}:
    get:
      description: Gets the namespace for a given namespace identifier.
      operationId: getNamespace
      parameters:
      - description: Namespace identifier.
        explode: false
        in: path
        name: namespaceId
        required: true
        schema:
          $ref: '#/components/schemas/NamespaceId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get namespace information
      tags:
      - Namespace routes
  /namespaces/{namespaceId}/merkle:
    get:
      description: Gets the namespace merkle for a given namespace identifier.
      operationId: getNamespaceMerkle
      parameters:
      - description: Namespace identifier.
        explode: false
        in: path
        name: namespaceId
        required: true
        schema:
          $ref: '#/components/schemas/NamespaceId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get namespace merkle information
      tags:
      - Namespace routes
  /namespaces/names:
    post:
      description: Returns friendly names for namespaces.
      operationId: getNamespacesNames
      requestBody:
        $ref: '#/components/requestBodies/namespaceIds'
      responses:
        "200":
          content:
            application/json:
              schema:
                description: Array of namespace names.
                items:
                  $ref: '#/components/schemas/NamespaceNameDTO'
                type: array
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get readable names for a set of namespaces
      tags:
      - Namespace routes
  /namespaces/account/names:
    post:
      description: Returns friendly names for accounts.
      operationId: getAccountsNames
      requestBody:
        $ref: '#/components/requestBodies/addresses'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsNamesDTO'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get readable names for a set of accountIds
      tags:
      - Namespace routes
  /namespaces/mosaic/names:
    post:
      description: Returns friendly names for mosaics.
      operationId: getMosaicsNames
      requestBody:
        $ref: '#/components/requestBodies/mosaicIds'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicsNamesDTO'
          description: success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidContent
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get readable names for a set of mosaics
      tags:
      - Namespace routes
  /statements/transaction:
    get:
      description: Gets an array of transaction statements.
      operationId: searchReceipts
      parameters:
      - description: Filter by block height.
        explode: true
        in: query
        name: height
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Only blocks with height greater or equal than this one are returned.
        explode: true
        in: query
        name: fromHeight
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Only blocks with height smaller or equal than this one are returned.
        explode: true
        in: query
        name: toHeight
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: |
          Filter by receipt type.
          To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.
        explode: true
        in: query
        name: receiptType
        required: false
        schema:
          items:
            $ref: '#/components/schemas/ReceiptTypeEnum'
          type: array
        style: form
      - description: Filter by address of the account receiving the transaction.
        explode: true
        in: query
        name: recipientAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by address sending mosaics.
        explode: true
        in: query
        name: senderAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Filter by target address.
        explode: true
        in: query
        name: targetAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Mosaic or namespace identifier
        explode: true
        in: query
        name: artifactId
        required: false
        schema:
          type: string
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatementPage'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search transaction statements
      tags:
      - Receipt routes
  /statements/resolutions/address:
    get:
      description: Gets an array of address resolution statements.
      operationId: searchAddressResolutionStatements
      parameters:
      - description: Filter by block height.
        explode: true
        in: query
        name: height
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolutionStatementPage'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get receipts address resolution statements
      tags:
      - Receipt routes
  /statements/resolutions/mosaic:
    get:
      description: Gets an array of mosaic resolution statements.
      operationId: searchMosaicResolutionStatements
      parameters:
      - description: Filter by block height.
        explode: true
        in: query
        name: height
        required: false
        schema:
          $ref: '#/components/schemas/Height'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolutionStatementPage'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get receipts mosaic resolution statements
      tags:
      - Receipt routes
  /restrictions/account:
    get:
      description: Returns an array of account restrictions.
      operationId: searchAccountRestrictions
      parameters:
      - description: |
          Filter by address involved in the transaction.
          An account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.
          This filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.
        explode: true
        in: query
        name: address
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRestrictionsPage'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search account restrictions
      tags:
      - Restriction Account routes
  /restrictions/account/{address}:
    get:
      description: Returns the account restrictions for a given address.
      operationId: getAccountRestrictions
      parameters:
      - description: Account address.
        explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountRestrictionsInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get the account restrictions
      tags:
      - Restriction Account routes
  /restrictions/account/{address}/merkle:
    get:
      description: Returns the account restrictions merkle for a given address.
      operationId: getAccountRestrictionsMerkle
      parameters:
      - description: Account address.
        explode: false
        in: path
        name: address
        required: true
        schema:
          $ref: '#/components/schemas/Address'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get the account restrictions merkle
      tags:
      - Restriction Account routes
  /restrictions/mosaic:
    get:
      description: Returns an array of mosaic restrictions.
      operationId: searchMosaicRestrictions
      parameters:
      - description: Filter by mosaic identifier.
        explode: true
        in: query
        name: mosaicId
        required: false
        schema:
          $ref: '#/components/schemas/MosaicId'
        style: form
      - description: Filter by entry type.
        explode: true
        in: query
        name: entryType
        required: false
        schema:
          $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
        style: form
      - description: Filter by target address.
        explode: true
        in: query
        name: targetAddress
        required: false
        schema:
          $ref: '#/components/schemas/Address'
        style: form
      - description: Select the number of entries to return.
        explode: true
        in: query
        name: pageSize
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Filter by page number.
        explode: true
        in: query
        name: pageNumber
        required: false
        schema:
          default: 1
          minimum: 1
          type: integer
        style: form
      - description: |
          Entry id at which to start pagination.
          If the ordering parameter is set to -id, the elements returned precede the identifier.
          Otherwise, newer elements with respect to the id are returned.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: string
        style: form
      - description: |
          Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
          If the request does not specify ``orderBy``, REST returns the collection ordered by id.
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Order'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicRestrictionsPage'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Search mosaic restrictions
      tags:
      - Restriction Mosaic routes
  /restrictions/mosaic/{compositeHash}:
    get:
      description: Returns the mosaic restrictions for a composite hash.
      operationId: getMosaicRestrictions
      parameters:
      - description: Filter by composite hash.
        explode: false
        in: path
        name: compositeHash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MosaicRestrictionDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get the mosaic restrictions
      tags:
      - Restriction Mosaic routes
  /restrictions/mosaic/{compositeHash}/merkle:
    get:
      description: Returns the mosaic restrictions merkle for a given composite hash.
      operationId: getMosaicRestrictionsMerkle
      parameters:
      - description: Filter by composite hash.
        explode: false
        in: path
        name: compositeHash
        required: true
        schema:
          $ref: '#/components/schemas/Hash256'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerkleStateInfoDTO'
          description: success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: ResourceNotFound
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelError'
          description: InvalidArgument
      summary: Get the mosaic restrictions merkle
      tags:
      - Restriction Mosaic routes
components:
  parameters:
    address:
      description: Account address.
      explode: false
      in: path
      name: address
      required: true
      schema:
        $ref: '#/components/schemas/Address'
      style: simple
    accountIdPath:
      description: Account public key or address encoded using a 32-character set.
      explode: false
      in: path
      name: accountId
      required: true
      schema:
        type: string
      style: simple
    hashPath:
      description: Filter by hash.
      explode: false
      in: path
      name: hash
      required: true
      schema:
        $ref: '#/components/schemas/Hash256'
      style: simple
    compositeHashPath:
      description: Filter by composite hash.
      explode: false
      in: path
      name: compositeHash
      required: true
      schema:
        $ref: '#/components/schemas/Hash256'
      style: simple
    heightPath:
      description: Block height.
      explode: false
      in: path
      name: height
      required: true
      schema:
        $ref: '#/components/schemas/Height'
      style: simple
    limitPath:
      description: |
        Number of elements to be returned.
        The limit should be greater than or equal to "db.pageSizeMin" and not higher than "db.pageSizeMax".
        The settings are adjustable via the configuration file (rest/resources/rest.json) per REST instance.
      explode: false
      in: path
      name: limit
      required: true
      schema:
        type: integer
      style: simple
    mosaicIdPath:
      description: Mosaic identifier.
      explode: false
      in: path
      name: mosaicId
      required: true
      schema:
        $ref: '#/components/schemas/MosaicId'
      style: simple
    namespaceIdPath:
      description: Namespace identifier.
      explode: false
      in: path
      name: namespaceId
      required: true
      schema:
        $ref: '#/components/schemas/NamespaceId'
      style: simple
    publicKeyPath:
      description: Account public key.
      explode: false
      in: path
      name: publicKey
      required: true
      schema:
        $ref: '#/components/schemas/PublicKey'
      style: simple
    receiptHashPath:
      description: Receipt hash.
      explode: false
      in: path
      name: hash
      required: true
      schema:
        $ref: '#/components/schemas/Hash256'
      style: simple
    sourceAddressPath:
      description: Account address.
      explode: false
      in: path
      name: sourceAddress
      required: true
      schema:
        $ref: '#/components/schemas/Address'
      style: simple
    transactionHashPath:
      description: Transaction hash.
      explode: false
      in: path
      name: hash
      required: true
      schema:
        $ref: '#/components/schemas/Hash256'
      style: simple
    transactionIdPath:
      description: Transaction id or hash.
      explode: false
      in: path
      name: transactionId
      required: true
      schema:
        type: string
      style: simple
    addressQuery:
      description: |
        Filter by address involved in the transaction.
        An account's address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction.
        This filter cannot be combined with ``recipientAddress`` and ``signerPublicKey`` query params.
      explode: true
      in: query
      name: address
      required: false
      schema:
        $ref: '#/components/schemas/Address'
      style: form
    artifactIdQuery:
      description: Mosaic or namespace identifier
      explode: true
      in: query
      name: artifactId
      required: false
      schema:
        type: string
      style: form
    mosaicIdQuery:
      description: Filter by mosaic identifier.
      explode: true
      in: query
      name: mosaicId
      required: false
      schema:
        $ref: '#/components/schemas/MosaicId'
      style: form
    aliasTypeQuery:
      description: Filter by alias type.
      explode: true
      in: query
      name: aliasType
      required: false
      schema:
        $ref: '#/components/schemas/AliasTypeEnum'
      style: form
    beneficiaryAddressQuery:
      description: Filter by beneficiary address.
      explode: true
      in: query
      name: beneficiaryAddress
      required: false
      schema:
        $ref: '#/components/schemas/Address'
      style: form
    embedded:
      description: |
        When true, the endpoint also returns all the embedded aggregate transactions.
        Otherwise, only top-level transactions used to calculate the block transactionsHash are returned.
        **Note:** This field does not work when combined with the ``address`` parameter. This is,
        embedded transactions containing the address specified through the ``address`` parameter
        will not be returned even when used with ``embedded=true``. There is no problem when using
        other parameters like ``recipientAddress`` instead.
      explode: true
      in: query
      name: embedded
      required: false
      schema:
        default: false
        type: boolean
      style: form
    entryType:
      description: Filter by entry type.
      explode: true
      in: query
      name: entryType
      required: false
      schema:
        $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
      style: form
    fromHeightQuery:
      description: Only blocks with height greater or equal than this one are returned.
      explode: true
      in: query
      name: fromHeight
      required: false
      schema:
        $ref: '#/components/schemas/Height'
      style: form
    fromTransferAmountQuery:
      description: |
        Requires providing the `transferMosaicId` filter.
        Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.
      explode: true
      in: query
      name: fromTransferAmount
      required: false
      schema:
        $ref: '#/components/schemas/Amount'
      style: form
    heightQuery:
      description: Filter by block height.
      explode: true
      in: query
      name: height
      required: false
      schema:
        $ref: '#/components/schemas/Height'
      style: form
    idQuery:
      description: |
        Entry id at which to start pagination.
        If the ordering parameter is set to -id, the elements returned precede the identifier.
        Otherwise, newer elements with respect to the id are returned.
      explode: true
      in: query
      name: id
      required: false
      schema:
        type: string
      style: form
    metadataType:
      description: Filter by metadata type.
      explode: true
      in: query
      name: metadataType
      required: false
      schema:
        $ref: '#/components/schemas/MetadataTypeEnum'
      style: form
    level0Query:
      description: Filter by root namespace.
      explode: true
      in: query
      name: level0
      required: false
      schema:
        $ref: '#/components/schemas/NamespaceId'
      style: form
    offsetQuery:
      description: |
        Entry id at which to start pagination.
        If the ordering parameter is set to -id, the elements returned precede the identifier.
        Otherwise, newer elements with respect to the id are returned.
      explode: true
      in: query
      name: offset
      required: false
      schema:
        type: string
      style: form
    orderQuery:
      description: |
        Sort responses in ascending or descending order based on the collection property set on the param ``orderBy``.
        If the request does not specify ``orderBy``, REST returns the collection ordered by id.
      explode: true
      in: query
      name: order
      required: false
      schema:
        $ref: '#/components/schemas/Order'
      style: form
    orderByAccountQuery:
      description: |
        Sort responses by the property set.
        If ``balance`` option is selected, the request must define the ``mosaicId`` filter.
      explode: true
      in: query
      name: orderBy
      required: false
      schema:
        $ref: '#/components/schemas/AccountOrderByEnum'
      style: form
    ownerAddressQuery:
      description: Filter by owner address.
      explode: true
      in: query
      name: ownerAddress
      required: false
      schema:
        $ref: '#/components/schemas/Address'
      style: form
    orderByBlockQuery:
      description: |
        Sort responses by the property set.
      explode: true
      in: query
      name: orderBy
      required: false
      schema:
        $ref: '#/components/schemas/BlockOrderByEnum'
      style: form
    pageNumberQuery:
      description: Filter by page number.
      explode: true
      in: query
      name: pageNumber
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
      style: form
    pageSizeQuery:
      description: Select the number of entries to return.
      explode: true
      in: query
      name: pageSize
      required: false
      schema:
        default: 10
        maximum: 100
        minimum: 10
        type: integer
      style: form
    receiptTypeQuery:
      description: |
        Filter by receipt type.
        To filter by multiple receipt types, add more filter query params like: ``receiptType=8515&receiptType=20803``.
      explode: true
      in: query
      name: receiptType
      required: false
      schema:
        items:
          $ref: '#/components/schemas/ReceiptTypeEnum'
        type: array
      style: form
    recipientAddressQuery:
      description: Filter by address of the account receiving the transaction.
      explode: true
      in: query
      name: recipientAddress
      required: false
      schema:
        $ref: '#/components/schemas/Address'
      style: form
    secretQuery:
      description: Filter by secret.
      explode: true
      in: query
      name: secret
      required: false
      schema:
        $ref: '#/components/schemas/Secret'
      style: form
    senderAddressQuery:
      description: Filter by address sending mosaics.
      explode: true
      in: query
      name: senderAddress
      required: false
      schema:
        $ref: '#/components/schemas/Address'
      style: form
    scopedMetadataKeyQuery:
      description: Filter by metadata key.
      explode: true
      in: query
      name: scopedMetadataKey
      required: false
      schema:
        $ref: '#/components/schemas/MetadataKey'
      style: form
    sourceAddressQuery:
      description: Filter by address sending the metadata entry.
      explode: true
      in: query
      name: sourceAddress
      required: false
      schema:
        $ref: '#/components/schemas/Address'
      style: form
    registrationTypeQuery:
      description: Filter by registration type.
      explode: true
      in: query
      name: registrationType
      required: false
      schema:
        $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
      style: form
    signerPublicKeyQuery:
      description: Filter by public key of the account signing the entity.
      explode: true
      in: query
      name: signerPublicKey
      required: false
      schema:
        $ref: '#/components/schemas/PublicKey'
      style: form
    targetIdQuery:
      description: Filter by namespace or mosaic id.
      explode: true
      in: query
      name: targetId
      required: false
      schema:
        example: 0DC67FBE1CAD29E3
        format: hex
        type: string
      style: form
    targetAddressQuery:
      description: Filter by target address.
      explode: true
      in: query
      name: targetAddress
      required: false
      schema:
        $ref: '#/components/schemas/Address'
      style: form
    toHeightQuery:
      description: Only blocks with height smaller or equal than this one are returned.
      explode: true
      in: query
      name: toHeight
      required: false
      schema:
        $ref: '#/components/schemas/Height'
      style: form
    toTransferAmountQuery:
      description: |
        Requires providing the `transferMosaicId` filter.
        Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.
      explode: true
      in: query
      name: toTransferAmount
      required: false
      schema:
        $ref: '#/components/schemas/Amount'
      style: form
    transactionTypeQuery:
      description: |
        Filter by transaction type.
        To filter by multiple transaction types, add more filter query params like: ``type=16974&type=16718``.
      explode: true
      in: query
      name: type
      required: false
      schema:
        items:
          $ref: '#/components/schemas/TransactionTypeEnum'
        type: array
      style: form
    transferMosaicIdQuery:
      description: Filters transactions involving a specific ``mosaicId``.
      explode: true
      in: query
      name: transferMosaicId
      required: false
      schema:
        $ref: '#/components/schemas/MosaicId'
      style: form
  requestBodies:
    accountIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/accountIds'
      required: false
    addresses:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/addresses'
      required: true
    cosignature:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/cosignature'
      required: true
    mosaicIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/mosaicIds'
      required: true
    namespaceIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/namespaceIds'
      required: true
    transactionHashes:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionHashes'
      required: true
    transactionIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionIds'
      required: true
    transactionPayload:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/transactionPayload'
      required: true
  responses:
    ResourceNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
      description: ResourceNotFound
    InvalidContent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
      description: InvalidContent
    InvalidArgument:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ModelError'
      description: InvalidArgument
  schemas:
    Address:
      description: Address encoded using a 32-character set.
      example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
      type: string
    Amount:
      description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
        with divisibility 6 means 123.456789 (relative).
      example: "123456"
      type: string
    BlockDuration:
      description: Duration expressed in number of blocks.
      example: "200"
      type: string
    BlockFeeMultiplier:
      description: Fee multiplier applied to transactions contained in block.
      example: 0
      format: int64
      type: integer
    CosignatureVersion:
      description: Cosignature version.
      example: "0"
      type: string
    Difficulty:
      description: "Determines how hard is to harvest a new block, based on previous\
        \ blocks."
      example: "100000000000000"
      type: string
    FinalizationEpoch:
      description: Finalization Epoch
      example: 123456
      format: int64
      type: integer
    FinalizationPoint:
      description: Finalization point
      example: 0
      format: int64
      type: integer
    Hash256:
      example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
      format: hex
      type: string
    Height:
      description: Height of the blockchain.
      example: "1"
      type: string
    FinalizedHeight:
      description: Finalized height of the blockchain.
      example: "1"
      type: string
    Importance:
      description: Probability of an account to harvest the next block.
      example: "0"
      type: string
    LinkActionEnum:
      description: |
        Type of action:
        * 0 - Unlink.
        * 1 - Link.
      enum:
      - 0
      - 1
      type: integer
    MetadataKey:
      description: "Metadata key scoped to source, target and type expressed."
      example: 0DC67FBE1CAD29E3
      format: hex
      type: string
    MetadataValue:
      description: "Metadata value. If embedded in a transaction, this is calculated\
        \ as xor(previous-value, value)."
      format: hex
      type: string
    ModelError:
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
      type: object
    MosaicId:
      description: Mosaic identifier.
      example: 0DC67FBE1CAD29E3
      format: hex
      type: string
    Mosaic:
      example:
        amount: "123456"
        id: 0DC67FBE1CAD29E3
      properties:
        id:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        amount:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
      required:
      - amount
      - id
      type: object
    MerkleStateInfoDTO:
      description: |
        The merkle path information clients can use to proof the state of the given entity.
      example:
        tree:
        - null
        - null
        raw: 00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1
      properties:
        raw:
          description: |
            The hex information of the complete merkle tree as returned by server api.
            More information can be found in chapter 4.3 of the catapult whitepaper.
          example: 00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1
          format: hex
          type: string
        tree:
          description: Merkle tree parsed from merkle tree raw.
          items:
            $ref: '#/components/schemas/MerkleStateInfoDTO_tree_inner'
          type: array
      required:
      - raw
      - tree
      type: object
    MerkleTreeRaw:
      description: |
        The hex information of the complete merkle tree as returned by server api.
        More information can be found in chapter 4.3 of the catapult whitepaper.
      example: 00008080DA9B4AF63BE985715EA635AF98E3CF3B0A22F9A2BE1C7DD40B79948AA63E36586E5D2E9D0C089C1C64BC0D42A11ADBD1CD6CDB4B7C294062F55113525A64AE3CFF3F04A7F2A487B42EA89323C4408F82415223ACFEC7DFA7924EFC31A70778AB17A00C3EAFF635F01BB3B474F0AF1BE99FBDA85EEFB209CC7BD158D3540DE3A3F2D1
      format: hex
      type: string
    MerkleTreeBranchDTO:
      description: Merkle tree branch node.
      properties:
        type:
          $ref: '#/components/schemas/MerkleTreeNodeTypeEnum'
        path:
          description: Branch link path.
          type: string
        encodedPath:
          description: Encoded branch link path.
          type: string
        nibbleCount:
          description: Nibble count.
          type: integer
        linkMask:
          description: Branch link bitmask.
          type: string
        links:
          description: Branch links (max 16).
          items:
            $ref: '#/components/schemas/MerkleTreeBranchLinkDTO'
          type: array
        branchHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
      required:
      - branchHash
      - encodedPath
      - linkMask
      - links
      - nibbleCount
      - path
      - type
      type: object
    MerkleTreeLeafDTO:
      description: Merkle tree leaf node.
      properties:
        type:
          $ref: '#/components/schemas/MerkleTreeNodeTypeEnum'
        path:
          description: Leaf path.
          type: string
        encodedPath:
          description: Encoded leaf path.
          type: string
        nibbleCount:
          description: Nibble count.
          type: integer
        value:
          description: Leaf value (sha256 hash).
          type: string
        leafHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
      required:
      - encodedPath
      - leafHash
      - nibbleCount
      - path
      - type
      - value
      type: object
    MerkleTreeBranchLinkDTO:
      description: Merkle tree branch link.
      properties:
        bit:
          description: Branch link nibble bit index (hexadecimal).
          type: string
        link:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
      required:
      - bit
      - link
      type: object
    MerkleTreeNodeTypeEnum:
      description: |
        Type of Merkle tree node:
        * 0 - Branch node.
        * 255 - Leaf node.
      enum:
      - 0
      - 255
      example: 0
      type: integer
    RestrictionKey:
      description: Restriction key.
      example: 0DC67FBE1CAD29E3
      format: hex
      type: string
    NamespaceId:
      description: Namespace identifier.
      example: 85BBEA6CC462B244
      format: hex
      type: string
    Order:
      default: desc
      description: "Indicates how to sort the results: \n* ``asc`` - ascending\n*\
        \ ``desc`` - descending\n"
      enum:
      - asc
      - desc
      type: string
    Pagination:
      example:
        pageNumber: 0
        pageSize: 6
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
      required:
      - pageNumber
      - pageSize
      type: object
    PublicKey:
      description: Public key.
      example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      format: hex
      type: string
    ProofGamma:
      description: 32-bytes VRF proof gamma.
      example: 8D49594A96C31EC6C64305FB2CCB47AA7A4AC0A4F614442BB3684D2BF41F274E
      format: hex
      type: string
    ProofScalar:
      description: 32-bytes VRF proof scalar.
      example: 480175C83739B22C53EAECAA7E7F3B245F1DFAFA6B3AE5C1D0129502FCBAAD0C
      format: hex
      type: string
    ProofVerificationHash:
      description: 16-bytes VRF proof verification hash.
      example: 82FB583BFE3EE78805784D078F2547AE
      format: hex
      type: string
    Score:
      description: |
        Score of the blockchain. During synchronization, nodes try to get the
        blockchain with highest score in the network.
      example: "1683298087010368300"
      type: string
    LockStatus:
      description: |
        Possible status of lock states:
        * 0 - UNUSED.
        * 1 - USED.
      enum:
      - 0
      - 1
      type: integer
    Secret:
      description: Secret.
      example: FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1
      format: hex
      type: string
    Signature:
      description: Entity's signature generated by the signer.
      example: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
      type: string
    StateVersion:
      description: The version of the state
      example: 1
      type: integer
    Timestamp:
      description: Number of milliseconds elapsed since the creation of the nemesis
        block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
      example: "108303181802"
      type: string
    UInt32:
      description: A number that allows uint 32 values.
      example: 2222212828
      format: int64
      type: integer
    UInt64:
      description: A number that allows uint 64 values represented with a string.
      example: "123456"
      type: string
    UnresolvedAddress:
      description: "Address expressed in Base32 format. If the bit 0 of byte 0 is\
        \ not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
        \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at byte\
        \ 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
      example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
      type: string
    UnresolvedMosaicId:
      description: |
        Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
        is used instead of the real mosaic identifier.
      example: 85BBEA6CC462B244
      format: hex
      type: string
    UnresolvedMosaic:
      properties:
        id:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        amount:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
      required:
      - amount
      - id
      type: object
    VotingKey:
      description: 32 bytes voting public key.
      example: 4EDDA97C991A0BF44E0570B0BA0E0F7F1CE821A799726888734F28DDCCE8C591
      format: hex
      type: string
    RestrictionValue:
      description: Restriction value.
      example: "1000"
      type: string
    AccountOrderByEnum:
      enum:
      - id
      - balance
      type: string
    AccountPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - id: id
          account:
            publicKeyHeight: "1"
            address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            importance: "0"
            accountType: null
            supplementalPublicKeys:
              node:
                publicKey: publicKey
              voting:
                publicKeys:
                - endEpoch: 123456
                  publicKey: publicKey
                  startEpoch: 123456
                - endEpoch: 123456
                  publicKey: publicKey
                  startEpoch: 123456
              vrf:
                publicKey: publicKey
              linked:
                publicKey: publicKey
            mosaics:
            - amount: "123456"
              id: 0DC67FBE1CAD29E3
            - amount: "123456"
              id: 0DC67FBE1CAD29E3
            publicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
            importanceHeight: "1"
            version: 1
            addressHeight: "1"
            activityBuckets:
            - beneficiaryCount: 2222212828
              totalFeesPaid: "123456"
              rawScore: "0"
              startHeight: "1"
            - beneficiaryCount: 2222212828
              totalFeesPaid: "123456"
              rawScore: "0"
              startHeight: "1"
        - id: id
          account:
            publicKeyHeight: "1"
            address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            importance: "0"
            accountType: null
            supplementalPublicKeys:
              node:
                publicKey: publicKey
              voting:
                publicKeys:
                - endEpoch: 123456
                  publicKey: publicKey
                  startEpoch: 123456
                - endEpoch: 123456
                  publicKey: publicKey
                  startEpoch: 123456
              vrf:
                publicKey: publicKey
              linked:
                publicKey: publicKey
            mosaics:
            - amount: "123456"
              id: 0DC67FBE1CAD29E3
            - amount: "123456"
              id: 0DC67FBE1CAD29E3
            publicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
            importanceHeight: "1"
            version: 1
            addressHeight: "1"
            activityBuckets:
            - beneficiaryCount: 2222212828
              totalFeesPaid: "123456"
              rawScore: "0"
              startHeight: "1"
            - beneficiaryCount: 2222212828
              totalFeesPaid: "123456"
              rawScore: "0"
              startHeight: "1"
      properties:
        data:
          description: Array of accounts.
          items:
            $ref: '#/components/schemas/AccountInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    AccountTypeEnum:
      description: |
        * 0 - Unlinked.
        * 1 - Balance-holding account that is linked to a remote harvester account.
        * 2 - Remote harvester account that is linked to a balance-holding account.
        * 3 - Remote harvester eligible account that is unlinked.
      enum:
      - 0
      - 1
      - 2
      - 3
      type: integer
    AccountDTO:
      example:
        publicKeyHeight: "1"
        address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        importance: "0"
        accountType: null
        supplementalPublicKeys:
          node:
            publicKey: publicKey
          voting:
            publicKeys:
            - endEpoch: 123456
              publicKey: publicKey
              startEpoch: 123456
            - endEpoch: 123456
              publicKey: publicKey
              startEpoch: 123456
          vrf:
            publicKey: publicKey
          linked:
            publicKey: publicKey
        mosaics:
        - amount: "123456"
          id: 0DC67FBE1CAD29E3
        - amount: "123456"
          id: 0DC67FBE1CAD29E3
        publicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        importanceHeight: "1"
        version: 1
        addressHeight: "1"
        activityBuckets:
        - beneficiaryCount: 2222212828
          totalFeesPaid: "123456"
          rawScore: "0"
          startHeight: "1"
        - beneficiaryCount: 2222212828
          totalFeesPaid: "123456"
          rawScore: "0"
          startHeight: "1"
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        address:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        addressHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
        publicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        publicKeyHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
        accountType:
          $ref: '#/components/schemas/AccountTypeEnum'
        supplementalPublicKeys:
          $ref: '#/components/schemas/SupplementalPublicKeysDTO'
        activityBuckets:
          items:
            $ref: '#/components/schemas/ActivityBucketDTO'
          type: array
        mosaics:
          description: Mosaic units owned.
          items:
            $ref: '#/components/schemas/Mosaic'
          type: array
        importance:
          description: Probability of an account to harvest the next block.
          example: "0"
          type: string
        importanceHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
      required:
      - accountType
      - activityBuckets
      - address
      - addressHeight
      - importance
      - importanceHeight
      - mosaics
      - publicKey
      - publicKeyHeight
      - supplementalPublicKeys
      - version
      type: object
    AccountInfoDTO:
      example:
        id: id
        account:
          publicKeyHeight: "1"
          address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          importance: "0"
          accountType: null
          supplementalPublicKeys:
            node:
              publicKey: publicKey
            voting:
              publicKeys:
              - endEpoch: 123456
                publicKey: publicKey
                startEpoch: 123456
              - endEpoch: 123456
                publicKey: publicKey
                startEpoch: 123456
            vrf:
              publicKey: publicKey
            linked:
              publicKey: publicKey
          mosaics:
          - amount: "123456"
            id: 0DC67FBE1CAD29E3
          - amount: "123456"
            id: 0DC67FBE1CAD29E3
          publicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          importanceHeight: "1"
          version: 1
          addressHeight: "1"
          activityBuckets:
          - beneficiaryCount: 2222212828
            totalFeesPaid: "123456"
            rawScore: "0"
            startHeight: "1"
          - beneficiaryCount: 2222212828
            totalFeesPaid: "123456"
            rawScore: "0"
            startHeight: "1"
      properties:
        id:
          description: Internal resource identifier.
          type: string
        account:
          $ref: '#/components/schemas/AccountDTO'
      required:
      - account
      - id
      type: object
    ActivityBucketDTO:
      description: |
        Supplementary data stored for importance recalculation.
        At each importance recalculation, existing buckets are shifted, the working bucket is finalized and a new working bucket is created.
        Each bucket influences at most five importance recalculations.
      example:
        beneficiaryCount: 2222212828
        totalFeesPaid: "123456"
        rawScore: "0"
        startHeight: "1"
      properties:
        startHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
        totalFeesPaid:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        beneficiaryCount:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        rawScore:
          description: Probability of an account to harvest the next block.
          example: "0"
          type: string
      required:
      - beneficiaryCount
      - rawScore
      - startHeight
      - totalFeesPaid
      type: object
    AccountLinkPublicKeyDTO:
      example:
        publicKey: publicKey
      properties:
        publicKey:
          type: string
      required:
      - publicKey
      type: object
    AccountLinkVotingKeysDTO:
      example:
        publicKeys:
        - endEpoch: 123456
          publicKey: publicKey
          startEpoch: 123456
        - endEpoch: 123456
          publicKey: publicKey
          startEpoch: 123456
      properties:
        publicKeys:
          items:
            $ref: '#/components/schemas/AccountLinkVotingKeyDTO'
          type: array
      required:
      - publicKeys
      type: object
    AccountLinkVotingKeyDTO:
      example:
        endEpoch: 123456
        publicKey: publicKey
        startEpoch: 123456
      properties:
        publicKey:
          type: string
        startEpoch:
          description: Finalization Epoch
          example: 123456
          format: int64
          type: integer
        endEpoch:
          description: Finalization Epoch
          example: 123456
          format: int64
          type: integer
      required:
      - endEpoch
      - publicKey
      - startEpoch
      type: object
    SupplementalPublicKeysDTO:
      example:
        node:
          publicKey: publicKey
        voting:
          publicKeys:
          - endEpoch: 123456
            publicKey: publicKey
            startEpoch: 123456
          - endEpoch: 123456
            publicKey: publicKey
            startEpoch: 123456
        vrf:
          publicKey: publicKey
        linked:
          publicKey: publicKey
      properties:
        linked:
          $ref: '#/components/schemas/AccountLinkPublicKeyDTO'
        node:
          $ref: '#/components/schemas/AccountLinkPublicKeyDTO'
        vrf:
          $ref: '#/components/schemas/AccountLinkPublicKeyDTO'
        voting:
          $ref: '#/components/schemas/AccountLinkVotingKeysDTO'
      type: object
    AccountKeyTypeFlagsEnum:
      description: |
        Type of account key:
        * 0 - Unset.
        * 1 - Linked account public key.
        * 2 - Node public key on which remote is allowed to harvest.
        * 4 - VRF public key.
      enum:
      - 0
      - 1
      - 2
      - 4
      type: integer
    BlockOrderByEnum:
      enum:
      - id
      - height
      type: string
    PositionEnum:
      description: Position relative to the proofHash being evaluated.
      enum:
      - left
      - right
      type: string
    BlockDTO:
      allOf:
      - $ref: '#/components/schemas/SizePrefixedEntityDTO'
      - $ref: '#/components/schemas/VerifiableEntityDTO'
      - $ref: '#/components/schemas/EntityDTO'
      - properties:
          height:
            $ref: '#/components/schemas/Height'
          timestamp:
            $ref: '#/components/schemas/Timestamp'
          difficulty:
            $ref: '#/components/schemas/Difficulty'
          proofGamma:
            $ref: '#/components/schemas/ProofGamma'
          proofVerificationHash:
            $ref: '#/components/schemas/ProofVerificationHash'
          proofScalar:
            $ref: '#/components/schemas/ProofScalar'
          previousBlockHash:
            $ref: '#/components/schemas/Hash256'
          transactionsHash:
            $ref: '#/components/schemas/Hash256'
          receiptsHash:
            $ref: '#/components/schemas/Hash256'
          stateHash:
            $ref: '#/components/schemas/Hash256'
          beneficiaryAddress:
            $ref: '#/components/schemas/Address'
          feeMultiplier:
            $ref: '#/components/schemas/BlockFeeMultiplier'
        required:
        - beneficiaryAddress
        - difficulty
        - feeMultiplier
        - height
        - previousBlockHash
        - proofGamma
        - proofScalar
        - proofVerificationHash
        - receiptsHash
        - stateHash
        - timestamp
        - transactionsHash
        type: object
      type: object
    BlockInfoDTO:
      example:
        meta:
          statementsCount: 1
          stateHashSubCacheMerkleRoots:
          - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          totalFee: "123456"
          totalTransactionsCount: 1
          generationHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          transactionsCount: 1
        block: null
        id: id
      properties:
        id:
          description: Internal resource identifier.
          type: string
        meta:
          $ref: '#/components/schemas/BlockMetaDTO'
        block:
          $ref: '#/components/schemas/BlockInfoDTO_block'
      required:
      - block
      - id
      - meta
      type: object
    BlockMetaDTO:
      example:
        statementsCount: 1
        stateHashSubCacheMerkleRoots:
        - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        totalFee: "123456"
        totalTransactionsCount: 1
        generationHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        transactionsCount: 1
      properties:
        hash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        totalFee:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        generationHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        stateHashSubCacheMerkleRoots:
          items:
            $ref: '#/components/schemas/Hash256'
          type: array
        totalTransactionsCount:
          description: |
            Total number of [transactions](https://docs.symbolplatform.com/concepts/transaction.html) confirmed in this block, including *embedded* transactions (i.e. transactions contained within aggregate transactions).
          example: 1
          type: integer
        transactionsCount:
          description: |
            Number of [transactions](https://docs.symbolplatform.com/concepts/transaction.html) confirmed in this block. This does not count *embedded* transactions (i.e. transactions contained within aggregate transactions).
          example: 1
          type: integer
        statementsCount:
          description: |
            Number of statements (of any kind) present in this block. Bear in mind that some of them (like [resolution statements](https://docs.symbolplatform.com/concepts/receipt.html#resolution-statement)) are triggered by transactions present in the block, but in general, [transaction statements](https://docs.symbolplatform.com/concepts/receipt.html#transaction-statement) are not.
          example: 1
          type: integer
      required:
      - generationHash
      - hash
      - stateHashSubCacheMerkleRoots
      - statementsCount
      - totalFee
      - totalTransactionsCount
      - transactionsCount
      type: object
    BlockPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - meta:
            statementsCount: 1
            stateHashSubCacheMerkleRoots:
            - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            totalFee: "123456"
            totalTransactionsCount: 1
            generationHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            transactionsCount: 1
          block: null
          id: id
        - meta:
            statementsCount: 1
            stateHashSubCacheMerkleRoots:
            - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            totalFee: "123456"
            totalTransactionsCount: 1
            generationHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            transactionsCount: 1
          block: null
          id: id
      properties:
        data:
          description: Array of blocks.
          items:
            $ref: '#/components/schemas/BlockInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    ImportanceBlockDTO:
      allOf:
      - $ref: '#/components/schemas/BlockDTO'
      - properties:
          votingEligibleAccountsCount:
            $ref: '#/components/schemas/UInt32'
          harvestingEligibleAccountsCount:
            $ref: '#/components/schemas/UInt64'
          totalVotingBalance:
            $ref: '#/components/schemas/Amount'
          previousImportanceBlockHash:
            $ref: '#/components/schemas/Hash256'
        required:
        - harvestingEligibleAccountsCount
        - previousImportanceBlockHash
        - totalVotingBalance
        - votingEligibleAccountsCount
        type: object
      type: object
    MerklePathItemDTO:
      description: "Each merkle path item is composed of a hash, and a position relative\
        \ to the proofHash being evaluated."
      example:
        position: null
        hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
      properties:
        position:
          $ref: '#/components/schemas/PositionEnum'
        hash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
      type: object
    MerkleProofInfoDTO:
      example:
        merklePath:
        - position: null
          hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        - position: null
          hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
      properties:
        merklePath:
          description: List of complementary merkle path items needed to recalculate
            the merkle root.
          items:
            $ref: '#/components/schemas/MerklePathItemDTO'
          type: array
      type: object
    ChainInfoDTO:
      example:
        scoreHigh: "1683298087010368300"
        latestFinalizedBlock:
          finalizationEpoch: 123456
          finalizationPoint: 0
          hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          height: "1"
        scoreLow: "1683298087010368300"
        height: "1"
      properties:
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
        scoreHigh:
          description: |
            Score of the blockchain. During synchronization, nodes try to get the
            blockchain with highest score in the network.
          example: "1683298087010368300"
          type: string
        scoreLow:
          description: |
            Score of the blockchain. During synchronization, nodes try to get the
            blockchain with highest score in the network.
          example: "1683298087010368300"
          type: string
        latestFinalizedBlock:
          $ref: '#/components/schemas/FinalizedBlockDTO'
      required:
      - height
      - latestFinalizedBlock
      - scoreHigh
      - scoreLow
      type: object
    FinalizedBlockDTO:
      example:
        finalizationEpoch: 123456
        finalizationPoint: 0
        hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        height: "1"
      properties:
        finalizationEpoch:
          description: Finalization Epoch
          example: 123456
          format: int64
          type: integer
        finalizationPoint:
          description: Finalization point
          example: 0
          format: int64
          type: integer
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
        hash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
      required:
      - finalizationEpoch
      - finalizationPoint
      - hash
      - height
      type: object
    RentalFeesDTO:
      example:
        effectiveChildNamespaceRentalFee: "123456"
        effectiveRootNamespaceRentalFeePerBlock: "123456"
        effectiveMosaicRentalFee: "123456"
      properties:
        effectiveRootNamespaceRentalFeePerBlock:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        effectiveChildNamespaceRentalFee:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        effectiveMosaicRentalFee:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
      required:
      - effectiveChildNamespaceRentalFee
      - effectiveMosaicRentalFee
      - effectiveRootNamespaceRentalFeePerBlock
      type: object
    TransactionFeesDTO:
      example:
        minFeeMultiplier: 0
        averageFeeMultiplier: 0
        lowestFeeMultiplier: 0
        medianFeeMultiplier: 0
        highestFeeMultiplier: 0
      properties:
        averageFeeMultiplier:
          description: Fee multiplier applied to transactions contained in block.
          example: 0
          format: int64
          type: integer
        medianFeeMultiplier:
          description: Fee multiplier applied to transactions contained in block.
          example: 0
          format: int64
          type: integer
        highestFeeMultiplier:
          description: Fee multiplier applied to transactions contained in block.
          example: 0
          format: int64
          type: integer
        lowestFeeMultiplier:
          description: Fee multiplier applied to transactions contained in block.
          example: 0
          format: int64
          type: integer
        minFeeMultiplier:
          description: Fee multiplier applied to transactions contained in block.
          example: 0
          format: int64
          type: integer
      required:
      - averageFeeMultiplier
      - highestFeeMultiplier
      - lowestFeeMultiplier
      - medianFeeMultiplier
      - minFeeMultiplier
      type: object
    NetworkTypeEnum:
      description: |
        Network type:
        * 0x68 (104 decimal) - Main network.
        * 0x98 (152 decimal) - Test network.
      enum:
      - 104
      - 152
      example: 144
      type: integer
    EntityDTO:
      properties:
        signerPublicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        version:
          description: Entity version.
          type: integer
        network:
          $ref: '#/components/schemas/NetworkTypeEnum'
        type:
          type: integer
      required:
      - network
      - signerPublicKey
      - type
      - version
      type: object
    SizePrefixedEntityDTO:
      properties:
        size:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
      required:
      - size
      type: object
    VerifiableEntityDTO:
      properties:
        signature:
          description: Entity's signature generated by the signer.
          example: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
          type: string
      required:
      - signature
      type: object
    BmTreeSignature:
      example:
        bottom:
          signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
          parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        root:
          signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
          parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      properties:
        root:
          $ref: '#/components/schemas/ParentPublicKeySignaturePair'
        bottom:
          $ref: '#/components/schemas/ParentPublicKeySignaturePair'
      required:
      - bottom
      - root
      type: object
    FinalizationProofDTO:
      example:
        messageGroups:
        - stage: 0
          hashes:
          - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          signatures:
          - bottom:
              signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
              parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
            root:
              signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
              parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          - bottom:
              signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
              parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
            root:
              signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
              parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          height: "1"
        - stage: 0
          hashes:
          - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          signatures:
          - bottom:
              signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
              parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
            root:
              signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
              parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          - bottom:
              signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
              parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
            root:
              signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
              parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          height: "1"
        finalizationEpoch: 123456
        finalizationPoint: 0
        version: 0
        hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        height: "1"
      properties:
        version:
          type: integer
        finalizationEpoch:
          description: Finalization Epoch
          example: 123456
          format: int64
          type: integer
        finalizationPoint:
          description: Finalization point
          example: 0
          format: int64
          type: integer
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
        hash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        messageGroups:
          items:
            $ref: '#/components/schemas/MessageGroup'
          type: array
      required:
      - finalizationEpoch
      - finalizationPoint
      - hash
      - height
      - messageGroups
      - version
      type: object
    MessageGroup:
      example:
        stage: 0
        hashes:
        - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        - C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        signatures:
        - bottom:
            signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
            parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          root:
            signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
            parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        - bottom:
            signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
            parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          root:
            signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
            parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        height: "1"
      properties:
        stage:
          $ref: '#/components/schemas/StageEnum'
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
        hashes:
          items:
            $ref: '#/components/schemas/Hash256'
          type: array
        signatures:
          items:
            $ref: '#/components/schemas/BmTreeSignature'
          type: array
      required:
      - hashes
      - height
      - signatures
      - stage
      type: object
    ParentPublicKeySignaturePair:
      example:
        signature: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
        parentPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      properties:
        parentPublicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        signature:
          description: Entity's signature generated by the signer.
          example: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
          type: string
      required:
      - parentPublicKey
      - signature
      type: object
    StageEnum:
      description: |
        Type of stage:
        * 0 - Prevote.
        * 1 - Precommit.
        * 2 - Count.
      enum:
      - 0
      - 1
      - 2
      example: 0
      type: integer
    NodeIdentityEqualityStrategy:
      description: |
        Node equality strategy. Defines if the identifier for the node must be its public key or host.
      enum:
      - host
      - public-key
      type: string
    NetworkTypeDTO:
      example:
        name: testnet
        description: catapult public test network
      properties:
        name:
          description: Network name.
          example: testnet
          type: string
        description:
          description: A short text describing the network.
          example: catapult public test network
          type: string
      required:
      - description
      - name
      type: object
    ChainPropertiesDTO:
      description: Chain related configuration properties.
      example:
        blockFinalizationInterval: "30"
        enableVerifiableState: true
        maxDifficultyBlocks: "60"
        maxTransactionsPerBlock: 200'000
        blockPruneInterval: "360"
        maxMosaicAtomicUnits: 9'000'000'000'000'000
        minHarvesterBalance: "500"
        currencyMosaicId: 0x24F4'26B8'D549'3D4B
        minVotingKeyLifetime: "72"
        maxHarvesterBalance: 4'000'000
        harvestNetworkPercentage: "5"
        importanceGrouping: "39"
        maxRollbackBlocks: "40"
        initialCurrencyAtomicUnits: 8'998'999'998'000'000
        maxTransactionLifetime: 24h
        maxVotingKeyLifetime: "26280"
        harvestNetworkFeeSinkAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        maxBlockFutureTime: 500ms
        blockGenerationTargetTime: 30s
        blockTimeSmoothingFactor: "3000"
        harvestingMosaicId: 0x1D9C'DC7E'218C'A88D
        minVoterBalance: 50'000
        harvestBeneficiaryPercentage: "10"
        maxVotingKeysPerAccount: "3"
        enableVerifiableReceipts: true
        defaultDynamicFeeMultiplier: 10'000
        totalChainImportance: 15'000'000
        importanceActivityPercentage: "5"
      properties:
        enableVerifiableState:
          description: Set to true if block chain should calculate state hashes so
            that state is fully verifiable at each block.
          example: true
          type: boolean
        enableVerifiableReceipts:
          description: Set to true if block chain should calculate receipts so that
            state changes are fully verifiable at each block.
          example: true
          type: boolean
        currencyMosaicId:
          description: Mosaic id used as primary chain currency.
          example: 0x24F4'26B8'D549'3D4B
          type: string
        harvestingMosaicId:
          description: Mosaic id used to provide harvesting ability.
          example: 0x1D9C'DC7E'218C'A88D
          type: string
        blockGenerationTargetTime:
          description: Targeted time between blocks.
          example: 30s
          type: string
        blockTimeSmoothingFactor:
          description: A higher value makes the network more biased.
          example: "3000"
          type: string
        blockFinalizationInterval:
          description: Number of blocks between successive finalization attempts.
          example: "30"
          type: string
        importanceGrouping:
          description: Number of blocks that should be treated as a group for importance
            purposes.
          example: "39"
          type: string
        importanceActivityPercentage:
          description: Percentage of importance resulting from fee generation and
            beneficiary usage.
          example: "5"
          type: string
        maxRollbackBlocks:
          description: Maximum number of blocks that can be rolled back.
          example: "40"
          type: string
        maxDifficultyBlocks:
          description: Maximum number of blocks to use in a difficulty calculation.
          example: "60"
          type: string
        defaultDynamicFeeMultiplier:
          description: Default multiplier to use for dynamic fees.
          example: 10'000
          type: string
        maxTransactionLifetime:
          description: Maximum lifetime a transaction can have before it expires.
          example: 24h
          type: string
        maxBlockFutureTime:
          description: Maximum future time of a block that can be accepted.
          example: 500ms
          type: string
        initialCurrencyAtomicUnits:
          description: Initial currency atomic units available in the network.
          example: 8'998'999'998'000'000
          type: string
        maxMosaicAtomicUnits:
          description: Maximum atomic units (total-supply * 10 ^ divisibility) of
            a mosaic allowed in the network.
          example: 9'000'000'000'000'000
          type: string
        totalChainImportance:
          description: Total whole importance units available in the network.
          example: 15'000'000
          type: string
        minHarvesterBalance:
          description: Minimum number of harvesting mosaic atomic units needed for
            an account to be eligible for harvesting.
          example: "500"
          type: string
        maxHarvesterBalance:
          description: Maximum number of harvesting mosaic atomic units needed for
            an account to be eligible for harvesting.
          example: 4'000'000
          type: string
        minVoterBalance:
          description: Minimum number of harvesting mosaic atomic units needed for
            an account to be eligible for voting.
          example: 50'000
          type: string
        maxVotingKeysPerAccount:
          description: Maximum number of voting keys that can be registered at once
            per account.
          example: "3"
          type: string
        minVotingKeyLifetime:
          description: Minimum number of finalization rounds for which voting key
            can be registered.
          example: "72"
          type: string
        maxVotingKeyLifetime:
          description: Maximum number of finalization rounds for which voting key
            can be registered.
          example: "26280"
          type: string
        harvestBeneficiaryPercentage:
          description: Percentage of the harvested fee that is collected by the beneficiary
            account.
          example: "10"
          type: string
        harvestNetworkPercentage:
          description: Percentage of the harvested fee that is collected by the network.
          example: "5"
          type: string
        harvestNetworkFeeSinkAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        blockPruneInterval:
          description: Number of blocks between cache pruning.
          example: "360"
          type: string
        maxTransactionsPerBlock:
          description: Maximum number of transactions per block.
          example: 200'000
          type: string
      type: object
    NetworkConfigurationDTO:
      example:
        chain:
          blockFinalizationInterval: "30"
          enableVerifiableState: true
          maxDifficultyBlocks: "60"
          maxTransactionsPerBlock: 200'000
          blockPruneInterval: "360"
          maxMosaicAtomicUnits: 9'000'000'000'000'000
          minHarvesterBalance: "500"
          currencyMosaicId: 0x24F4'26B8'D549'3D4B
          minVotingKeyLifetime: "72"
          maxHarvesterBalance: 4'000'000
          harvestNetworkPercentage: "5"
          importanceGrouping: "39"
          maxRollbackBlocks: "40"
          initialCurrencyAtomicUnits: 8'998'999'998'000'000
          maxTransactionLifetime: 24h
          maxVotingKeyLifetime: "26280"
          harvestNetworkFeeSinkAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          maxBlockFutureTime: 500ms
          blockGenerationTargetTime: 30s
          blockTimeSmoothingFactor: "3000"
          harvestingMosaicId: 0x1D9C'DC7E'218C'A88D
          minVoterBalance: 50'000
          harvestBeneficiaryPercentage: "10"
          maxVotingKeysPerAccount: "3"
          enableVerifiableReceipts: true
          defaultDynamicFeeMultiplier: 10'000
          totalChainImportance: 15'000'000
          importanceActivityPercentage: "5"
        plugins:
          multisig:
            maxCosignedAccountsPerAccount: "5"
            maxCosignatoriesPerAccount: "10"
            maxMultisigDepth: "3"
          metadata:
            maxValueSize: "1024"
          restrictionaccount:
            maxAccountRestrictionValues: "512"
          transfer:
            maxMessageSize: "1024"
          restrictionmosaic:
            maxMosaicRestrictionValues: "20"
          mosaic:
            maxMosaicDuration: 3650d
            mosaicRentalFeeSinkAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            maxMosaicsPerAccount: 10'000
            mosaicRentalFee: "500"
            maxMosaicDivisibility: "6"
          namespace:
            namespaceRentalFeeSinkAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            minNamespaceDuration: 1m
            maxNamespaceDepth: "3"
            maxNamespaceDuration: 365d
            maxNameSize: "64"
            rootNamespaceRentalFeePerBlock: "1"
            reservedRootNamespaceNames: "xem, nem, user, account, org, com, biz, net,\
              \ edu, mil, gov, info"
            childNamespaceRentalFee: "100"
            namespaceGracePeriodDuration: 2m
            maxChildNamespaces: "500"
          locksecret:
            maxProofSize: "1000"
            maxSecretLockDuration: 30d
            minProofSize: "1"
          accountlink:
            dummy: dummy
          aggregate:
            maxTransactionsPerAggregate: 1'000
            maxCosignaturesPerAggregate: "15"
            enableStrictCosignatureCheck: false
            enableBondedAggregateSupport: true
            maxBondedTransactionLifetime: 48h
          lockhash:
            lockedFundsPerAggregate: 10'000'000
            maxHashLockDuration: 2d
        network:
          identifier: testnet
          epochAdjustment: 1573430400s
          nodeEqualityStrategy: null
          generationHashSeed: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          nemesisSignerPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      properties:
        network:
          $ref: '#/components/schemas/NetworkPropertiesDTO'
        chain:
          $ref: '#/components/schemas/ChainPropertiesDTO'
        plugins:
          $ref: '#/components/schemas/PluginsPropertiesDTO'
      required:
      - chain
      - network
      - plugins
      type: object
    NetworkPropertiesDTO:
      description: Network related configuration properties.
      example:
        identifier: testnet
        epochAdjustment: 1573430400s
        nodeEqualityStrategy: null
        generationHashSeed: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        nemesisSignerPublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      properties:
        identifier:
          description: Network identifier.
          example: testnet
          type: string
        nodeEqualityStrategy:
          $ref: '#/components/schemas/NodeIdentityEqualityStrategy'
        nemesisSignerPublicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        generationHashSeed:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        epochAdjustment:
          description: Nemesis epoch time adjustment.
          example: 1573430400s
          type: string
      type: object
    PluginsPropertiesDTO:
      description: Plugin related configuration properties.
      example:
        multisig:
          maxCosignedAccountsPerAccount: "5"
          maxCosignatoriesPerAccount: "10"
          maxMultisigDepth: "3"
        metadata:
          maxValueSize: "1024"
        restrictionaccount:
          maxAccountRestrictionValues: "512"
        transfer:
          maxMessageSize: "1024"
        restrictionmosaic:
          maxMosaicRestrictionValues: "20"
        mosaic:
          maxMosaicDuration: 3650d
          mosaicRentalFeeSinkAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          maxMosaicsPerAccount: 10'000
          mosaicRentalFee: "500"
          maxMosaicDivisibility: "6"
        namespace:
          namespaceRentalFeeSinkAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          minNamespaceDuration: 1m
          maxNamespaceDepth: "3"
          maxNamespaceDuration: 365d
          maxNameSize: "64"
          rootNamespaceRentalFeePerBlock: "1"
          reservedRootNamespaceNames: "xem, nem, user, account, org, com, biz, net,\
            \ edu, mil, gov, info"
          childNamespaceRentalFee: "100"
          namespaceGracePeriodDuration: 2m
          maxChildNamespaces: "500"
        locksecret:
          maxProofSize: "1000"
          maxSecretLockDuration: 30d
          minProofSize: "1"
        accountlink:
          dummy: dummy
        aggregate:
          maxTransactionsPerAggregate: 1'000
          maxCosignaturesPerAggregate: "15"
          enableStrictCosignatureCheck: false
          enableBondedAggregateSupport: true
          maxBondedTransactionLifetime: 48h
        lockhash:
          lockedFundsPerAggregate: 10'000'000
          maxHashLockDuration: 2d
      properties:
        accountlink:
          $ref: '#/components/schemas/AccountKeyLinkNetworkPropertiesDTO'
        aggregate:
          $ref: '#/components/schemas/AggregateNetworkPropertiesDTO'
        lockhash:
          $ref: '#/components/schemas/HashLockNetworkPropertiesDTO'
        locksecret:
          $ref: '#/components/schemas/SecretLockNetworkPropertiesDTO'
        metadata:
          $ref: '#/components/schemas/MetadataNetworkPropertiesDTO'
        mosaic:
          $ref: '#/components/schemas/MosaicNetworkPropertiesDTO'
        multisig:
          $ref: '#/components/schemas/MultisigNetworkPropertiesDTO'
        namespace:
          $ref: '#/components/schemas/NamespaceNetworkPropertiesDTO'
        restrictionaccount:
          $ref: '#/components/schemas/AccountRestrictionNetworkPropertiesDTO'
        restrictionmosaic:
          $ref: '#/components/schemas/MosaicRestrictionNetworkPropertiesDTO'
        transfer:
          $ref: '#/components/schemas/TransferNetworkPropertiesDTO'
      type: object
    NodeStatusEnum:
      enum:
      - up
      - down
      type: string
    RolesTypeEnum:
      description: |
        A number that defines the different roles the node provides. Possible roles are:
        * 1 - Peer node.
        * 2 - Api node.
        * 4 - Voting node.
        * 64 - IPv4 compatible node
        * 128 - IPv6 compatible node.

        The values are bitwise added together, Examples:
        1 = Just Peer.
        2 = Just Api.
        3 = Peer and Api node.
        7 = Peer, Api and Voting node.
        65 = IPv4 and Peer node.
      example: 7
      type: integer
    CommunicationTimestampsDTO:
      example:
        receiveTimestamp: "108303181802"
        sendTimestamp: "108303181802"
      properties:
        sendTimestamp:
          description: Number of milliseconds elapsed since the creation of the nemesis
            block. This value can be converted to epoch time by adding the network's
            'epochAdjustment'.
          example: "108303181802"
          type: string
        receiveTimestamp:
          description: Number of milliseconds elapsed since the creation of the nemesis
            block. This value can be converted to epoch time by adding the network's
            'epochAdjustment'.
          example: "108303181802"
          type: string
      type: object
    DeploymentDTO:
      example:
        deploymentTool: symbol-bootstrap
        lastUpdatedDate: 2021-06-02
        deploymentToolVersion: 1.0.6
      properties:
        deploymentTool:
          description: "The tool used to create, maintain and deploy the node. Examples:\
            \ symbol-bootstrap, manual."
          example: symbol-bootstrap
          type: string
        deploymentToolVersion:
          description: "The version of the tool used to create, maintain and deploy\
            \ the node."
          example: 1.0.6
          type: string
        lastUpdatedDate:
          description: When was the node last upgraded.
          example: 2021-06-02
          type: string
      required:
      - deploymentTool
      - deploymentToolVersion
      - lastUpdatedDate
      type: object
    NodeHealthDTO:
      example:
        apiNode: null
        db: null
      properties:
        apiNode:
          $ref: '#/components/schemas/NodeStatusEnum'
        db:
          $ref: '#/components/schemas/NodeStatusEnum'
      required:
      - apiNode
      - db
      type: object
    NodeHealthInfoDTO:
      example:
        status:
          apiNode: null
          db: null
      properties:
        status:
          $ref: '#/components/schemas/NodeHealthDTO'
      required:
      - status
      type: object
    NodeInfoDTO:
      example:
        port: 7900
        roles: 7
        nodePublicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        host: 127.0.0.1
        publicKey: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        networkGenerationHashSeed: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        networkIdentifier: 144
        version: 0
        friendlyName: api-node-0
      properties:
        version:
          description: Version of the application.
          example: 0
          type: integer
        publicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        networkGenerationHashSeed:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        roles:
          description: |
            A number that defines the different roles the node provides. Possible roles are:
            * 1 - Peer node.
            * 2 - Api node.
            * 4 - Voting node.
            * 64 - IPv4 compatible node
            * 128 - IPv6 compatible node.

            The values are bitwise added together, Examples:
            1 = Just Peer.
            2 = Just Api.
            3 = Peer and Api node.
            7 = Peer, Api and Voting node.
            65 = IPv4 and Peer node.
          example: 7
          type: integer
        port:
          description: Port used for the communication.
          example: 7900
          type: integer
        networkIdentifier:
          example: 144
          type: integer
        friendlyName:
          description: Node friendly name.
          example: api-node-0
          type: string
        host:
          description: Node IP address.
          example: 127.0.0.1
          type: string
        nodePublicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
      required:
      - friendlyName
      - host
      - networkGenerationHashSeed
      - networkIdentifier
      - port
      - publicKey
      - roles
      - version
      type: object
    NodeTimeDTO:
      example:
        communicationTimestamps:
          receiveTimestamp: "108303181802"
          sendTimestamp: "108303181802"
      properties:
        communicationTimestamps:
          $ref: '#/components/schemas/CommunicationTimestampsDTO'
      required:
      - communicationTimestamps
      type: object
    ServerDTO:
      example:
        restVersion: 1.0.14
        sdkVersion: 0.7.14
        deployment:
          deploymentTool: symbol-bootstrap
          lastUpdatedDate: 2021-06-02
          deploymentToolVersion: 1.0.6
      properties:
        restVersion:
          description: catapult-rest component version.
          example: 1.0.14
          type: string
        sdkVersion:
          description: catapult-sdk component version.
          example: 0.7.14
          type: string
        deployment:
          $ref: '#/components/schemas/DeploymentDTO'
      required:
      - deployment
      - restVersion
      - sdkVersion
      type: object
    ServerInfoDTO:
      example:
        serverInfo:
          restVersion: 1.0.14
          sdkVersion: 0.7.14
          deployment:
            deploymentTool: symbol-bootstrap
            lastUpdatedDate: 2021-06-02
            deploymentToolVersion: 1.0.6
      properties:
        serverInfo:
          $ref: '#/components/schemas/ServerDTO'
      required:
      - serverInfo
      type: object
    StorageInfoDTO:
      example:
        numBlocks: 245053
        numTransactions: 58590
        numAccounts: 177
      properties:
        numBlocks:
          description: Number of blocks stored.
          example: 245053
          type: integer
        numTransactions:
          description: Number of transactions stored.
          example: 58590
          type: integer
        numAccounts:
          description: Number of accounts created.
          example: 177
          type: integer
      required:
      - numAccounts
      - numBlocks
      - numTransactions
      type: object
    UnlockedAccountDTO:
      example:
        unlockedAccount:
        - AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
        - AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
      properties:
        unlockedAccount:
          items:
            $ref: '#/components/schemas/PublicKey'
          type: array
      required:
      - unlockedAccount
      type: object
    TransactionGroupEnum:
      description: |
        A transaction could be classified in the following groups:
        * Unconfirmed: The transaction reached the P2P network. At this point, it is not guaranteed that the transaction will be included in a block.
        * Confirmed: The transaction is included in a block.
        * Partial: The transaction requires to be cosigned by other transaction participants in order to be included in a block.
        * Failed: The transaction did not pass the network validation, and it was rejected.
      enum:
      - unconfirmed
      - confirmed
      - failed
      - partial
      type: string
    TransactionStatusEnum:
      description: |
        List of status errors that can be returned via the status channel after announcing a transaction:
        * Success
        * Neutral
        * Failure
        * Failure_Core_Past_Deadline - Validation failed because the deadline passed.
        * Failure_Core_Future_Deadline - Validation failed because the deadline is too far in the future.
        * Failure_Core_Insufficient_Balance - Validation failed because the account has an insufficient balance.
        * Failure_Core_Too_Many_Transactions - Validation failed because there are too many transactions in a block.
        * Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block - Validation failed because an entity originated from the nemesis account after the nemesis block.
        * Failure_Core_Wrong_Network - Validation failed because the entity has the wrong network specified.
        * Failure_Core_Invalid_Address - Validation failed because an address is invalid.
        * Failure_Core_Invalid_Version - Validation failed because entity version is invalid.
        * Failure_Core_Invalid_Transaction_Fee - Validation failed because a transaction fee is invalid.
        * Failure_Core_Block_Harvester_Ineligible - Validation failed because a block was harvested by an ineligible harvester.
        * Failure_Core_Zero_Address - Validation failed because an address is zero.
        * Failure_Core_Zero_Public_Key - Validation failed because a public key is zero.
        * Failure_Core_Nonzero_Internal_Padding - Validation failed because internal padding is nonzero.
        * Failure_Core_Address_Collision - Validation failed because an address collision is detected.
        * Failure_Core_Importance_Block_Mismatch - Validation failed because the block does not match the schema of an importance block.
        * Failure_Core_Unexpected_Block_Type - Validation failed because the block type is unexpected.
        * Failure_Core_Block_Explicit_Transactions_Hash_Mismatch - Validation failed because a block did not have the expected transactions hash at a specified height.
        * Failure_Core_Invalid_Link_Action - Validation failed because link action is invalid.
        * Failure_Core_Link_Already_Exists - Validation failed because main account is already linked to another account.
        * Failure_Core_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link.
        * Failure_Core_Invalid_Link_Range - Validation failed because link range is invalid.
        * Failure_Core_Too_Many_Links - Validation failed because main account has too many links of the specified type.
        * Failure_Core_Link_Start_Epoch_Invalid - Validation failed because the start epoch is invalid.
        * Failure_Hash_Already_Exists
        * Failure_Signature_Not_Verifiable - Validation failed because the verification of the signature failed.
        * Failure_AccountLink_Link_Already_Exists - Validation failed because main account is already linked to another account.
        * Failure_AccountLink_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing account link.
        * Failure_AccountLink_Unknown_Link - Validation failed because main account is not linked to another account.
        * Failure_AccountLink_Remote_Account_Ineligible - Validation failed because link is attempting to convert ineligible account to remote.
        * Failure_AccountLink_Remote_Account_Signer_Prohibited - Validation failed because remote is not allowed to sign a transaction.
        * Failure_AccountLink_Remote_Account_Participant_Prohibited - Validation failed because remote is not allowed to participate in the transaction.
        * Failure_Aggregate_Too_Many_Transactions - Validation failed because aggregate has too many transactions.
        * Failure_Aggregate_No_Transactions - Validation failed because aggregate does not have any transactions.
        * Failure_Aggregate_Too_Many_Cosignatures - Validation failed because aggregate has too many cosignatures.
        * Failure_Aggregate_Redundant_Cosignatures - Validation failed because redundant cosignatures are present.
        * Failure_Aggregate_Ineligible_Cosignatories - Validation failed because at least one cosignatory is ineligible.
        * Failure_Aggregate_Missing_Cosignatures - Validation failed because at least one required cosignature is missing.
        * Failure_Aggregate_Transactions_Hash_Mismatch - Validation failed because the aggregate transactions hash does not match the calculated value.
        * Failure_LockHash_Invalid_Mosaic_Id - Validation failed because lock does not allow the specified mosaic.
        * Failure_LockHash_Invalid_Mosaic_Amount - Validation failed because lock does not allow the specified amount.
        * Failure_LockHash_Hash_Already_Exists - Validation failed because hash is already present in cache.
        * Failure_LockHash_Unknown_Hash - Validation failed because hash is not present in cache.
        * Failure_LockHash_Inactive_Hash - Validation failed because hash is inactive.
        * Failure_LockHash_Invalid_Duration - Validation failed because duration is too long.
        * Failure_LockSecret_Invalid_Hash_Algorithm - Validation failed because hash algorithm for lock type secret is invalid.
        * Failure_LockSecret_Hash_Already_Exists - Validation failed because hash is already present in cache.
        * Failure_LockSecret_Proof_Size_Out_Of_Bounds - Validation failed because proof is too small or too large.
        * Failure_LockSecret_Secret_Mismatch - Validation failed because secret does not match proof.
        * Failure_LockSecret_Unknown_Composite_Key - Validation failed because composite key is unknown.
        * Failure_LockSecret_Inactive_Secret - Validation failed because secret is inactive.
        * Failure_LockSecret_Hash_Algorithm_Mismatch - Validation failed because hash algorithm does not match.
        * Failure_LockSecret_Invalid_Duration - Validation failed because duration is too long.
        * Failure_Metadata_Value_Too_Small - Validation failed because the metadata value is too small.
        * Failure_Metadata_Value_Too_Large - Validation failed because the metadata value is too large.
        * Failure_Metadata_Value_Size_Delta_Too_Large - Validation failed because the metadata value size delta is larger in magnitude than the value size.
        * Failure_Metadata_Value_Size_Delta_Mismatch - Validation failed because the metadata value size delta does not match expected value based on the current state.
        * Failure_Metadata_Value_Change_Irreversible - Validation failed because a metadata value change (truncation) is irreversible.
        * Failure_Mosaic_Invalid_Duration - Validation failed because the duration has an invalid value.
        * Failure_Mosaic_Invalid_Name - Validation failed because the name is invalid.
        * Failure_Mosaic_Name_Id_Mismatch - Validation failed because the name and id don't match.
        * Failure_Mosaic_Expired - Validation failed because the parent is expired.
        * Failure_Mosaic_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
        * Failure_Mosaic_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
        * Failure_Mosaic_Parent_Id_Conflict - Validation failed because the existing parent id does not match the supplied parent id.
        * Failure_Mosaic_Invalid_Property - Validation failed because a mosaic property is invalid.
        * Failure_Mosaic_Invalid_Flags - Validation failed because the mosaic flags are invalid.
        * Failure_Mosaic_Invalid_Divisibility - Validation failed because the mosaic divisibility is invalid.
        * Failure_Mosaic_Invalid_Supply_Change_Action - Validation failed because the mosaic supply change action is invalid.
        * Failure_Mosaic_Invalid_Supply_Change_Amount - Validation failed because the mosaic supply change amount is invalid.
        * Failure_Mosaic_Invalid_Id - Validation failed because the mosaic id is invalid.
        * Failure_Mosaic_Modification_Disallowed - Validation failed because mosaic modification is not allowed.
        * Failure_Mosaic_Modification_No_Changes - Validation failed because mosaic modification would not result in any changes.
        * Failure_Mosaic_Supply_Immutable - Validation failed because the mosaic supply is immutable.
        * Failure_Mosaic_Supply_Negative - Validation failed because the resulting mosaic supply is negative.
        * Failure_Mosaic_Supply_Exceeded - Validation failed because the resulting mosaic supply exceeds the maximum allowed value.
        * Failure_Mosaic_Non_Transferable - Validation failed because the mosaic is not transferable.
        * Failure_Mosaic_Max_Mosaics_Exceeded - Validation failed because the credit of the mosaic would exceed the maximum of different mosaics an account is allowed to own.
        * Failure_Mosaic_Required_Property_Flag_Unset - Validation failed because the mosaic has at least one required property flag unset.
        * Failure_Multisig_Account_In_Both_Sets - Validation failed because account is specified to be both added and removed.
        * Failure_Multisig_Multiple_Deletes - Validation failed because multiple removals are present.
        * Failure_Multisig_Redundant_Modification - Validation failed because a modification is redundant.
        * Failure_Multisig_Unknown_Multisig_Account - Validation failed because account is not in multisig cache.
        * Failure_Multisig_Not_A_Cosignatory - Validation failed because account to be removed is not present.
        * Failure_Multisig_Already_A_Cosignatory - Validation failed because account to be added is already a cosignatory.
        * Failure_Multisig_Min_Setting_Out_Of_Range - Validation failed because new minimum settings are out of range.
        * Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories - Validation failed because min settings are larger than number of cosignatories.
        * Failure_Multisig_Invalid_Modification_Action - Validation failed because the modification action is invalid.
        * Failure_Multisig_Max_Cosigned_Accounts - Validation failed because the cosignatory already cosigns the maximum number of accounts.
        * Failure_Multisig_Max_Cosignatories - Validation failed because the multisig account already has the maximum number of cosignatories.
        * Failure_Multisig_Loop - Validation failed because a multisig loop is created.
        * Failure_Multisig_Max_Multisig_Depth - Validation failed because the max multisig depth is exceeded.
        * Failure_Multisig_Operation_Prohibited_By_Account - Validation failed because an operation is not permitted by a multisig account.
        * Failure_Namespace_Invalid_Duration - Validation failed because the duration has an invalid value.
        * Failure_Namespace_Invalid_Name - Validation failed because the name is invalid.
        * Failure_Namespace_Name_Id_Mismatch - Validation failed because the name and id don't match.
        * Failure_Namespace_Expired - Validation failed because the parent is expired.
        * Failure_Namespace_Owner_Conflict - Validation failed because the parent owner conflicts with the child owner.
        * Failure_Namespace_Id_Mismatch - Validation failed because the id is not the expected id generated from signer and nonce.
        * Failure_Namespace_Invalid_Registration_Type - Validation failed because the namespace registration type is invalid.
        * Failure_Namespace_Root_Name_Reserved - Validation failed because the root namespace has a reserved name.
        * Failure_Namespace_Too_Deep - Validation failed because the resulting namespace would exceed the maximum allowed namespace depth.
        * Failure_Namespace_Unknown_Parent - Validation failed because the namespace parent is unknown.
        * Failure_Namespace_Already_Exists - Validation failed because the namespace already exists.
        * Failure_Namespace_Already_Active - Validation failed because the namespace is already active.
        * Failure_Namespace_Eternal_After_Nemesis_Block - Validation failed because an eternal namespace was received after the nemesis block.
        * Failure_Namespace_Max_Children_Exceeded - Validation failed because the maximum number of children for a root namespace was exceeded.
        * Failure_Namespace_Alias_Invalid_Action - Validation failed because alias action is invalid.
        * Failure_Namespace_Unknown - Validation failed because namespace does not exist.
        * Failure_Namespace_Alias_Already_Exists - Validation failed because namespace is already linked to an alias.
        * Failure_Namespace_Unknown_Alias - Validation failed because namespace is not linked to an alias.
        * Failure_Namespace_Alias_Inconsistent_Unlink_Type - Validation failed because unlink type is not consistent with existing alias.
        * Failure_Namespace_Alias_Inconsistent_Unlink_Data - Validation failed because unlink data is not consistent with existing alias.
        * Failure_Namespace_Alias_Invalid_Address - Validation failed because aliased address is invalid.
        * Failure_RestrictionAccount_Invalid_Restriction_Flags - Validation failed because the account restriction flags are invalid.
        * Failure_RestrictionAccount_Invalid_Modification_Action - Validation failed because a modification action is invalid.
        * Failure_RestrictionAccount_Invalid_Modification_Address - Validation failed because a modification address is invalid.
        * Failure_RestrictionAccount_Modification_Operation_Type_Incompatible - Validation failed because the operation type is incompatible. *Note*: This indicates that the existing restrictions have a different operation type than that specified in the notification.
        * Failure_RestrictionAccount_Redundant_Modification - Validation failed because a modification is redundant.
        * Failure_RestrictionAccount_Invalid_Modification - Validation failed because a value is not in the container.
        * Failure_RestrictionAccount_Modification_Count_Exceeded - Validation failed because the transaction has too many modifications.
        * Failure_RestrictionAccount_No_Modifications - Validation failed because the transaction has no modifications.
        * Failure_RestrictionAccount_Values_Count_Exceeded - Validation failed because the resulting account restriction has too many values.
        * Failure_RestrictionAccount_Invalid_Value - Validation failed because the account restriction value is invalid.
        * Failure_RestrictionAccount_Address_Interaction_Prohibited - Validation failed because the addresses involved in the transaction are not allowed to interact.
        * Failure_RestrictionAccount_Mosaic_Transfer_Prohibited - Validation failed because the mosaic transfer is prohibited by the recipient.
        * Failure_RestrictionAccount_Operation_Type_Prohibited - Validation failed because the operation type is not allowed to be initiated by the signer.
        * Failure_RestrictionMosaic_Invalid_Restriction_Type - Validation failed because the mosaic restriction type is invalid.
        * Failure_RestrictionMosaic_Previous_Value_Mismatch - Validation failed because specified previous value does not match current value.
        * Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero - Validation failed because specified previous value is nonzero.
        * Failure_RestrictionMosaic_Max_Restrictions_Exceeded - Validation failed because the maximum number of restrictions would be exceeded.
        * Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction - Validation failed because nonexistent restriction cannot be deleted.
        * Failure_RestrictionMosaic_Unknown_Global_Restriction - Validation failed because required global restriction does not exist.
        * Failure_RestrictionMosaic_Invalid_Global_Restriction - Validation failed because mosaic has invalid global restriction.
        * Failure_RestrictionMosaic_Account_Unauthorized - Validation failed because account lacks proper permissions to move mosaic.
        * Failure_Transfer_Message_Too_Large - Validation failed because the message is too large.
        * Failure_Transfer_Out_Of_Order_Mosaics - Validation failed because mosaics are out of order.
        * Failure_Chain_Unlinked - Validation failed because a block was received that did not link with the existing chain.
        * Failure_Chain_Block_Not_Hit - Validation failed because a block was received that is not a hit.
        * Failure_Chain_Block_Inconsistent_State_Hash - Validation failed because a block was received that has an inconsistent state hash.
        * Failure_Chain_Block_Inconsistent_Receipts_Hash - Validation failed because a block was received that has an inconsistent receipts hash.
        * Failure_Chain_Block_Invalid_Vrf_Proof - Validation failed because the Vrf proof is invalid.
        * Failure_Chain_Block_Unknown_Signer - Validation failed because the block signer is unknown.
        * Failure_Chain_Unconfirmed_Cache_Too_Full - Validation failed because the unconfirmed cache is too full.
        * Failure_Consumer_Empty_Input - Validation failed because the consumer input is empty.
        * Failure_Consumer_Block_Transactions_Hash_Mismatch - Validation failed because the block transactions hash does not match the calculated value.
        * Neutral_Consumer_Hash_In_Recency_Cache - Validation failed because an entity hash is present in the recency cache.
        * Failure_Consumer_Remote_Chain_Too_Many_Blocks - Validation failed because the chain part has too many blocks.
        * Failure_Consumer_Remote_Chain_Improper_Link - Validation failed because the chain is internally improperly linked.
        * Failure_Consumer_Remote_Chain_Duplicate_Transactions - Validation failed because the chain part contains duplicate transactions.
        * Failure_Consumer_Remote_Chain_Unlinked - Validation failed because the chain part does not link to the current chain.
        * Failure_Consumer_Remote_Chain_Difficulties_Mismatch - Validation failed because the remote chain difficulties do not match the calculated difficulties.
        * Failure_Consumer_Remote_Chain_Score_Not_Better - Validation failed because the remote chain score is not better.
        * Failure_Consumer_Remote_Chain_Too_Far_Behind - Validation failed because the remote chain is too far behind.
        * Failure_Consumer_Remote_Chain_Too_Far_In_Future - Validation failed because the remote chain timestamp is too far in the future.
        * Failure_Consumer_Batch_Signature_Not_Verifiable - Validation failed because the verification of the signature failed during a batch operation.
        * Failure_Consumer_Remote_Chain_Improper_Importance_Link - Validation failed because the remote chain has an improper importance link.
        * Failure_Extension_Partial_Transaction_Cache_Prune - Validation failed because the partial transaction was pruned from the temporal cache.
        * Failure_Extension_Partial_Transaction_Dependency_Removed - Validation failed because the partial transaction was pruned from the temporal cache due to its dependency being removed.
        * Failure_Extension_Read_Rate_Limit_Exceeded - Validation failed because socket read rate limit was exceeded.
      enum:
      - Success
      - Neutral
      - Failure
      - Failure_Core_Past_Deadline
      - Failure_Core_Future_Deadline
      - Failure_Core_Insufficient_Balance
      - Failure_Core_Too_Many_Transactions
      - Failure_Core_Nemesis_Account_Signed_After_Nemesis_Block
      - Failure_Core_Wrong_Network
      - Failure_Core_Invalid_Address
      - Failure_Core_Invalid_Version
      - Failure_Core_Invalid_Transaction_Fee
      - Failure_Core_Block_Harvester_Ineligible
      - Failure_Core_Zero_Address
      - Failure_Core_Zero_Public_Key
      - Failure_Core_Nonzero_Internal_Padding
      - Failure_Core_Address_Collision
      - Failure_Core_Importance_Block_Mismatch
      - Failure_Core_Unexpected_Block_Type
      - Failure_Core_Block_Explicit_Transactions_Hash_Mismatch
      - Failure_Core_Invalid_Link_Action
      - Failure_Core_Link_Already_Exists
      - Failure_Core_Inconsistent_Unlink_Data
      - Failure_Core_Invalid_Link_Range
      - Failure_Core_Too_Many_Links
      - Failure_Core_Link_Start_Epoch_Invalid
      - Failure_Hash_Already_Exists
      - Failure_Signature_Not_Verifiable
      - Failure_AccountLink_Link_Already_Exists
      - Failure_AccountLink_Inconsistent_Unlink_Data
      - Failure_AccountLink_Unknown_Link
      - Failure_AccountLink_Remote_Account_Ineligible
      - Failure_AccountLink_Remote_Account_Signer_Prohibited
      - Failure_AccountLink_Remote_Account_Participant_Prohibited
      - Failure_Aggregate_Too_Many_Transactions
      - Failure_Aggregate_No_Transactions
      - Failure_Aggregate_Too_Many_Cosignatures
      - Failure_Aggregate_Redundant_Cosignatures
      - Failure_Aggregate_Ineligible_Cosignatories
      - Failure_Aggregate_Missing_Cosignatures
      - Failure_Aggregate_Transactions_Hash_Mismatch
      - Failure_LockHash_Invalid_Mosaic_Id
      - Failure_LockHash_Invalid_Mosaic_Amount
      - Failure_LockHash_Hash_Already_Exists
      - Failure_LockHash_Unknown_Hash
      - Failure_LockHash_Inactive_Hash
      - Failure_LockHash_Invalid_Duration
      - Failure_LockSecret_Invalid_Hash_Algorithm
      - Failure_LockSecret_Hash_Already_Exists
      - Failure_LockSecret_Proof_Size_Out_Of_Bounds
      - Failure_LockSecret_Secret_Mismatch
      - Failure_LockSecret_Unknown_Composite_Key
      - Failure_LockSecret_Inactive_Secret
      - Failure_LockSecret_Hash_Algorithm_Mismatch
      - Failure_LockSecret_Invalid_Duration
      - Failure_Metadata_Value_Too_Small
      - Failure_Metadata_Value_Too_Large
      - Failure_Metadata_Value_Size_Delta_Too_Large
      - Failure_Metadata_Value_Size_Delta_Mismatch
      - Failure_Metadata_Value_Change_Irreversible
      - Failure_Mosaic_Invalid_Duration
      - Failure_Mosaic_Invalid_Name
      - Failure_Mosaic_Name_Id_Mismatch
      - Failure_Mosaic_Expired
      - Failure_Mosaic_Owner_Conflict
      - Failure_Mosaic_Id_Mismatch
      - Failure_Mosaic_Parent_Id_Conflict
      - Failure_Mosaic_Invalid_Property
      - Failure_Mosaic_Invalid_Flags
      - Failure_Mosaic_Invalid_Divisibility
      - Failure_Mosaic_Invalid_Supply_Change_Action
      - Failure_Mosaic_Invalid_Supply_Change_Amount
      - Failure_Mosaic_Invalid_Id
      - Failure_Mosaic_Modification_Disallowed
      - Failure_Mosaic_Modification_No_Changes
      - Failure_Mosaic_Supply_Immutable
      - Failure_Mosaic_Supply_Negative
      - Failure_Mosaic_Supply_Exceeded
      - Failure_Mosaic_Non_Transferable
      - Failure_Mosaic_Max_Mosaics_Exceeded
      - Failure_Mosaic_Required_Property_Flag_Unset
      - Failure_Multisig_Account_In_Both_Sets
      - Failure_Multisig_Multiple_Deletes
      - Failure_Multisig_Redundant_Modification
      - Failure_Multisig_Unknown_Multisig_Account
      - Failure_Multisig_Not_A_Cosignatory
      - Failure_Multisig_Already_A_Cosignatory
      - Failure_Multisig_Min_Setting_Out_Of_Range
      - Failure_Multisig_Min_Setting_Larger_Than_Num_Cosignatories
      - Failure_Multisig_Invalid_Modification_Action
      - Failure_Multisig_Max_Cosigned_Accounts
      - Failure_Multisig_Max_Cosignatories
      - Failure_Multisig_Loop
      - Failure_Multisig_Max_Multisig_Depth
      - Failure_Multisig_Operation_Prohibited_By_Account
      - Failure_Namespace_Invalid_Duration
      - Failure_Namespace_Invalid_Name
      - Failure_Namespace_Name_Id_Mismatch
      - Failure_Namespace_Expired
      - Failure_Namespace_Owner_Conflict
      - Failure_Namespace_Id_Mismatch
      - Failure_Namespace_Invalid_Registration_Type
      - Failure_Namespace_Root_Name_Reserved
      - Failure_Namespace_Too_Deep
      - Failure_Namespace_Unknown_Parent
      - Failure_Namespace_Already_Exists
      - Failure_Namespace_Already_Active
      - Failure_Namespace_Eternal_After_Nemesis_Block
      - Failure_Namespace_Max_Children_Exceeded
      - Failure_Namespace_Alias_Invalid_Action
      - Failure_Namespace_Unknown
      - Failure_Namespace_Alias_Already_Exists
      - Failure_Namespace_Unknown_Alias
      - Failure_Namespace_Alias_Inconsistent_Unlink_Type
      - Failure_Namespace_Alias_Inconsistent_Unlink_Data
      - Failure_Namespace_Alias_Invalid_Address
      - Failure_RestrictionAccount_Invalid_Restriction_Flags
      - Failure_RestrictionAccount_Invalid_Modification_Action
      - Failure_RestrictionAccount_Invalid_Modification_Address
      - Failure_RestrictionAccount_Modification_Operation_Type_Incompatible
      - Failure_RestrictionAccount_Redundant_Modification
      - Failure_RestrictionAccount_Invalid_Modification
      - Failure_RestrictionAccount_Modification_Count_Exceeded
      - Failure_RestrictionAccount_No_Modifications
      - Failure_RestrictionAccount_Values_Count_Exceeded
      - Failure_RestrictionAccount_Invalid_Value
      - Failure_RestrictionAccount_Address_Interaction_Prohibited
      - Failure_RestrictionAccount_Mosaic_Transfer_Prohibited
      - Failure_RestrictionAccount_Operation_Type_Prohibited
      - Failure_RestrictionMosaic_Invalid_Restriction_Type
      - Failure_RestrictionMosaic_Previous_Value_Mismatch
      - Failure_RestrictionMosaic_Previous_Value_Must_Be_Zero
      - Failure_RestrictionMosaic_Max_Restrictions_Exceeded
      - Failure_RestrictionMosaic_Cannot_Delete_Nonexistent_Restriction
      - Failure_RestrictionMosaic_Unknown_Global_Restriction
      - Failure_RestrictionMosaic_Invalid_Global_Restriction
      - Failure_RestrictionMosaic_Account_Unauthorized
      - Failure_Transfer_Message_Too_Large
      - Failure_Transfer_Out_Of_Order_Mosaics
      - Failure_Chain_Unlinked
      - Failure_Chain_Block_Not_Hit
      - Failure_Chain_Block_Inconsistent_State_Hash
      - Failure_Chain_Block_Inconsistent_Receipts_Hash
      - Failure_Chain_Block_Invalid_Vrf_Proof
      - Failure_Chain_Block_Unknown_Signer
      - Failure_Chain_Unconfirmed_Cache_Too_Full
      - Failure_Consumer_Empty_Input
      - Failure_Consumer_Block_Transactions_Hash_Mismatch
      - Neutral_Consumer_Hash_In_Recency_Cache
      - Failure_Consumer_Remote_Chain_Too_Many_Blocks
      - Failure_Consumer_Remote_Chain_Improper_Link
      - Failure_Consumer_Remote_Chain_Duplicate_Transactions
      - Failure_Consumer_Remote_Chain_Unlinked
      - Failure_Consumer_Remote_Chain_Difficulties_Mismatch
      - Failure_Consumer_Remote_Chain_Score_Not_Better
      - Failure_Consumer_Remote_Chain_Too_Far_Behind
      - Failure_Consumer_Remote_Chain_Too_Far_In_Future
      - Failure_Consumer_Batch_Signature_Not_Verifiable
      - Failure_Consumer_Remote_Chain_Improper_Importance_Link
      - Failure_Extension_Partial_Transaction_Cache_Prune
      - Failure_Extension_Partial_Transaction_Dependency_Removed
      - Failure_Extension_Read_Rate_Limit_Exceeded
      type: string
    TransactionTypeEnum:
      description: |
        Type of transaction:
        * 0x414C (16716 decimal) - AccountKeyLinkTransaction.
        * 0x4243 (16963 decimal) - VrfKeyLinkTransaction.
        * 0x4143 (16707 decimal) - VotingKeyLinkTransaction.
        * 0x424C (16972 decimal) - NodeKeyLinkTransaction.
        * 0x4141 (16705 decimal) - AggregateCompleteTransaction.
        * 0x4241 (16961 decimal) - AggregateBondedTransaction.
        * 0x414D (16717 decimal) - MosaicDefinitionTransaction.
        * 0x424D (16973 decimal) - MosaicSupplyChangeTransaction.
        * 0x434D (17229 decimal) - MosaicSupplyRevocationTransaction.
        * 0x414E (16718 decimal) - NamespaceRegistrationTransaction.
        * 0x424E (16974 decimal) - AddressAliasTransaction.
        * 0x434E (17230 decimal) - MosaicAliasTransaction.
        * 0x4144 (16708 decimal) - AccountMetadataTransaction.
        * 0x4244 (16964 decimal) - MosaicMetadataTransaction.
        * 0x4344 (17220 decimal) - NamespaceMetadataTransaction.
        * 0x4155 (16725 decimal) - MultisigAccountModificationTransaction.
        * 0x4148 (16712 decimal) - HashLockTransaction.
        * 0x4152 (16722 decimal) - SecretLockTransaction.
        * 0x4252 (16978 decimal) - SecretProofTransaction.
        * 0x4150 (16720 decimal) - AccountAddressRestrictionTransaction.
        * 0x4250 (16976 decimal) - AccountMosaicRestrictionTransaction.
        * 0x4350 (17232 decimal) - AccountOperationRestrictionTransaction.
        * 0x4151 (16721 decimal) - MosaicGlobalRestrictionTransaction.
        * 0x4251 (16977 decimal) - MosaicAddressRestrictionTransaction.
        * 0x4154 (16724 decimal) - TransferTransaction.
      enum:
      - 16716
      - 16963
      - 16707
      - 16972
      - 16705
      - 16961
      - 16717
      - 16973
      - 17229
      - 16718
      - 16974
      - 17230
      - 16708
      - 16964
      - 17220
      - 16725
      - 16712
      - 16722
      - 16978
      - 16720
      - 16976
      - 17232
      - 16721
      - 16977
      - 16724
      type: integer
    AnnounceTransactionInfoDTO:
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    EmbeddedTransactionBodyDTO:
      properties:
        transactions:
          description: Array of transactions initiated by different accounts.
          items:
            $ref: '#/components/schemas/EmbeddedTransactionInfoDTO'
          type: array
      required:
      - transactions
      type: object
    EmbeddedTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EntityDTO'
      type: object
    EmbeddedTransactionInfoDTO:
      properties:
        id:
          description: Internal resource identifier.
          type: string
        meta:
          $ref: '#/components/schemas/EmbeddedTransactionMetaDTO'
        transaction:
          $ref: '#/components/schemas/EmbeddedTransactionInfoDTO_transaction'
      required:
      - id
      - meta
      - transaction
      type: object
    EmbeddedTransactionMetaDTO:
      properties:
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
        aggregateHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        aggregateId:
          description: Identifier of the aggregate transaction.
          type: string
        index:
          description: Transaction index within the aggregate.
          type: integer
        timestamp:
          description: Number of milliseconds elapsed since the creation of the nemesis
            block. This value can be converted to epoch time by adding the network's
            'epochAdjustment'.
          example: "108303181802"
          type: string
        feeMultiplier:
          description: Fee multiplier applied to transactions contained in block.
          example: 0
          format: int64
          type: integer
      required:
      - aggregateHash
      - aggregateId
      - height
      - index
      type: object
    TransactionPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - meta: null
          id: id
          transaction: null
        - meta: null
          id: id
          transaction: null
      properties:
        data:
          description: Array of transactions.
          items:
            $ref: '#/components/schemas/TransactionInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    TransactionBodyDTO:
      properties:
        maxFee:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        deadline:
          description: Duration expressed in number of blocks.
          example: "200"
          type: string
      required:
      - deadline
      - maxFee
      type: object
    TransactionDTO:
      allOf:
      - $ref: '#/components/schemas/SizePrefixedEntityDTO'
      - $ref: '#/components/schemas/VerifiableEntityDTO'
      - $ref: '#/components/schemas/EntityDTO'
      - $ref: '#/components/schemas/TransactionBodyDTO'
      type: object
    TransactionInfoDTO:
      example:
        meta: null
        id: id
        transaction: null
      properties:
        id:
          description: Internal resource identifier.
          type: string
        meta:
          $ref: '#/components/schemas/TransactionInfoDTO_meta'
        transaction:
          $ref: '#/components/schemas/TransactionInfoDTO_transaction'
      required:
      - id
      - meta
      - transaction
      type: object
    TransactionMetaDTO:
      properties:
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
        hash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        merkleComponentHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        index:
          description: Transaction index within the block.
          type: integer
        timestamp:
          description: Number of milliseconds elapsed since the creation of the nemesis
            block. This value can be converted to epoch time by adding the network's
            'epochAdjustment'.
          example: "108303181802"
          type: string
        feeMultiplier:
          description: Fee multiplier applied to transactions contained in block.
          example: 0
          format: int64
          type: integer
      required:
      - hash
      - height
      - index
      - merkleComponentHash
      type: object
    TransactionStatusDTO:
      example:
        code: null
        deadline: "200"
        hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        group: null
        height: "1"
      properties:
        group:
          $ref: '#/components/schemas/TransactionGroupEnum'
        code:
          $ref: '#/components/schemas/TransactionStatusEnum'
        hash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        deadline:
          description: Duration expressed in number of blocks.
          example: "200"
          type: string
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
      required:
      - deadline
      - group
      - hash
      type: object
    AccountKeyLinkNetworkPropertiesDTO:
      example:
        dummy: dummy
      properties:
        dummy:
          description: to trigger plugin load
          type: string
      type: object
    AccountKeyLinkTransactionBodyDTO:
      properties:
        linkedPublicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
      required:
      - linkAction
      - linkedPublicKey
      type: object
    AccountKeyLinkTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/AccountKeyLinkTransactionBodyDTO'
      description: |
        Transaction to delegate the account importance score to a proxy account.
        Required for all accounts willing to activate delegated harvesting.
      type: object
    EmbeddedAccountKeyLinkTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/AccountKeyLinkTransactionBodyDTO'
      type: object
    NodeKeyLinkNetworkPropertiesDTO:
      properties:
        dummy:
          description: to trigger plugin load
          type: string
      type: object
    NodeKeyLinkTransactionBodyDTO:
      properties:
        linkedPublicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
      required:
      - linkAction
      - linkedPublicKey
      type: object
    NodeKeyLinkTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/NodeKeyLinkTransactionBodyDTO'
      description: "Transaction to link a public key to an account.\nTLS uses the\
        \ linked public key to create sessions.\nRequired for node operators. \n"
      type: object
    EmbeddedNodeKeyLinkTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/NodeKeyLinkTransactionBodyDTO'
      type: object
    AggregateNetworkPropertiesDTO:
      example:
        maxTransactionsPerAggregate: 1'000
        maxCosignaturesPerAggregate: "15"
        enableStrictCosignatureCheck: false
        enableBondedAggregateSupport: true
        maxBondedTransactionLifetime: 48h
      properties:
        maxTransactionsPerAggregate:
          description: Maximum number of transactions per aggregate.
          example: 1'000
          type: string
        maxCosignaturesPerAggregate:
          description: Maximum number of cosignatures per aggregate.
          example: "15"
          type: string
        enableStrictCosignatureCheck:
          description: Set to true if cosignatures must exactly match component signers.
            Set to false if cosignatures should be validated externally.
          example: false
          type: boolean
        enableBondedAggregateSupport:
          description: Set to true if bonded aggregates should be allowed. Set to
            false if bonded aggregates should be rejected.
          example: true
          type: boolean
        maxBondedTransactionLifetime:
          description: Maximum lifetime a bonded transaction can have before it expires.
          example: 48h
          type: string
      type: object
    AggregateTransactionBodyDTO:
      properties:
        transactionsHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        cosignatures:
          description: Array of transaction cosignatures.
          items:
            $ref: '#/components/schemas/CosignatureDTO'
          type: array
      required:
      - cosignatures
      - transactionsHash
      type: object
    AggregateTransactionBodyExtendedDTO:
      allOf:
      - $ref: '#/components/schemas/AggregateTransactionBodyDTO'
      - $ref: '#/components/schemas/EmbeddedTransactionBodyDTO'
      type: object
    AggregateTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/AggregateTransactionBodyDTO'
      description: Transaction to combine multiple transactions together.
      type: object
    AggregateTransactionExtendedDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/AggregateTransactionBodyExtendedDTO'
      description: Transaction to combine multiple transactions together.
      type: object
    CosignatureDTO:
      allOf:
      - $ref: '#/components/schemas/VerifiableEntityDTO'
      - properties:
          version:
            $ref: '#/components/schemas/CosignatureVersion'
          signerPublicKey:
            $ref: '#/components/schemas/PublicKey'
        required:
        - signerPublicKey
        - version
        type: object
      type: object
    VrfKeyLinkNetworkPropertiesDTO:
      properties:
        dummy:
          description: to trigger plugin load
          type: string
      type: object
    VrfKeyLinkTransactionBodyDTO:
      properties:
        linkedPublicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
      required:
      - linkAction
      - linkedPublicKey
      type: object
    VrfKeyLinkTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/VrfKeyLinkTransactionBodyDTO'
      description: |
        Transaction to link an account with a VRF public key.
        The key is used to randomize block production and leader/participant selection.
        Required for all harvesting eligible accounts.
      type: object
    EmbeddedVrfKeyLinkTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/VrfKeyLinkTransactionBodyDTO'
      type: object
    VotingKeyLinkNetworkPropertiesDTO:
      properties:
        dummy:
          description: to trigger plugin load
          type: string
      type: object
    VotingKeyLinkTransactionBodyDTO:
      properties:
        linkedPublicKey:
          description: 32 bytes voting public key.
          example: 4EDDA97C991A0BF44E0570B0BA0E0F7F1CE821A799726888734F28DDCCE8C591
          format: hex
          type: string
        startEpoch:
          description: Finalization Epoch
          example: 123456
          format: int64
          type: integer
        endEpoch:
          description: Finalization Epoch
          example: 123456
          format: int64
          type: integer
        linkAction:
          $ref: '#/components/schemas/LinkActionEnum'
      required:
      - endEpoch
      - linkAction
      - linkedPublicKey
      - startEpoch
      type: object
    VotingKeyLinkTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/VotingKeyLinkTransactionBodyDTO'
      description: |
        Transaction to associate a BLS public key with an account.
        Required for node operators willing to vote finalized blocks.
      type: object
    EmbeddedVotingKeyLinkTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/VotingKeyLinkTransactionBodyDTO'
      type: object
    EmbeddedHashLockTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/HashLockTransactionBodyDTO'
      type: object
    HashLockEntryDTO:
      example:
        amount: "123456"
        ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        mosaicId: 0DC67FBE1CAD29E3
        version: 1
        hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        endHeight: "1"
        status: null
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        ownerAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        mosaicId:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        amount:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        endHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
        status:
          $ref: '#/components/schemas/LockStatus'
        hash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
      required:
      - amount
      - endHeight
      - hash
      - mosaicId
      - ownerAddress
      - status
      - version
      type: object
    HashLockInfoDTO:
      example:
        lock:
          amount: "123456"
          ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          mosaicId: 0DC67FBE1CAD29E3
          version: 1
          hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          endHeight: "1"
          status: null
        id: id
      properties:
        id:
          type: string
        lock:
          $ref: '#/components/schemas/HashLockEntryDTO'
      required:
      - id
      - lock
      type: object
    HashLockPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - lock:
            amount: "123456"
            ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            mosaicId: 0DC67FBE1CAD29E3
            version: 1
            hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            endHeight: "1"
            status: null
          id: id
        - lock:
            amount: "123456"
            ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            mosaicId: 0DC67FBE1CAD29E3
            version: 1
            hash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            endHeight: "1"
            status: null
          id: id
      properties:
        data:
          description: Array of hash locks.
          items:
            $ref: '#/components/schemas/HashLockInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    HashLockTransactionBodyDTO:
      properties:
        mosaicId:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        amount:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        duration:
          description: Duration expressed in number of blocks.
          example: "200"
          type: string
        hash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
      required:
      - amount
      - duration
      - hash
      - mosaicId
      type: object
    HashLockTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/HashLockTransactionBodyDTO'
      description: Transaction to lock funds before sending an aggregate bonded transaction.
      type: object
    HashLockNetworkPropertiesDTO:
      example:
        lockedFundsPerAggregate: 10'000'000
        maxHashLockDuration: 2d
      properties:
        lockedFundsPerAggregate:
          description: Amount that has to be locked per aggregate in partial cache.
          example: 10'000'000
          type: string
        maxHashLockDuration:
          description: Maximum number of blocks for which a hash lock can exist.
          example: 2d
          type: string
      type: object
    LockHashAlgorithmEnum.:
      description: |
        Algorithm used to hash the proof:
        * 0 (Op_Sha3_256) - Proof is hashed using SHA3-256.
        * 1 (Op_Hash_160) - Proof is hashed twice: first with SHA-256 and then with RIPEMD-160 (bitcoin's OP_HASH160).
        * 2 (Op_Hash_256) - Proof is hashed twice with SHA3-256 (bitcoin's OP_HASH256).
      enum:
      - 0
      - 1
      - 2
      type: integer
    EmbeddedSecretLockTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/SecretLockTransactionBodyDTO'
      type: object
    EmbeddedSecretProofTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/SecretProofTransactionBodyDTO'
      type: object
    SecretLockEntryDTO:
      example:
        amount: "123456"
        ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        secret: FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1
        mosaicId: 0DC67FBE1CAD29E3
        recipientAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        compositeHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        version: 1
        hashAlgorithm: null
        endHeight: "1"
        status: null
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        ownerAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        mosaicId:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        amount:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        endHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
        status:
          $ref: '#/components/schemas/LockStatus'
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum.'
        secret:
          description: Secret.
          example: FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1
          format: hex
          type: string
        recipientAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        compositeHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
      required:
      - amount
      - compositeHash
      - endHeight
      - hashAlgorithm
      - mosaicId
      - ownerAddress
      - recipientAddress
      - secret
      - status
      - version
      type: object
    SecretLockInfoDTO:
      example:
        lock:
          amount: "123456"
          ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          secret: FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1
          mosaicId: 0DC67FBE1CAD29E3
          recipientAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          compositeHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          version: 1
          hashAlgorithm: null
          endHeight: "1"
          status: null
        id: id
      properties:
        id:
          type: string
        lock:
          $ref: '#/components/schemas/SecretLockEntryDTO'
      required:
      - id
      - lock
      type: object
    SecretLockPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - lock:
            amount: "123456"
            ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            secret: FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1
            mosaicId: 0DC67FBE1CAD29E3
            recipientAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            compositeHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            version: 1
            hashAlgorithm: null
            endHeight: "1"
            status: null
          id: id
        - lock:
            amount: "123456"
            ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            secret: FB8558E82C1968A3536CD77ACD7F9BC65E8B8F346714C9F91B42D6C2177BEDC1
            mosaicId: 0DC67FBE1CAD29E3
            recipientAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            compositeHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            version: 1
            hashAlgorithm: null
            endHeight: "1"
            status: null
          id: id
      properties:
        data:
          description: Array of secret locks.
          items:
            $ref: '#/components/schemas/SecretLockInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    SecretLockNetworkPropertiesDTO:
      example:
        maxProofSize: "1000"
        maxSecretLockDuration: 30d
        minProofSize: "1"
      properties:
        maxSecretLockDuration:
          description: Maximum number of blocks for which a secret lock can exist.
          example: 30d
          type: string
        minProofSize:
          description: Minimum size of a proof in bytes.
          example: "1"
          type: string
        maxProofSize:
          description: Maximum size of a proof in bytes.
          example: "1000"
          type: string
      type: object
    SecretLockTransactionBodyDTO:
      properties:
        recipientAddress:
          description: "Address expressed in Base32 format. If the bit 0 of byte 0\
            \ is not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
            \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at\
            \ byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
          example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
          type: string
        secret:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        mosaicId:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        amount:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        duration:
          description: Duration expressed in number of blocks.
          example: "200"
          type: string
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum.'
      required:
      - amount
      - duration
      - hashAlgorithm
      - mosaicId
      - recipientAddress
      - secret
      type: object
    SecretLockTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/SecretLockTransactionBodyDTO'
      description: "Transaction to sends mosaics to a recipient if the proof used\
        \ is revealed. If the duration is reached, the locked funds go back to the\
        \ sender of the transaction."
      type: object
    SecretProofTransactionBodyDTO:
      properties:
        recipientAddress:
          description: "Address expressed in Base32 format. If the bit 0 of byte 0\
            \ is not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
            \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at\
            \ byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
          example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
          type: string
        secret:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        hashAlgorithm:
          $ref: '#/components/schemas/LockHashAlgorithmEnum.'
        proof:
          description: Original random set of bytes.
          type: string
      required:
      - hashAlgorithm
      - proof
      - recipientAddress
      - secret
      type: object
    SecretProofTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/SecretProofTransactionBodyDTO'
      description: Transaction to reveal a proof.
      type: object
    MetadataTypeEnum:
      description: |
        Metadata type:
        * 0 - Account.
        * 1 - Mosaic.
        * 2 - Namespace.
      enum:
      - 0
      - 1
      - 2
      type: integer
    AccountMetadataTransactionBodyDTO:
      properties:
        targetAddress:
          description: "Address expressed in Base32 format. If the bit 0 of byte 0\
            \ is not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
            \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at\
            \ byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
          example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
          type: string
        scopedMetadataKey:
          description: "Metadata key scoped to source, target and type expressed."
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        valueSizeDelta:
          description: Change in value size in bytes.
          type: integer
        valueSize:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        value:
          description: "Metadata value. If embedded in a transaction, this is calculated\
            \ as xor(previous-value, value)."
          format: hex
          type: string
      required:
      - scopedMetadataKey
      - targetAddress
      - value
      - valueSize
      - valueSizeDelta
      type: object
    AccountMetadataTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/AccountMetadataTransactionBodyDTO'
      description: Transaction to create or modify a multisig account.
      type: object
    EmbeddedAccountMetadataTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/AccountMetadataTransactionBodyDTO'
      type: object
    EmbeddedMosaicMetadataTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/MosaicMetadataTransactionBodyDTO'
      type: object
    EmbeddedNamespaceMetadataTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/NamespaceMetadataTransactionBodyDTO'
      type: object
    MetadataEntryDTO:
      example:
        sourceAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        targetId: null
        scopedMetadataKey: 0DC67FBE1CAD29E3
        targetAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        compositeHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
        version: 1
        value: value
        metadataType: null
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        compositeHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        sourceAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        targetAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        scopedMetadataKey:
          description: "Metadata key scoped to source, target and type expressed."
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        targetId:
          $ref: '#/components/schemas/MetadataEntryDTO_targetId'
        metadataType:
          $ref: '#/components/schemas/MetadataTypeEnum'
        value:
          description: Metadata value.
          format: hex
          type: string
      required:
      - compositeHash
      - metadataType
      - scopedMetadataKey
      - sourceAddress
      - targetAddress
      - value
      - version
      type: object
    MetadataInfoDTO:
      example:
        metadataEntry:
          sourceAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          targetId: null
          scopedMetadataKey: 0DC67FBE1CAD29E3
          targetAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          compositeHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          version: 1
          value: value
          metadataType: null
        id: id
      properties:
        id:
          type: string
        metadataEntry:
          $ref: '#/components/schemas/MetadataEntryDTO'
      required:
      - id
      - metadataEntry
      type: object
    MetadataNetworkPropertiesDTO:
      example:
        maxValueSize: "1024"
      properties:
        maxValueSize:
          description: Maximum metadata value size.
          example: "1024"
          type: string
      type: object
    MetadataPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - metadataEntry:
            sourceAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            targetId: null
            scopedMetadataKey: 0DC67FBE1CAD29E3
            targetAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            compositeHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            version: 1
            value: value
            metadataType: null
          id: id
        - metadataEntry:
            sourceAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            targetId: null
            scopedMetadataKey: 0DC67FBE1CAD29E3
            targetAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            compositeHash: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
            version: 1
            value: value
            metadataType: null
          id: id
      properties:
        data:
          description: Array of metadata entries.
          items:
            $ref: '#/components/schemas/MetadataInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    MosaicMetadataTransactionBodyDTO:
      properties:
        targetAddress:
          description: "Address expressed in Base32 format. If the bit 0 of byte 0\
            \ is not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
            \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at\
            \ byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
          example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
          type: string
        scopedMetadataKey:
          description: "Metadata key scoped to source, target and type expressed."
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        targetMosaicId:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        valueSizeDelta:
          description: Change in value size in bytes.
          type: integer
        valueSize:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        value:
          description: "Metadata value. If embedded in a transaction, this is calculated\
            \ as xor(previous-value, value)."
          format: hex
          type: string
      required:
      - scopedMetadataKey
      - targetAddress
      - targetMosaicId
      - value
      - valueSize
      - valueSizeDelta
      type: object
    MosaicMetadataTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/MosaicMetadataTransactionBodyDTO'
      description: Transaction to create or modify a multisig account.
      type: object
    NamespaceMetadataTransactionBodyDTO:
      properties:
        targetAddress:
          description: "Address expressed in Base32 format. If the bit 0 of byte 0\
            \ is not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
            \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at\
            \ byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
          example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
          type: string
        scopedMetadataKey:
          description: "Metadata key scoped to source, target and type expressed."
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        targetNamespaceId:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        valueSizeDelta:
          description: Change in value size in bytes.
          type: integer
        valueSize:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        value:
          description: "Metadata value. If embedded in a transaction, this is calculated\
            \ as xor(previous-value, value)."
          format: hex
          type: string
      required:
      - scopedMetadataKey
      - targetAddress
      - targetMosaicId
      - value
      - valueSize
      - valueSizeDelta
      type: object
    NamespaceMetadataTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/NamespaceMetadataTransactionBodyDTO'
      description: Transaction to create or modify a multisig account.
      type: object
    MosaicFlagsEnum:
      description: |
        - 0x00 (none) - No flags present.
        - 0x01 (supplyMutable) - Mosaic supports supply changes even when mosaic owner owns partial supply.
        - 0x02 (transferable) - Mosaic supports transfers between arbitrary accounts. When not set, mosaic can only be transferred to and from mosaic owner.
        - 0x04 (restrictable) - Mosaic supports custom restrictions configured by mosaic owner.
        - 0x08 (revokable) - Mosaic allows creator to revoke balances from another user.
      type: integer
    MosaicSupplyChangeActionEnum:
      description: |
        Direction of the supply change:
        * 0  - Decrease.
        * 1  - Increase.
      enum:
      - 0
      - 1
      example: 0
      type: integer
    EmbeddedMosaicDefinitionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/MosaicDefinitionTransactionBodyDTO'
      type: object
    EmbeddedMosaicSupplyChangeTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/MosaicSupplyChangeTransactionBodyDTO'
      type: object
    EmbeddedMosaicSupplyRevocationTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/MosaicSupplyRevocationTransactionBodyDTO'
      type: object
    MosaicDefinitionTransactionBodyDTO:
      properties:
        id:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        duration:
          description: Duration expressed in number of blocks.
          example: "200"
          type: string
        nonce:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        flags:
          description: |
            - 0x00 (none) - No flags present.
            - 0x01 (supplyMutable) - Mosaic supports supply changes even when mosaic owner owns partial supply.
            - 0x02 (transferable) - Mosaic supports transfers between arbitrary accounts. When not set, mosaic can only be transferred to and from mosaic owner.
            - 0x04 (restrictable) - Mosaic supports custom restrictions configured by mosaic owner.
            - 0x08 (revokable) - Mosaic allows creator to revoke balances from another user.
          type: integer
        divisibility:
          description: |
            Determines up to what decimal place the mosaic can be divided.
            Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
            The divisibility must be in the range of 0 and 6.
          type: integer
      required:
      - divisibility
      - duration
      - flags
      - id
      - nonce
      type: object
    MosaicDefinitionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/MosaicDefinitionTransactionBodyDTO'
      description: Transaction to create a new mosaic.
      type: object
    MosaicDTO:
      example:
        duration: "200"
        flags: 0
        id: 0DC67FBE1CAD29E3
        ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        version: 1
        supply: "123456"
        startHeight: "1"
        revision: 2222212828
        divisibility: 6
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        id:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        supply:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        startHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
        ownerAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        revision:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        flags:
          description: |
            - 0x00 (none) - No flags present.
            - 0x01 (supplyMutable) - Mosaic supports supply changes even when mosaic owner owns partial supply.
            - 0x02 (transferable) - Mosaic supports transfers between arbitrary accounts. When not set, mosaic can only be transferred to and from mosaic owner.
            - 0x04 (restrictable) - Mosaic supports custom restrictions configured by mosaic owner.
            - 0x08 (revokable) - Mosaic allows creator to revoke balances from another user.
          type: integer
        divisibility:
          description: |
            Determines up to what decimal place the mosaic can be divided.
            Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
            The divisibility must be in the range of 0 and 6.
          type: integer
        duration:
          description: Duration expressed in number of blocks.
          example: "200"
          type: string
      required:
      - divisibility
      - duration
      - flags
      - id
      - ownerAddress
      - revision
      - startHeight
      - supply
      - version
      type: object
    MosaicInfoDTO:
      example:
        mosaic:
          duration: "200"
          flags: 0
          id: 0DC67FBE1CAD29E3
          ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          version: 1
          supply: "123456"
          startHeight: "1"
          revision: 2222212828
          divisibility: 6
        id: id
      properties:
        id:
          description: Internal resource identifier.
          type: string
        mosaic:
          $ref: '#/components/schemas/MosaicDTO'
      required:
      - id
      - mosaic
      type: object
    MosaicNetworkPropertiesDTO:
      example:
        maxMosaicDuration: 3650d
        mosaicRentalFeeSinkAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        maxMosaicsPerAccount: 10'000
        mosaicRentalFee: "500"
        maxMosaicDivisibility: "6"
      properties:
        maxMosaicsPerAccount:
          description: Maximum number of mosaics that an account can own.
          example: 10'000
          type: string
        maxMosaicDuration:
          description: Maximum mosaic duration.
          example: 3650d
          type: string
        maxMosaicDivisibility:
          description: Maximum mosaic divisibility.
          example: "6"
          type: string
        mosaicRentalFeeSinkAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        mosaicRentalFee:
          description: Mosaic rental fee.
          example: "500"
          type: string
      type: object
    MosaicPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - mosaic:
            duration: "200"
            flags: 0
            id: 0DC67FBE1CAD29E3
            ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            version: 1
            supply: "123456"
            startHeight: "1"
            revision: 2222212828
            divisibility: 6
          id: id
        - mosaic:
            duration: "200"
            flags: 0
            id: 0DC67FBE1CAD29E3
            ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            version: 1
            supply: "123456"
            startHeight: "1"
            revision: 2222212828
            divisibility: 6
          id: id
      properties:
        data:
          description: Array of mosaics.
          items:
            $ref: '#/components/schemas/MosaicInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    MosaicSupplyChangeTransactionBodyDTO:
      properties:
        mosaicId:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        delta:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
        action:
          $ref: '#/components/schemas/MosaicSupplyChangeActionEnum'
      required:
      - action
      - delta
      - mosaicId
      type: object
    MosaicSupplyChangeTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/MosaicSupplyChangeTransactionBodyDTO'
      description: Transaction to increase or decrease the supply of a mosaic.
      type: object
    MosaicSupplyRevocationTransactionBodyDTO:
      properties:
        sourceAddress:
          description: "Address expressed in Base32 format. If the bit 0 of byte 0\
            \ is not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
            \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at\
            \ byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
          example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
          type: string
        mosaicId:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        amount:
          description: Absolute amount. An amount of 123456789 (absolute) for a mosaic
            with divisibility 6 means 123.456789 (relative).
          example: "123456"
          type: string
      required:
      - amount
      - mosaicId
      - sourceAddress
      type: object
    MosaicSupplyRevocationTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/MosaicSupplyRevocationTransactionBodyDTO'
      description: Transaction that allows the mosaic creator to revoke some balance
        from a user.
      type: object
    EmbeddedMultisigAccountModificationTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/MultisigAccountModificationTransactionBodyDTO'
      type: object
    MultisigAccountGraphInfoDTO:
      example:
        level: 0
        multisigEntries:
        - multisig:
            minApproval: 2222212828
            accountAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            cosignatoryAddresses:
            - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            version: 1
            minRemoval: 2222212828
            multisigAddresses:
            - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        - multisig:
            minApproval: 2222212828
            accountAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            cosignatoryAddresses:
            - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            version: 1
            minRemoval: 2222212828
            multisigAddresses:
            - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
      properties:
        level:
          description: Level of the multisig account.
          example: 0
          type: integer
        multisigEntries:
          description: Array of multisig accounts for this level.
          items:
            $ref: '#/components/schemas/MultisigAccountInfoDTO'
          type: array
      required:
      - level
      - multisigEntries
      type: object
    MultisigAccountInfoDTO:
      example:
        multisig:
          minApproval: 2222212828
          accountAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          cosignatoryAddresses:
          - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          version: 1
          minRemoval: 2222212828
          multisigAddresses:
          - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
      properties:
        multisig:
          $ref: '#/components/schemas/MultisigDTO'
      required:
      - multisig
      type: object
    MultisigAccountModificationTransactionBodyDTO:
      properties:
        minRemovalDelta:
          description: |
            Number of signatures needed to remove a cosignatory.
            If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
          example: 1
          type: integer
        minApprovalDelta:
          description: |
            Number of signatures needed to approve a transaction.
            If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
          example: 1
          type: integer
        addressAdditions:
          description: Array of cosignatory accounts to add.
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          type: array
        addressDeletions:
          description: Array of cosignatory accounts to delete.
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          type: array
      required:
      - addressAdditions
      - addressDeletions
      - minApprovalDelta
      - minRemovalDelta
      type: object
    MultisigAccountModificationTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/MultisigAccountModificationTransactionBodyDTO'
      description: Transaction to create or modify a multisig account.
      type: object
    MultisigDTO:
      example:
        minApproval: 2222212828
        accountAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        cosignatoryAddresses:
        - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        version: 1
        minRemoval: 2222212828
        multisigAddresses:
        - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        - TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        accountAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        minApproval:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        minRemoval:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        cosignatoryAddresses:
          description: Addresses of the cosignatory accounts.
          items:
            $ref: '#/components/schemas/Address'
          type: array
        multisigAddresses:
          description: Multisig accounts where the account is cosignatory.
          items:
            $ref: '#/components/schemas/Address'
          type: array
          example: null
      required:
      - accountAddress
      - cosignatoryAddresses
      - minApproval
      - minRemoval
      - multisigAddresses
      - version
      type: object
    MultisigNetworkPropertiesDTO:
      example:
        maxCosignedAccountsPerAccount: "5"
        maxCosignatoriesPerAccount: "10"
        maxMultisigDepth: "3"
      properties:
        maxMultisigDepth:
          description: Maximum number of multisig levels.
          example: "3"
          type: string
        maxCosignatoriesPerAccount:
          description: Maximum number of cosignatories per account.
          example: "10"
          type: string
        maxCosignedAccountsPerAccount:
          description: Maximum number of accounts a single account can cosign.
          example: "5"
          type: string
      type: object
    AliasActionEnum:
      description: |
        Alias action:
        * 0 - Unlink alias.
        * 1 - Link alias.
      enum:
      - 0
      - 1
      example: 0
      type: integer
    AliasTypeEnum:
      description: |
        Type of alias:
        * 0 - No alias.
        * 1 - Mosaic id alias.
        * 2 - Addres alias.
      enum:
      - 0
      - 1
      - 2
      example: 0
      type: integer
    NamespaceRegistrationTypeEnum:
      description: |
        Type of namespace:
        * 0 - Root namespace.
        * 1 - Subnamespace.
      enum:
      - 0
      - 1
      example: 0
      type: integer
    AccountNamesDTO:
      example:
        address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        names:
        - alias1
        - alias2
      properties:
        address:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        names:
          description: Account linked namespace names.
          example:
          - alias1
          - alias2
          items:
            type: string
          type: array
      required:
      - address
      - names
      type: object
    AccountsNamesDTO:
      example:
        accountNames:
        - address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          names:
          - alias1
          - alias2
        - address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          names:
          - alias1
          - alias2
      properties:
        accountNames:
          description: Array of account names.
          items:
            $ref: '#/components/schemas/AccountNamesDTO'
          type: array
      required:
      - accountNames
      type: object
    AddressAliasTransactionBodyDTO:
      properties:
        namespaceId:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        address:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        aliasAction:
          $ref: '#/components/schemas/AliasActionEnum'
      required:
      - address
      - aliasAction
      - namespaceId
      type: object
    AddressAliasTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/AddressAliasTransactionBodyDTO'
      description: Transaction to link a namespace to an account.
      type: object
    AliasDTO:
      example:
        address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        type: 0
        mosaicId: 0DC67FBE1CAD29E3
      properties:
        type:
          $ref: '#/components/schemas/AliasTypeEnum'
        mosaicId:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        address:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
      required:
      - type
      type: object
    EmbeddedAddressAliasTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/AddressAliasTransactionBodyDTO'
      type: object
    EmbeddedMosaicAliasTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/MosaicAliasTransactionBodyDTO'
      type: object
    EmbeddedNamespaceRegistrationTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/NamespaceRegistrationTransactionBodyDTO'
      type: object
    MosaicAliasTransactionBodyDTO:
      properties:
        namespaceId:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        mosaicId:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        aliasAction:
          $ref: '#/components/schemas/AliasActionEnum'
      required:
      - aliasAction
      - mosaicId
      - namespaceId
      type: object
    MosaicAliasTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/MosaicAliasTransactionBodyDTO'
      description: Transaction to link a namespace to a mosaic.
      type: object
    MosaicNamesDTO:
      example:
        names:
        - symbol.xym
        mosaicId: 0DC67FBE1CAD29E3
      properties:
        mosaicId:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        names:
          description: Mosaic linked namespace names.
          example:
          - symbol.xym
          items:
            type: string
          type: array
      required:
      - mosaicId
      - names
      type: object
    MosaicsNamesDTO:
      example:
        mosaicNames:
        - names:
          - symbol.xym
          mosaicId: 0DC67FBE1CAD29E3
        - names:
          - symbol.xym
          mosaicId: 0DC67FBE1CAD29E3
      properties:
        mosaicNames:
          description: Array of mosaic names.
          items:
            $ref: '#/components/schemas/MosaicNamesDTO'
          type: array
      required:
      - mosaicNames
      type: object
    NamespaceInfoDTO:
      example:
        meta:
          active: true
          index: 0
        namespace:
          depth: 1
          registrationType: 0
          alias:
            address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            type: 0
            mosaicId: 0DC67FBE1CAD29E3
          ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          level1: 85BBEA6CC462B244
          version: 1
          level0: 85BBEA6CC462B244
          parentId: 85BBEA6CC462B244
          startHeight: "1"
          level2: 85BBEA6CC462B244
          endHeight: "1"
        id: id
      properties:
        id:
          description: Internal resource identifier.
          type: string
        meta:
          $ref: '#/components/schemas/NamespaceMetaDTO'
        namespace:
          $ref: '#/components/schemas/NamespaceDTO'
      required:
      - id
      - meta
      - namespace
      type: object
    NamespaceMetaDTO:
      example:
        active: true
        index: 0
      properties:
        active:
          description: "If true, the namespace is active."
          type: boolean
        index:
          type: integer
      required:
      - active
      - index
      type: object
    NamespaceDTO:
      example:
        depth: 1
        registrationType: 0
        alias:
          address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: 0
          mosaicId: 0DC67FBE1CAD29E3
        ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        level1: 85BBEA6CC462B244
        version: 1
        level0: 85BBEA6CC462B244
        parentId: 85BBEA6CC462B244
        startHeight: "1"
        level2: 85BBEA6CC462B244
        endHeight: "1"
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        registrationType:
          $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
        depth:
          description: Level of the namespace.
          example: 1
          type: integer
        level0:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        level1:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        level2:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        alias:
          $ref: '#/components/schemas/AliasDTO'
        parentId:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        ownerAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        startHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
        endHeight:
          description: Height of the blockchain.
          example: "1"
          type: string
      required:
      - alias
      - depth
      - endHeight
      - level0
      - ownerAddress
      - parentId
      - registrationType
      - startHeight
      - version
      type: object
    NamespaceNameDTO:
      example:
        name: cat
        id: 85BBEA6CC462B244
        parentId: 85BBEA6CC462B244
      properties:
        parentId:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        id:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        name:
          description: Namespace name.
          example: cat
          type: string
      required:
      - id
      - name
      type: object
    NamespaceNetworkPropertiesDTO:
      example:
        namespaceRentalFeeSinkAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        minNamespaceDuration: 1m
        maxNamespaceDepth: "3"
        maxNamespaceDuration: 365d
        maxNameSize: "64"
        rootNamespaceRentalFeePerBlock: "1"
        reservedRootNamespaceNames: "xem, nem, user, account, org, com, biz, net,\
          \ edu, mil, gov, info"
        childNamespaceRentalFee: "100"
        namespaceGracePeriodDuration: 2m
        maxChildNamespaces: "500"
      properties:
        maxNameSize:
          description: Maximum namespace name size.
          example: "64"
          type: string
        maxChildNamespaces:
          description: Maximum number of children for a root namespace.
          example: "500"
          type: string
        maxNamespaceDepth:
          description: Maximum namespace depth.
          example: "3"
          type: string
        minNamespaceDuration:
          description: Minimum namespace duration.
          example: 1m
          type: string
        maxNamespaceDuration:
          description: Maximum namespace duration.
          example: 365d
          type: string
        namespaceGracePeriodDuration:
          description: Grace period during which time only the previous owner can
            renew an expired namespace.
          example: 2m
          type: string
        reservedRootNamespaceNames:
          description: Reserved root namespaces that cannot be claimed.
          example: "xem, nem, user, account, org, com, biz, net, edu, mil, gov, info"
          type: string
        namespaceRentalFeeSinkAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        rootNamespaceRentalFeePerBlock:
          description: Root namespace rental fee per block.
          example: "1"
          type: string
        childNamespaceRentalFee:
          description: Child namespace rental fee.
          example: "100"
          type: string
      type: object
    NamespacePage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - meta:
            active: true
            index: 0
          namespace:
            depth: 1
            registrationType: 0
            alias:
              address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
              type: 0
              mosaicId: 0DC67FBE1CAD29E3
            ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            level1: 85BBEA6CC462B244
            version: 1
            level0: 85BBEA6CC462B244
            parentId: 85BBEA6CC462B244
            startHeight: "1"
            level2: 85BBEA6CC462B244
            endHeight: "1"
          id: id
        - meta:
            active: true
            index: 0
          namespace:
            depth: 1
            registrationType: 0
            alias:
              address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
              type: 0
              mosaicId: 0DC67FBE1CAD29E3
            ownerAddress: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            level1: 85BBEA6CC462B244
            version: 1
            level0: 85BBEA6CC462B244
            parentId: 85BBEA6CC462B244
            startHeight: "1"
            level2: 85BBEA6CC462B244
            endHeight: "1"
          id: id
      properties:
        data:
          description: Array of namespaces.
          items:
            $ref: '#/components/schemas/NamespaceInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    NamespaceRegistrationTransactionBodyDTO:
      properties:
        duration:
          description: Duration expressed in number of blocks.
          example: "200"
          type: string
        parentId:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        id:
          description: Namespace identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        registrationType:
          $ref: '#/components/schemas/NamespaceRegistrationTypeEnum'
        name:
          description: Namespace name.
          type: string
      required:
      - id
      - name
      - registrationType
      type: object
    NamespaceRegistrationTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/NamespaceRegistrationTransactionBodyDTO'
      description: Transaction to create or renew a namespace.
      type: object
    ReceiptTypeEnum:
      description: |
        Type of receipt:
        * 0x124D (4685 decimal) - Mosaic_Rental_Fee.
        * 0x134E (4942 decimal) - Namespace_Rental_Fee.
        * 0x2143 (8515 decimal) - Harvest_Fee.
        * 0x2248 (8776 decimal) - LockHash_Completed.
        * 0x2348 (9032 decimal) - LockHash_Expired.
        * 0x2252 (8786 decimal) - LockSecret_Completed.
        * 0x2352 (9042 decimal) - LockSecret_Expired.
        * 0x3148 (12616 decimal) - LockHash_Created.
        * 0x3152 (12626 decimal) - LockSecret_Created.
        * 0x414D (16717 decimal) - Mosaic_Expired.
        * 0x414E (16718 decimal) - Namespace_Expired.
        * 0x424E (16974 decimal) - Namespace_Deleted.
        * 0x5143 (20803 decimal) - Inflation.
        * 0xE143 (57667 decimal) - Transaction_Group.
        * 0xF143 (61763 decimal) - Address_Alias_Resolution.
        * 0xF243 (62019 decimal) - Mosaic_Alias_Resolution.
      enum:
      - 4685
      - 4942
      - 8515
      - 8776
      - 9032
      - 8786
      - 9042
      - 12616
      - 12626
      - 16717
      - 16718
      - 16974
      - 20803
      - 57667
      - 61763
      - 62019
      type: integer
    BalanceTransferReceiptDTO:
      allOf:
      - $ref: '#/components/schemas/ReceiptDTO'
      - properties:
          mosaicId:
            $ref: '#/components/schemas/MosaicId'
          amount:
            $ref: '#/components/schemas/Amount'
          senderAddress:
            $ref: '#/components/schemas/Address'
          recipientAddress:
            $ref: '#/components/schemas/Address'
        required:
        - amount
        - mosaicId
        - recipientAddress
        - senderAddress
        type: object
      description: Receipt stored when a state change that triggered a mosaic transfer.
      type: object
    BalanceChangeReceiptDTO:
      allOf:
      - $ref: '#/components/schemas/ReceiptDTO'
      - properties:
          mosaicId:
            $ref: '#/components/schemas/MosaicId'
          amount:
            $ref: '#/components/schemas/Amount'
          targetAddress:
            $ref: '#/components/schemas/Address'
        required:
        - amount
        - mosaicId
        - targetAddress
        type: object
      description: Receipt stored when a state change modified an account balance.
      type: object
    NamespaceExpiryReceiptDTO:
      allOf:
      - $ref: '#/components/schemas/ReceiptDTO'
      - properties:
          artifactId:
            $ref: '#/components/schemas/NamespaceId'
        required:
        - artifactId
        type: object
      description: Receipt stored when a namespace expires.
      type: object
    MosaicExpiryReceiptDTO:
      allOf:
      - $ref: '#/components/schemas/ReceiptDTO'
      - properties:
          artifactId:
            $ref: '#/components/schemas/MosaicId'
        required:
        - artifactId
        type: object
      description: Receipt stored when a mosaic expires.
      type: object
    InflationReceiptDTO:
      allOf:
      - $ref: '#/components/schemas/ReceiptDTO'
      - properties:
          mosaicId:
            $ref: '#/components/schemas/MosaicId'
          amount:
            $ref: '#/components/schemas/Amount'
        required:
        - amount
        - mosaicId
        type: object
      description: Receipt stored when network currency mosaics were created due to
        inflation.
      type: object
    ReceiptDTO:
      properties:
        version:
          description: Version of the receipt.
          type: integer
        type:
          $ref: '#/components/schemas/ReceiptTypeEnum'
      required:
      - type
      - version
      type: object
    ResolutionEntryDTO:
      example:
        source:
          secondaryId: 2222212828
          primaryId: 2222212828
        resolved: null
      properties:
        source:
          $ref: '#/components/schemas/SourceDTO'
        resolved:
          $ref: '#/components/schemas/ResolutionEntryDTO_resolved'
      required:
      - resolved
      - source
      type: object
    ResolutionStatementDTO:
      example:
        unresolved: null
        resolutionEntries:
        - source:
            secondaryId: 2222212828
            primaryId: 2222212828
          resolved: null
        - source:
            secondaryId: 2222212828
            primaryId: 2222212828
          resolved: null
        height: "1"
      properties:
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
        unresolved:
          $ref: '#/components/schemas/ResolutionStatementDTO_unresolved'
        resolutionEntries:
          description: |
            Array of resolution entries linked to the unresolved namespaceId.
            It is an array instead of a single resolution entry since
            within one block the resolution might change for different sources due to alias related transactions.
          items:
            $ref: '#/components/schemas/ResolutionEntryDTO'
          type: array
      required:
      - height
      - resolutionEntries
      - unresolved
      type: object
    ResolutionStatementInfoDTO:
      description: |
        A resolution statement keeps the relation between a namespace alias used in a transaction
        and the real address or mosaicId.
      example:
        meta:
          timestamp: "108303181802"
        statement:
          unresolved: null
          resolutionEntries:
          - source:
              secondaryId: 2222212828
              primaryId: 2222212828
            resolved: null
          - source:
              secondaryId: 2222212828
              primaryId: 2222212828
            resolved: null
          height: "1"
        id: id
      properties:
        id:
          description: Internal resource identifier.
          type: string
        meta:
          $ref: '#/components/schemas/StatementMetaDTO'
        statement:
          $ref: '#/components/schemas/ResolutionStatementDTO'
      required:
      - id
      - meta
      - statement
      type: object
    ResolutionStatementPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - meta:
            timestamp: "108303181802"
          statement:
            unresolved: null
            resolutionEntries:
            - source:
                secondaryId: 2222212828
                primaryId: 2222212828
              resolved: null
            - source:
                secondaryId: 2222212828
                primaryId: 2222212828
              resolved: null
            height: "1"
          id: id
        - meta:
            timestamp: "108303181802"
          statement:
            unresolved: null
            resolutionEntries:
            - source:
                secondaryId: 2222212828
                primaryId: 2222212828
              resolved: null
            - source:
                secondaryId: 2222212828
                primaryId: 2222212828
              resolved: null
            height: "1"
          id: id
      properties:
        data:
          description: Array of transaction address resolution statements.
          items:
            $ref: '#/components/schemas/ResolutionStatementInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    SourceDTO:
      description: Transaction that triggered the receipt.
      example:
        secondaryId: 2222212828
        primaryId: 2222212828
      properties:
        primaryId:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
        secondaryId:
          description: A number that allows uint 32 values.
          example: 2222212828
          format: int64
          type: integer
      required:
      - primaryId
      - secondaryId
      type: object
    StatementMetaDTO:
      description: "Metadata related to the statment, including block information."
      example:
        timestamp: "108303181802"
      properties:
        timestamp:
          description: Number of milliseconds elapsed since the creation of the nemesis
            block. This value can be converted to epoch time by adding the network's
            'epochAdjustment'.
          example: "108303181802"
          type: string
      required:
      - timestamp
      type: object
    TransactionStatementDTO:
      example:
        receipts:
        - null
        - null
        source:
          secondaryId: 2222212828
          primaryId: 2222212828
        height: "1"
      properties:
        height:
          description: Height of the blockchain.
          example: "1"
          type: string
        source:
          $ref: '#/components/schemas/SourceDTO'
        receipts:
          description: Array of receipts.
          items:
            $ref: '#/components/schemas/TransactionStatementDTO_receipts_inner'
          type: array
      required:
      - height
      - receipts
      - source
      type: object
    TransactionStatementInfoDTO:
      description: Collection of receipts related to a transaction.
      example:
        meta:
          timestamp: "108303181802"
        statement:
          receipts:
          - null
          - null
          source:
            secondaryId: 2222212828
            primaryId: 2222212828
          height: "1"
        id: id
      properties:
        id:
          description: Internal resource identifier.
          type: string
        meta:
          $ref: '#/components/schemas/StatementMetaDTO'
        statement:
          $ref: '#/components/schemas/TransactionStatementDTO'
      required:
      - id
      - meta
      - statement
      type: object
    TransactionStatementPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - meta:
            timestamp: "108303181802"
          statement:
            receipts:
            - null
            - null
            source:
              secondaryId: 2222212828
              primaryId: 2222212828
            height: "1"
          id: id
        - meta:
            timestamp: "108303181802"
          statement:
            receipts:
            - null
            - null
            source:
              secondaryId: 2222212828
              primaryId: 2222212828
            height: "1"
          id: id
      properties:
        data:
          description: Array of transaction statements.
          items:
            $ref: '#/components/schemas/TransactionStatementInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    AccountRestrictionFlagsEnum:
      description: |
        Type of account restriction:
        * 0x0001 (1 decimal) - Allow only incoming transactions from a given address.
        * 0x0002 (2 decimal) - Allow only incoming transactions containing a given mosaic identifier.
        * 0x4001 (16385 decimal) - Allow only outgoing transactions to a given address.
        * 0x4004 (16388 decimal) - Allow only outgoing transactions with a given transaction type.
        * 0x8001 (32769 decimal) - Block incoming transactions from a given address.
        * 0x8002 (32770 decimal) - Block incoming transactions containing a given mosaic identifier.
        * 0xC001 (49153 decimal) - Block outgoing transactions to a given address.
        * 0xC004 (49156 decimal) - Block outgoing transactions with a given transaction type.
      enum:
      - 1
      - 2
      - 16385
      - 16388
      - 32769
      - 32770
      - 49153
      - 49156
      example: 1
      type: integer
    AccountAddressRestrictionTransactionBodyDTO:
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          description: Account restriction additions.
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          type: array
        restrictionDeletions:
          description: Account restriction deletions.
          items:
            $ref: '#/components/schemas/UnresolvedAddress'
          type: array
      required:
      - restrictionAdditions
      - restrictionDeletions
      - restrictionFlags
      type: object
    AccountAddressRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/AccountAddressRestrictionTransactionBodyDTO'
      description: Transaction to prevent incoming and outgoing transactions for a
        given a set of addresses.
      type: object
    AccountMosaicRestrictionTransactionBodyDTO:
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          description: Account restriction additions.
          items:
            $ref: '#/components/schemas/UnresolvedMosaicId'
          type: array
        restrictionDeletions:
          description: Account restriction deletions.
          items:
            $ref: '#/components/schemas/UnresolvedMosaicId'
          type: array
      required:
      - restrictionAdditions
      - restrictionDeletions
      - restrictionFlags
      type: object
    AccountMosaicRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/AccountMosaicRestrictionTransactionBodyDTO'
      description: Transaction to prevent incoming transactions containing a given
        set of mosaics.
      type: object
    AccountOperationRestrictionTransactionBodyDTO:
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        restrictionAdditions:
          description: Account restriction additions.
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          type: array
        restrictionDeletions:
          description: Account restriction deletions.
          items:
            $ref: '#/components/schemas/TransactionTypeEnum'
          type: array
      required:
      - restrictionAdditions
      - restrictionDeletions
      - restrictionFlags
      type: object
    AccountOperationRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/AccountOperationRestrictionTransactionBodyDTO'
      description: Transaction to prevent outgoing transactions by transaction type.
      type: object
    AccountRestrictionsInfoDTO:
      example:
        accountRestrictions:
          address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          restrictions:
          - restrictionFlags: 1
            values:
            - null
            - null
          - restrictionFlags: 1
            values:
            - null
            - null
          version: 1
      properties:
        accountRestrictions:
          $ref: '#/components/schemas/AccountRestrictionsDTO'
      required:
      - accountRestrictions
      type: object
    AccountRestrictionsPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - accountRestrictions:
            address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            restrictions:
            - restrictionFlags: 1
              values:
              - null
              - null
            - restrictionFlags: 1
              values:
              - null
              - null
            version: 1
        - accountRestrictions:
            address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
            restrictions:
            - restrictionFlags: 1
              values:
              - null
              - null
            - restrictionFlags: 1
              values:
              - null
              - null
            version: 1
      properties:
        data:
          description: Array of account restrictions.
          items:
            $ref: '#/components/schemas/AccountRestrictionsInfoDTO'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    AccountRestrictionsDTO:
      example:
        address: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
        restrictions:
        - restrictionFlags: 1
          values:
          - null
          - null
        - restrictionFlags: 1
          values:
          - null
          - null
        version: 1
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        address:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        restrictions:
          items:
            $ref: '#/components/schemas/AccountRestrictionDTO'
          type: array
      required:
      - address
      - restrictions
      - version
      type: object
    AccountRestrictionDTO:
      example:
        restrictionFlags: 1
        values:
        - null
        - null
      properties:
        restrictionFlags:
          $ref: '#/components/schemas/AccountRestrictionFlagsEnum'
        values:
          description: "Address, mosaic id, or transaction type to restrict."
          items:
            $ref: '#/components/schemas/AccountRestrictionDTO_values_inner'
          type: array
      required:
      - restrictionFlags
      - values
      type: object
    AccountRestrictionNetworkPropertiesDTO:
      example:
        maxAccountRestrictionValues: "512"
      properties:
        maxAccountRestrictionValues:
          description: Maximum number of account restriction values.
          example: "512"
          type: string
      type: object
    EmbeddedAccountAddressRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/AccountAddressRestrictionTransactionBodyDTO'
      type: object
    EmbeddedAccountMosaicRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/AccountMosaicRestrictionTransactionBodyDTO'
      type: object
    EmbeddedAccountOperationRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/AccountOperationRestrictionTransactionBodyDTO'
      type: object
    MosaicRestrictionEntryTypeEnum:
      description: |
        - 0 - Mosaic address restriction.
        - 1 - Mosaic global restriction.
      enum:
      - 0
      - 1
      type: integer
    MosaicRestrictionTypeEnum:
      description: |
        Type of mosaic restriction.
        * 0 - Uninitialized value indicating no restriction.
        * 1 (EQ) - Allow if equal.
        * 2 (NE) - Allow if not equal.
        * 3 (LT) - Allow if less than.
        * 4 (LE) - Allow if less than or equal.
        * 5 (GT) - Allow if greater than.
        * 6 (GE) - Allow if greater than or equal.
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      type: integer
    EmbeddedMosaicAddressRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/MosaicAddressRestrictionTransactionBodyDTO'
      type: object
    EmbeddedMosaicGlobalRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/MosaicGlobalRestrictionTransactionBodyDTO'
      type: object
    MosaicRestrictionDTO:
      anyOf:
      - $ref: '#/components/schemas/MosaicAddressRestrictionDTO'
      - $ref: '#/components/schemas/MosaicGlobalRestrictionDTO'
      description: Generic Mosaic Restriction
      type: object
    MosaicAddressRestrictionDTO:
      properties:
        id:
          description: Internal resource identifier.
          type: string
        mosaicRestrictionEntry:
          $ref: '#/components/schemas/MosaicAddressRestrictionEntryWrapperDTO'
      required:
      - id
      - mosaicRestrictionEntry
      type: object
    MosaicAddressRestrictionEntryDTO:
      properties:
        key:
          description: Restriction key.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        value:
          description: Restriction value.
          type: string
      required:
      - key
      - value
      type: object
    MosaicAddressRestrictionEntryWrapperDTO:
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        compositeHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        entryType:
          $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
        mosaicId:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        targetAddress:
          description: Address encoded using a 32-character set.
          example: TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY
          type: string
        restrictions:
          items:
            $ref: '#/components/schemas/MosaicAddressRestrictionEntryDTO'
          type: array
      required:
      - compositeHash
      - entryType
      - mosaicId
      - restrictions
      - targetAddress
      - version
      type: object
    MosaicAddressRestrictionTransactionBodyDTO:
      properties:
        mosaicId:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        restrictionKey:
          description: Restriction key.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        previousRestrictionValue:
          description: Restriction value.
          example: "1000"
          type: string
        newRestrictionValue:
          description: Restriction value.
          example: "1000"
          type: string
        targetAddress:
          description: "Address expressed in Base32 format. If the bit 0 of byte 0\
            \ is not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
            \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at\
            \ byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
          example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
          type: string
      required:
      - mosaicId
      - newRestrictionValue
      - previousRestrictionValue
      - restrictionKey
      - targetAddress
      type: object
    MosaicAddressRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/MosaicAddressRestrictionTransactionBodyDTO'
      description: Transaction to set a restriction rule to an address.
      type: object
    MosaicGlobalRestrictionDTO:
      properties:
        id:
          description: Internal resource identifier.
          type: string
        mosaicRestrictionEntry:
          $ref: '#/components/schemas/MosaicGlobalRestrictionEntryWrapperDTO'
      required:
      - id
      - mosaicRestrictionEntry
      type: object
    MosaicGlobalRestrictionEntryDTO:
      properties:
        key:
          description: Restriction key.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        restriction:
          $ref: '#/components/schemas/MosaicGlobalRestrictionEntryRestrictionDTO'
      required:
      - key
      - restriction
      type: object
    MosaicGlobalRestrictionEntryRestrictionDTO:
      properties:
        referenceMosaicId:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        restrictionValue:
          description: Restriction value.
          example: "1000"
          type: string
        restrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
      required:
      - referenceMosaicId
      - restrictionType
      - restrictionValue
      type: object
    MosaicGlobalRestrictionEntryWrapperDTO:
      properties:
        version:
          description: The version of the state
          example: 1
          type: integer
        compositeHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        entryType:
          $ref: '#/components/schemas/MosaicRestrictionEntryTypeEnum'
        mosaicId:
          description: Mosaic identifier.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        restrictions:
          items:
            $ref: '#/components/schemas/MosaicGlobalRestrictionEntryDTO'
          type: array
      required:
      - compositeHash
      - entryType
      - mosaicId
      - restrictions
      - version
      type: object
    MosaicGlobalRestrictionTransactionBodyDTO:
      properties:
        mosaicId:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        referenceMosaicId:
          description: |
            Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
            is used instead of the real mosaic identifier.
          example: 85BBEA6CC462B244
          format: hex
          type: string
        restrictionKey:
          description: Restriction key.
          example: 0DC67FBE1CAD29E3
          format: hex
          type: string
        previousRestrictionValue:
          description: Restriction value.
          example: "1000"
          type: string
        newRestrictionValue:
          description: Restriction value.
          example: "1000"
          type: string
        previousRestrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
        newRestrictionType:
          $ref: '#/components/schemas/MosaicRestrictionTypeEnum'
      required:
      - mosaicId
      - newRestrictionType
      - newRestrictionValue
      - previousRestrictionType
      - previousRestrictionValue
      - referenceMosaicId
      - restrictionKey
      type: object
    MosaicGlobalRestrictionTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/MosaicGlobalRestrictionTransactionBodyDTO'
      description: Transaction to set a network-wide restriction rule to a mosaic.
      type: object
    MosaicRestrictionNetworkPropertiesDTO:
      example:
        maxMosaicRestrictionValues: "20"
      properties:
        maxMosaicRestrictionValues:
          description: Maximum number of mosaic restriction values.
          example: "20"
          type: string
      type: object
    MosaicRestrictionsPage:
      example:
        pagination:
          pageNumber: 0
          pageSize: 6
        data:
        - null
        - null
      properties:
        data:
          description: Array of mosaic restrictions.
          items:
            $ref: '#/components/schemas/MosaicRestrictionsPage_data_inner'
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
      type: object
    EmbeddedTransferTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/EmbeddedTransactionDTO'
      - $ref: '#/components/schemas/TransferTransactionBodyDTO'
      type: object
    TransferNetworkPropertiesDTO:
      example:
        maxMessageSize: "1024"
      properties:
        maxMessageSize:
          description: Maximum transaction message size.
          example: "1024"
          type: string
      type: object
    TransferTransactionBodyDTO:
      properties:
        recipientAddress:
          description: "Address expressed in Base32 format. If the bit 0 of byte 0\
            \ is not set (like in 0x90), then it is a\nregular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.\
            \ \nOtherwise (e.g. 0x91) it represents a namespace id which starts at\
            \ byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA\n"
          example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA
          type: string
        mosaics:
          description: |
            Array of mosaics sent to the recipient.
          items:
            $ref: '#/components/schemas/UnresolvedMosaic'
          type: array
        message:
          description: Transfer transaction message
          type: string
      required:
      - mosaics
      - recipientAddress
      type: object
    TransferTransactionDTO:
      allOf:
      - $ref: '#/components/schemas/TransactionDTO'
      - $ref: '#/components/schemas/TransferTransactionBodyDTO'
      description: Transaction to transfer mosaics and a message to another account.
      type: object
    accountIds:
      properties:
        publicKeys:
          description: Array of public keys.
          items:
            $ref: '#/components/schemas/PublicKey'
          type: array
        addresses:
          description: Array of addresses.
          items:
            $ref: '#/components/schemas/Address'
          type: array
      type: object
    addresses:
      properties:
        addresses:
          description: Array of addresses.
          items:
            $ref: '#/components/schemas/Address'
          type: array
      type: object
    cosignature:
      properties:
        parentHash:
          example: C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810
          format: hex
          type: string
        signature:
          description: Entity's signature generated by the signer.
          example: 4B408BBEDF25F2AC8E0E44A6E51E3CCBA03885902055F75EB9FF50433532CA44BF9175FDA7502EEE2FC1617126E453A2BD692BAFDAAF06BC8EDEBA7961B3730D
          type: string
        signerPublicKey:
          description: Public key.
          example: AC1A6E1D8DE5B17D2C6B1293F1CAD3829EEACF38D09311BB3C8E5A880092DE26
          format: hex
          type: string
        version:
          description: Cosignature version.
          example: "0"
          type: string
      type: object
    mosaicIds:
      properties:
        mosaicIds:
          description: Array of mosaic identifiers.
          items:
            $ref: '#/components/schemas/MosaicId'
          type: array
      type: object
    namespaceIds:
      properties:
        namespaceIds:
          description: Array of namespace identifiers.
          items:
            $ref: '#/components/schemas/NamespaceId'
          type: array
      type: object
    transactionHashes:
      properties:
        hashes:
          description: Array of transaction hashes.
          items:
            $ref: '#/components/schemas/Hash256'
          type: array
      type: object
    transactionIds:
      properties:
        transactionIds:
          description: Array of transaction identifiers.
          example:
          - 59B8DA0F0CB2720001103922
          - 59B8D8E60CB2720001103904
          items:
            type: string
          type: array
      type: object
    transactionPayload:
      properties:
        payload:
          description: Transaction payload in hexadecimal format.
          example: 00112233445566778899AABBCCDDEEFF
          type: string
      type: object
    MerkleStateInfoDTO_tree_inner:
      anyOf:
      - $ref: '#/components/schemas/MerkleTreeBranchDTO'
      - $ref: '#/components/schemas/MerkleTreeLeafDTO'
    BlockInfoDTO_block:
      anyOf:
      - $ref: '#/components/schemas/BlockDTO'
      - $ref: '#/components/schemas/ImportanceBlockDTO'
    EmbeddedTransactionInfoDTO_transaction:
      anyOf:
      - $ref: '#/components/schemas/EmbeddedAccountKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedNodeKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedVrfKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedVotingKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedHashLockTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedSecretLockTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedSecretProofTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountMetadataTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicMetadataTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedNamespaceMetadataTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicDefinitionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicSupplyChangeTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicSupplyRevocationTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedNamespaceRegistrationTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAddressAliasTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicAliasTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMultisigAccountModificationTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountAddressRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountMosaicRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountOperationRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicGlobalRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicAddressRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedTransferTransactionDTO'
    TransactionInfoDTO_meta:
      anyOf:
      - $ref: '#/components/schemas/TransactionMetaDTO'
      - $ref: '#/components/schemas/EmbeddedTransactionMetaDTO'
    TransactionInfoDTO_transaction:
      anyOf:
      - $ref: '#/components/schemas/AccountKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/NodeKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedNodeKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/VrfKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedVrfKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/VotingKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedVotingKeyLinkTransactionDTO'
      - $ref: '#/components/schemas/AggregateTransactionDTO'
      - $ref: '#/components/schemas/AggregateTransactionExtendedDTO'
      - $ref: '#/components/schemas/HashLockTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedHashLockTransactionDTO'
      - $ref: '#/components/schemas/SecretLockTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedSecretLockTransactionDTO'
      - $ref: '#/components/schemas/SecretProofTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedSecretProofTransactionDTO'
      - $ref: '#/components/schemas/AccountMetadataTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountMetadataTransactionDTO'
      - $ref: '#/components/schemas/MosaicMetadataTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicMetadataTransactionDTO'
      - $ref: '#/components/schemas/NamespaceMetadataTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedNamespaceMetadataTransactionDTO'
      - $ref: '#/components/schemas/MosaicDefinitionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicDefinitionTransactionDTO'
      - $ref: '#/components/schemas/MosaicSupplyChangeTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicSupplyChangeTransactionDTO'
      - $ref: '#/components/schemas/MosaicSupplyRevocationTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicSupplyRevocationTransactionDTO'
      - $ref: '#/components/schemas/NamespaceRegistrationTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedNamespaceRegistrationTransactionDTO'
      - $ref: '#/components/schemas/AddressAliasTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAddressAliasTransactionDTO'
      - $ref: '#/components/schemas/MosaicAliasTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicAliasTransactionDTO'
      - $ref: '#/components/schemas/MultisigAccountModificationTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMultisigAccountModificationTransactionDTO'
      - $ref: '#/components/schemas/AccountAddressRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountAddressRestrictionTransactionDTO'
      - $ref: '#/components/schemas/AccountMosaicRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountMosaicRestrictionTransactionDTO'
      - $ref: '#/components/schemas/AccountOperationRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedAccountOperationRestrictionTransactionDTO'
      - $ref: '#/components/schemas/MosaicGlobalRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicGlobalRestrictionTransactionDTO'
      - $ref: '#/components/schemas/MosaicAddressRestrictionTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedMosaicAddressRestrictionTransactionDTO'
      - $ref: '#/components/schemas/TransferTransactionDTO'
      - $ref: '#/components/schemas/EmbeddedTransferTransactionDTO'
    MetadataEntryDTO_targetId:
      anyOf:
      - $ref: '#/components/schemas/MosaicId'
      - $ref: '#/components/schemas/NamespaceId'
    ResolutionEntryDTO_resolved:
      anyOf:
      - $ref: '#/components/schemas/Address'
      - $ref: '#/components/schemas/MosaicId'
    ResolutionStatementDTO_unresolved:
      anyOf:
      - $ref: '#/components/schemas/UnresolvedMosaicId'
      - $ref: '#/components/schemas/UnresolvedAddress'
    TransactionStatementDTO_receipts_inner:
      anyOf:
      - $ref: '#/components/schemas/BalanceTransferReceiptDTO'
      - $ref: '#/components/schemas/BalanceChangeReceiptDTO'
      - $ref: '#/components/schemas/NamespaceExpiryReceiptDTO'
      - $ref: '#/components/schemas/MosaicExpiryReceiptDTO'
      - $ref: '#/components/schemas/InflationReceiptDTO'
    AccountRestrictionDTO_values_inner:
      anyOf:
      - $ref: '#/components/schemas/UnresolvedAddress'
      - $ref: '#/components/schemas/UnresolvedMosaicId'
      - $ref: '#/components/schemas/TransactionTypeEnum'
    MosaicRestrictionsPage_data_inner:
      anyOf:
      - $ref: '#/components/schemas/MosaicAddressRestrictionDTO'
      - $ref: '#/components/schemas/MosaicGlobalRestrictionDTO'

