/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NamespaceNetworkPropertiesDTO
    /// </summary>
    [DataContract(Name = "NamespaceNetworkPropertiesDTO")]
    public partial class NamespaceNetworkPropertiesDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceNetworkPropertiesDTO" /> class.
        /// </summary>
        /// <param name="maxNameSize">Maximum namespace name size..</param>
        /// <param name="maxChildNamespaces">Maximum number of children for a root namespace..</param>
        /// <param name="maxNamespaceDepth">Maximum namespace depth..</param>
        /// <param name="minNamespaceDuration">Minimum namespace duration..</param>
        /// <param name="maxNamespaceDuration">Maximum namespace duration..</param>
        /// <param name="namespaceGracePeriodDuration">Grace period during which time only the previous owner can renew an expired namespace..</param>
        /// <param name="reservedRootNamespaceNames">Reserved root namespaces that cannot be claimed..</param>
        /// <param name="namespaceRentalFeeSinkAddress">Address encoded using a 32-character set..</param>
        /// <param name="rootNamespaceRentalFeePerBlock">Root namespace rental fee per block..</param>
        /// <param name="childNamespaceRentalFee">Child namespace rental fee..</param>
        public NamespaceNetworkPropertiesDTO(string maxNameSize = default(string), string maxChildNamespaces = default(string), string maxNamespaceDepth = default(string), string minNamespaceDuration = default(string), string maxNamespaceDuration = default(string), string namespaceGracePeriodDuration = default(string), string reservedRootNamespaceNames = default(string), string namespaceRentalFeeSinkAddress = default(string), string rootNamespaceRentalFeePerBlock = default(string), string childNamespaceRentalFee = default(string))
        {
            this.MaxNameSize = maxNameSize;
            this.MaxChildNamespaces = maxChildNamespaces;
            this.MaxNamespaceDepth = maxNamespaceDepth;
            this.MinNamespaceDuration = minNamespaceDuration;
            this.MaxNamespaceDuration = maxNamespaceDuration;
            this.NamespaceGracePeriodDuration = namespaceGracePeriodDuration;
            this.ReservedRootNamespaceNames = reservedRootNamespaceNames;
            this.NamespaceRentalFeeSinkAddress = namespaceRentalFeeSinkAddress;
            this.RootNamespaceRentalFeePerBlock = rootNamespaceRentalFeePerBlock;
            this.ChildNamespaceRentalFee = childNamespaceRentalFee;
        }

        /// <summary>
        /// Maximum namespace name size.
        /// </summary>
        /// <value>Maximum namespace name size.</value>
        /// <example>64</example>
        [DataMember(Name = "maxNameSize", EmitDefaultValue = false)]
        public string MaxNameSize { get; set; }

        /// <summary>
        /// Maximum number of children for a root namespace.
        /// </summary>
        /// <value>Maximum number of children for a root namespace.</value>
        /// <example>500</example>
        [DataMember(Name = "maxChildNamespaces", EmitDefaultValue = false)]
        public string MaxChildNamespaces { get; set; }

        /// <summary>
        /// Maximum namespace depth.
        /// </summary>
        /// <value>Maximum namespace depth.</value>
        /// <example>3</example>
        [DataMember(Name = "maxNamespaceDepth", EmitDefaultValue = false)]
        public string MaxNamespaceDepth { get; set; }

        /// <summary>
        /// Minimum namespace duration.
        /// </summary>
        /// <value>Minimum namespace duration.</value>
        /// <example>1m</example>
        [DataMember(Name = "minNamespaceDuration", EmitDefaultValue = false)]
        public string MinNamespaceDuration { get; set; }

        /// <summary>
        /// Maximum namespace duration.
        /// </summary>
        /// <value>Maximum namespace duration.</value>
        /// <example>365d</example>
        [DataMember(Name = "maxNamespaceDuration", EmitDefaultValue = false)]
        public string MaxNamespaceDuration { get; set; }

        /// <summary>
        /// Grace period during which time only the previous owner can renew an expired namespace.
        /// </summary>
        /// <value>Grace period during which time only the previous owner can renew an expired namespace.</value>
        /// <example>2m</example>
        [DataMember(Name = "namespaceGracePeriodDuration", EmitDefaultValue = false)]
        public string NamespaceGracePeriodDuration { get; set; }

        /// <summary>
        /// Reserved root namespaces that cannot be claimed.
        /// </summary>
        /// <value>Reserved root namespaces that cannot be claimed.</value>
        /// <example>xem, nem, user, account, org, com, biz, net, edu, mil, gov, info</example>
        [DataMember(Name = "reservedRootNamespaceNames", EmitDefaultValue = false)]
        public string ReservedRootNamespaceNames { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        /// <example>TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY</example>
        [DataMember(Name = "namespaceRentalFeeSinkAddress", EmitDefaultValue = false)]
        public string NamespaceRentalFeeSinkAddress { get; set; }

        /// <summary>
        /// Root namespace rental fee per block.
        /// </summary>
        /// <value>Root namespace rental fee per block.</value>
        /// <example>1</example>
        [DataMember(Name = "rootNamespaceRentalFeePerBlock", EmitDefaultValue = false)]
        public string RootNamespaceRentalFeePerBlock { get; set; }

        /// <summary>
        /// Child namespace rental fee.
        /// </summary>
        /// <value>Child namespace rental fee.</value>
        /// <example>100</example>
        [DataMember(Name = "childNamespaceRentalFee", EmitDefaultValue = false)]
        public string ChildNamespaceRentalFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NamespaceNetworkPropertiesDTO {\n");
            sb.Append("  MaxNameSize: ").Append(MaxNameSize).Append("\n");
            sb.Append("  MaxChildNamespaces: ").Append(MaxChildNamespaces).Append("\n");
            sb.Append("  MaxNamespaceDepth: ").Append(MaxNamespaceDepth).Append("\n");
            sb.Append("  MinNamespaceDuration: ").Append(MinNamespaceDuration).Append("\n");
            sb.Append("  MaxNamespaceDuration: ").Append(MaxNamespaceDuration).Append("\n");
            sb.Append("  NamespaceGracePeriodDuration: ").Append(NamespaceGracePeriodDuration).Append("\n");
            sb.Append("  ReservedRootNamespaceNames: ").Append(ReservedRootNamespaceNames).Append("\n");
            sb.Append("  NamespaceRentalFeeSinkAddress: ").Append(NamespaceRentalFeeSinkAddress).Append("\n");
            sb.Append("  RootNamespaceRentalFeePerBlock: ").Append(RootNamespaceRentalFeePerBlock).Append("\n");
            sb.Append("  ChildNamespaceRentalFee: ").Append(ChildNamespaceRentalFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
