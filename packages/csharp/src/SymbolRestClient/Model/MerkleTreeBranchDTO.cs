/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolRestClient.Client.OpenAPIDateConverter;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// Merkle tree branch node.
    /// </summary>
    [DataContract(Name = "MerkleTreeBranchDTO")]
    public partial class MerkleTreeBranchDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public MerkleTreeNodeTypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerkleTreeBranchDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerkleTreeBranchDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerkleTreeBranchDTO" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="path">Branch link path. (required).</param>
        /// <param name="encodedPath">Encoded branch link path. (required).</param>
        /// <param name="nibbleCount">Nibble count. (required).</param>
        /// <param name="linkMask">Branch link bitmask. (required).</param>
        /// <param name="links">Branch links (max 16). (required).</param>
        /// <param name="branchHash">branchHash (required).</param>
        public MerkleTreeBranchDTO(MerkleTreeNodeTypeEnum type = default(MerkleTreeNodeTypeEnum), string path = default(string), string encodedPath = default(string), int nibbleCount = default(int), string linkMask = default(string), List<MerkleTreeBranchLinkDTO> links = default(List<MerkleTreeBranchLinkDTO>), string branchHash = default(string))
        {
            this.Type = type;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for MerkleTreeBranchDTO and cannot be null");
            }
            this.Path = path;
            // to ensure "encodedPath" is required (not null)
            if (encodedPath == null)
            {
                throw new ArgumentNullException("encodedPath is a required property for MerkleTreeBranchDTO and cannot be null");
            }
            this.EncodedPath = encodedPath;
            this.NibbleCount = nibbleCount;
            // to ensure "linkMask" is required (not null)
            if (linkMask == null)
            {
                throw new ArgumentNullException("linkMask is a required property for MerkleTreeBranchDTO and cannot be null");
            }
            this.LinkMask = linkMask;
            // to ensure "links" is required (not null)
            if (links == null)
            {
                throw new ArgumentNullException("links is a required property for MerkleTreeBranchDTO and cannot be null");
            }
            this.Links = links;
            // to ensure "branchHash" is required (not null)
            if (branchHash == null)
            {
                throw new ArgumentNullException("branchHash is a required property for MerkleTreeBranchDTO and cannot be null");
            }
            this.BranchHash = branchHash;
        }

        /// <summary>
        /// Branch link path.
        /// </summary>
        /// <value>Branch link path.</value>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Encoded branch link path.
        /// </summary>
        /// <value>Encoded branch link path.</value>
        [DataMember(Name = "encodedPath", IsRequired = true, EmitDefaultValue = true)]
        public string EncodedPath { get; set; }

        /// <summary>
        /// Nibble count.
        /// </summary>
        /// <value>Nibble count.</value>
        [DataMember(Name = "nibbleCount", IsRequired = true, EmitDefaultValue = true)]
        public int NibbleCount { get; set; }

        /// <summary>
        /// Branch link bitmask.
        /// </summary>
        /// <value>Branch link bitmask.</value>
        [DataMember(Name = "linkMask", IsRequired = true, EmitDefaultValue = true)]
        public string LinkMask { get; set; }

        /// <summary>
        /// Branch links (max 16).
        /// </summary>
        /// <value>Branch links (max 16).</value>
        [DataMember(Name = "links", IsRequired = true, EmitDefaultValue = true)]
        public List<MerkleTreeBranchLinkDTO> Links { get; set; }

        /// <summary>
        /// Gets or Sets BranchHash
        /// </summary>
        /// <example>C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810</example>
        [DataMember(Name = "branchHash", IsRequired = true, EmitDefaultValue = true)]
        public string BranchHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MerkleTreeBranchDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  EncodedPath: ").Append(EncodedPath).Append("\n");
            sb.Append("  NibbleCount: ").Append(NibbleCount).Append("\n");
            sb.Append("  LinkMask: ").Append(LinkMask).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  BranchHash: ").Append(BranchHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
