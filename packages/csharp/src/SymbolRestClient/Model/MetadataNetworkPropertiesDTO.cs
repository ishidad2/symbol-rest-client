/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// MetadataNetworkPropertiesDTO
    /// </summary>
    [DataContract(Name = "MetadataNetworkPropertiesDTO")]
    public partial class MetadataNetworkPropertiesDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataNetworkPropertiesDTO" /> class.
        /// </summary>
        /// <param name="maxValueSize">Maximum metadata value size..</param>
        public MetadataNetworkPropertiesDTO(string maxValueSize = default(string))
        {
            this.MaxValueSize = maxValueSize;
        }

        /// <summary>
        /// Maximum metadata value size.
        /// </summary>
        /// <value>Maximum metadata value size.</value>
        /// <example>1024</example>
        [DataMember(Name = "maxValueSize", EmitDefaultValue = false)]
        public string MaxValueSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataNetworkPropertiesDTO {\n");
            sb.Append("  MaxValueSize: ").Append(MaxValueSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
