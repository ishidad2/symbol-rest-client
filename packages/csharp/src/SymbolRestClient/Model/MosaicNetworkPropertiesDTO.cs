/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// MosaicNetworkPropertiesDTO
    /// </summary>
    [DataContract(Name = "MosaicNetworkPropertiesDTO")]
    public partial class MosaicNetworkPropertiesDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicNetworkPropertiesDTO" /> class.
        /// </summary>
        /// <param name="maxMosaicsPerAccount">Maximum number of mosaics that an account can own..</param>
        /// <param name="maxMosaicDuration">Maximum mosaic duration..</param>
        /// <param name="maxMosaicDivisibility">Maximum mosaic divisibility..</param>
        /// <param name="mosaicRentalFeeSinkAddress">Address encoded using a 32-character set..</param>
        /// <param name="mosaicRentalFee">Mosaic rental fee..</param>
        public MosaicNetworkPropertiesDTO(string maxMosaicsPerAccount = default(string), string maxMosaicDuration = default(string), string maxMosaicDivisibility = default(string), string mosaicRentalFeeSinkAddress = default(string), string mosaicRentalFee = default(string))
        {
            this.MaxMosaicsPerAccount = maxMosaicsPerAccount;
            this.MaxMosaicDuration = maxMosaicDuration;
            this.MaxMosaicDivisibility = maxMosaicDivisibility;
            this.MosaicRentalFeeSinkAddress = mosaicRentalFeeSinkAddress;
            this.MosaicRentalFee = mosaicRentalFee;
        }

        /// <summary>
        /// Maximum number of mosaics that an account can own.
        /// </summary>
        /// <value>Maximum number of mosaics that an account can own.</value>
        /// <example>10&#39;000</example>
        [DataMember(Name = "maxMosaicsPerAccount", EmitDefaultValue = false)]
        public string MaxMosaicsPerAccount { get; set; }

        /// <summary>
        /// Maximum mosaic duration.
        /// </summary>
        /// <value>Maximum mosaic duration.</value>
        /// <example>3650d</example>
        [DataMember(Name = "maxMosaicDuration", EmitDefaultValue = false)]
        public string MaxMosaicDuration { get; set; }

        /// <summary>
        /// Maximum mosaic divisibility.
        /// </summary>
        /// <value>Maximum mosaic divisibility.</value>
        /// <example>6</example>
        [DataMember(Name = "maxMosaicDivisibility", EmitDefaultValue = false)]
        public string MaxMosaicDivisibility { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        /// <example>TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY</example>
        [DataMember(Name = "mosaicRentalFeeSinkAddress", EmitDefaultValue = false)]
        public string MosaicRentalFeeSinkAddress { get; set; }

        /// <summary>
        /// Mosaic rental fee.
        /// </summary>
        /// <value>Mosaic rental fee.</value>
        /// <example>500</example>
        [DataMember(Name = "mosaicRentalFee", EmitDefaultValue = false)]
        public string MosaicRentalFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MosaicNetworkPropertiesDTO {\n");
            sb.Append("  MaxMosaicsPerAccount: ").Append(MaxMosaicsPerAccount).Append("\n");
            sb.Append("  MaxMosaicDuration: ").Append(MaxMosaicDuration).Append("\n");
            sb.Append("  MaxMosaicDivisibility: ").Append(MaxMosaicDivisibility).Append("\n");
            sb.Append("  MosaicRentalFeeSinkAddress: ").Append(MosaicRentalFeeSinkAddress).Append("\n");
            sb.Append("  MosaicRentalFee: ").Append(MosaicRentalFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
