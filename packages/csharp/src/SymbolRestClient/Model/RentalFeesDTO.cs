/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolRestClient.Client.OpenAPIDateConverter;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// RentalFeesDTO
    /// </summary>
    [DataContract(Name = "RentalFeesDTO")]
    public partial class RentalFeesDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RentalFeesDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RentalFeesDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RentalFeesDTO" /> class.
        /// </summary>
        /// <param name="effectiveRootNamespaceRentalFeePerBlock">Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative). (required).</param>
        /// <param name="effectiveChildNamespaceRentalFee">Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative). (required).</param>
        /// <param name="effectiveMosaicRentalFee">Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative). (required).</param>
        public RentalFeesDTO(string effectiveRootNamespaceRentalFeePerBlock = default(string), string effectiveChildNamespaceRentalFee = default(string), string effectiveMosaicRentalFee = default(string))
        {
            // to ensure "effectiveRootNamespaceRentalFeePerBlock" is required (not null)
            if (effectiveRootNamespaceRentalFeePerBlock == null)
            {
                throw new ArgumentNullException("effectiveRootNamespaceRentalFeePerBlock is a required property for RentalFeesDTO and cannot be null");
            }
            this.EffectiveRootNamespaceRentalFeePerBlock = effectiveRootNamespaceRentalFeePerBlock;
            // to ensure "effectiveChildNamespaceRentalFee" is required (not null)
            if (effectiveChildNamespaceRentalFee == null)
            {
                throw new ArgumentNullException("effectiveChildNamespaceRentalFee is a required property for RentalFeesDTO and cannot be null");
            }
            this.EffectiveChildNamespaceRentalFee = effectiveChildNamespaceRentalFee;
            // to ensure "effectiveMosaicRentalFee" is required (not null)
            if (effectiveMosaicRentalFee == null)
            {
                throw new ArgumentNullException("effectiveMosaicRentalFee is a required property for RentalFeesDTO and cannot be null");
            }
            this.EffectiveMosaicRentalFee = effectiveMosaicRentalFee;
        }

        /// <summary>
        /// Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
        /// </summary>
        /// <value>Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).</value>
        /// <example>123456</example>
        [DataMember(Name = "effectiveRootNamespaceRentalFeePerBlock", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveRootNamespaceRentalFeePerBlock { get; set; }

        /// <summary>
        /// Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
        /// </summary>
        /// <value>Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).</value>
        /// <example>123456</example>
        [DataMember(Name = "effectiveChildNamespaceRentalFee", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveChildNamespaceRentalFee { get; set; }

        /// <summary>
        /// Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
        /// </summary>
        /// <value>Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).</value>
        /// <example>123456</example>
        [DataMember(Name = "effectiveMosaicRentalFee", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveMosaicRentalFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RentalFeesDTO {\n");
            sb.Append("  EffectiveRootNamespaceRentalFeePerBlock: ").Append(EffectiveRootNamespaceRentalFeePerBlock).Append("\n");
            sb.Append("  EffectiveChildNamespaceRentalFee: ").Append(EffectiveChildNamespaceRentalFee).Append("\n");
            sb.Append("  EffectiveMosaicRentalFee: ").Append(EffectiveMosaicRentalFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
