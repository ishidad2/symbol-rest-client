/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolRestClient.Client.OpenAPIDateConverter;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// Merkle tree leaf node.
    /// </summary>
    [DataContract(Name = "MerkleTreeLeafDTO")]
    public partial class MerkleTreeLeafDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public MerkleTreeNodeTypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerkleTreeLeafDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerkleTreeLeafDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerkleTreeLeafDTO" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="path">Leaf path. (required).</param>
        /// <param name="encodedPath">Encoded leaf path. (required).</param>
        /// <param name="nibbleCount">Nibble count. (required).</param>
        /// <param name="value">Leaf value (sha256 hash). (required).</param>
        /// <param name="leafHash">leafHash (required).</param>
        public MerkleTreeLeafDTO(MerkleTreeNodeTypeEnum type = default(MerkleTreeNodeTypeEnum), string path = default(string), string encodedPath = default(string), int nibbleCount = default(int), string value = default(string), string leafHash = default(string))
        {
            this.Type = type;
            // to ensure "path" is required (not null)
            if (path == null)
            {
                throw new ArgumentNullException("path is a required property for MerkleTreeLeafDTO and cannot be null");
            }
            this.Path = path;
            // to ensure "encodedPath" is required (not null)
            if (encodedPath == null)
            {
                throw new ArgumentNullException("encodedPath is a required property for MerkleTreeLeafDTO and cannot be null");
            }
            this.EncodedPath = encodedPath;
            this.NibbleCount = nibbleCount;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for MerkleTreeLeafDTO and cannot be null");
            }
            this.Value = value;
            // to ensure "leafHash" is required (not null)
            if (leafHash == null)
            {
                throw new ArgumentNullException("leafHash is a required property for MerkleTreeLeafDTO and cannot be null");
            }
            this.LeafHash = leafHash;
        }

        /// <summary>
        /// Leaf path.
        /// </summary>
        /// <value>Leaf path.</value>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Encoded leaf path.
        /// </summary>
        /// <value>Encoded leaf path.</value>
        [DataMember(Name = "encodedPath", IsRequired = true, EmitDefaultValue = true)]
        public string EncodedPath { get; set; }

        /// <summary>
        /// Nibble count.
        /// </summary>
        /// <value>Nibble count.</value>
        [DataMember(Name = "nibbleCount", IsRequired = true, EmitDefaultValue = true)]
        public int NibbleCount { get; set; }

        /// <summary>
        /// Leaf value (sha256 hash).
        /// </summary>
        /// <value>Leaf value (sha256 hash).</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets LeafHash
        /// </summary>
        /// <example>C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810</example>
        [DataMember(Name = "leafHash", IsRequired = true, EmitDefaultValue = true)]
        public string LeafHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MerkleTreeLeafDTO {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  EncodedPath: ").Append(EncodedPath).Append("\n");
            sb.Append("  NibbleCount: ").Append(NibbleCount).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  LeafHash: ").Append(LeafHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
