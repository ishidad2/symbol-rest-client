/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// NamespaceRegistrationTransactionBodyDTO
    /// </summary>
    [DataContract(Name = "NamespaceRegistrationTransactionBodyDTO")]
    public partial class NamespaceRegistrationTransactionBodyDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RegistrationType
        /// </summary>
        [DataMember(Name = "registrationType", IsRequired = true, EmitDefaultValue = true)]
        public NamespaceRegistrationTypeEnum RegistrationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRegistrationTransactionBodyDTO" /> class.
        /// </summary>
        [JsonConstructor]
        protected NamespaceRegistrationTransactionBodyDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRegistrationTransactionBodyDTO" /> class.
        /// </summary>
        /// <param name="duration">Duration expressed in number of blocks..</param>
        /// <param name="parentId">Namespace identifier..</param>
        /// <param name="id">Namespace identifier. (required).</param>
        /// <param name="registrationType">registrationType (required).</param>
        /// <param name="name">Namespace name. (required).</param>
        public NamespaceRegistrationTransactionBodyDTO(string duration = default(string), string parentId = default(string), string id = default(string), NamespaceRegistrationTypeEnum registrationType = default(NamespaceRegistrationTypeEnum), string name = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for NamespaceRegistrationTransactionBodyDTO and cannot be null");
            }
            this.Id = id;
            this.RegistrationType = registrationType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for NamespaceRegistrationTransactionBodyDTO and cannot be null");
            }
            this.Name = name;
            this.Duration = duration;
            this.ParentId = parentId;
        }

        /// <summary>
        /// Duration expressed in number of blocks.
        /// </summary>
        /// <value>Duration expressed in number of blocks.</value>
        /// <example>200</example>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public string Duration { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        /// <example>85BBEA6CC462B244</example>
        [DataMember(Name = "parentId", EmitDefaultValue = false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        /// <example>85BBEA6CC462B244</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Namespace name.
        /// </summary>
        /// <value>Namespace name.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NamespaceRegistrationTransactionBodyDTO {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RegistrationType: ").Append(RegistrationType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
