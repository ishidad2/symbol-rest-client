/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// MosaicAddressRestrictionTransactionBodyDTO
    /// </summary>
    [DataContract(Name = "MosaicAddressRestrictionTransactionBodyDTO")]
    public partial class MosaicAddressRestrictionTransactionBodyDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicAddressRestrictionTransactionBodyDTO" /> class.
        /// </summary>
        [JsonConstructor]
        protected MosaicAddressRestrictionTransactionBodyDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicAddressRestrictionTransactionBodyDTO" /> class.
        /// </summary>
        /// <param name="mosaicId">Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real mosaic identifier.  (required).</param>
        /// <param name="restrictionKey">Restriction key. (required).</param>
        /// <param name="previousRestrictionValue">Restriction value. (required).</param>
        /// <param name="newRestrictionValue">Restriction value. (required).</param>
        /// <param name="targetAddress">Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA  (required).</param>
        public MosaicAddressRestrictionTransactionBodyDTO(string mosaicId = default(string), string restrictionKey = default(string), string previousRestrictionValue = default(string), string newRestrictionValue = default(string), string targetAddress = default(string))
        {
            // to ensure "mosaicId" is required (not null)
            if (mosaicId == null)
            {
                throw new ArgumentNullException("mosaicId is a required property for MosaicAddressRestrictionTransactionBodyDTO and cannot be null");
            }
            this.MosaicId = mosaicId;
            // to ensure "restrictionKey" is required (not null)
            if (restrictionKey == null)
            {
                throw new ArgumentNullException("restrictionKey is a required property for MosaicAddressRestrictionTransactionBodyDTO and cannot be null");
            }
            this.RestrictionKey = restrictionKey;
            // to ensure "previousRestrictionValue" is required (not null)
            if (previousRestrictionValue == null)
            {
                throw new ArgumentNullException("previousRestrictionValue is a required property for MosaicAddressRestrictionTransactionBodyDTO and cannot be null");
            }
            this.PreviousRestrictionValue = previousRestrictionValue;
            // to ensure "newRestrictionValue" is required (not null)
            if (newRestrictionValue == null)
            {
                throw new ArgumentNullException("newRestrictionValue is a required property for MosaicAddressRestrictionTransactionBodyDTO and cannot be null");
            }
            this.NewRestrictionValue = newRestrictionValue;
            // to ensure "targetAddress" is required (not null)
            if (targetAddress == null)
            {
                throw new ArgumentNullException("targetAddress is a required property for MosaicAddressRestrictionTransactionBodyDTO and cannot be null");
            }
            this.TargetAddress = targetAddress;
        }

        /// <summary>
        /// Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real mosaic identifier. 
        /// </summary>
        /// <value>Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias) is used instead of the real mosaic identifier. </value>
        /// <example>85BBEA6CC462B244</example>
        [DataMember(Name = "mosaicId", IsRequired = true, EmitDefaultValue = true)]
        public string MosaicId { get; set; }

        /// <summary>
        /// Restriction key.
        /// </summary>
        /// <value>Restriction key.</value>
        /// <example>0DC67FBE1CAD29E3</example>
        [DataMember(Name = "restrictionKey", IsRequired = true, EmitDefaultValue = true)]
        public string RestrictionKey { get; set; }

        /// <summary>
        /// Restriction value.
        /// </summary>
        /// <value>Restriction value.</value>
        /// <example>1000</example>
        [DataMember(Name = "previousRestrictionValue", IsRequired = true, EmitDefaultValue = true)]
        public string PreviousRestrictionValue { get; set; }

        /// <summary>
        /// Restriction value.
        /// </summary>
        /// <value>Restriction value.</value>
        /// <example>1000</example>
        [DataMember(Name = "newRestrictionValue", IsRequired = true, EmitDefaultValue = true)]
        public string NewRestrictionValue { get; set; }

        /// <summary>
        /// Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA 
        /// </summary>
        /// <value>Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA </value>
        /// <example>TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA</example>
        [DataMember(Name = "targetAddress", IsRequired = true, EmitDefaultValue = true)]
        public string TargetAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MosaicAddressRestrictionTransactionBodyDTO {\n");
            sb.Append("  MosaicId: ").Append(MosaicId).Append("\n");
            sb.Append("  RestrictionKey: ").Append(RestrictionKey).Append("\n");
            sb.Append("  PreviousRestrictionValue: ").Append(PreviousRestrictionValue).Append("\n");
            sb.Append("  NewRestrictionValue: ").Append(NewRestrictionValue).Append("\n");
            sb.Append("  TargetAddress: ").Append(TargetAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
