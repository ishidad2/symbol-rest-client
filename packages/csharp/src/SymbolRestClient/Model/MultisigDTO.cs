/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// MultisigDTO
    /// </summary>
    [DataContract(Name = "MultisigDTO")]
    public partial class MultisigDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigDTO" /> class.
        /// </summary>
        [JsonConstructor]
        protected MultisigDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MultisigDTO" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the state (required).</param>
        /// <param name="accountAddress">Address encoded using a 32-character set. (required).</param>
        /// <param name="minApproval">A number that allows uint 32 values. (required).</param>
        /// <param name="minRemoval">A number that allows uint 32 values. (required).</param>
        /// <param name="cosignatoryAddresses">Addresses of the cosignatory accounts. (required).</param>
        /// <param name="multisigAddresses">Multisig accounts where the account is cosignatory. (required).</param>
        public MultisigDTO(int varVersion = default(int), string accountAddress = default(string), long minApproval = default(long), long minRemoval = default(long), List<string> cosignatoryAddresses = default(List<string>), List<string> multisigAddresses = default(List<string>))
        {
            this.VarVersion = varVersion;
            // to ensure "accountAddress" is required (not null)
            if (accountAddress == null)
            {
                throw new ArgumentNullException("accountAddress is a required property for MultisigDTO and cannot be null");
            }
            this.AccountAddress = accountAddress;
            this.MinApproval = minApproval;
            this.MinRemoval = minRemoval;
            // to ensure "cosignatoryAddresses" is required (not null)
            if (cosignatoryAddresses == null)
            {
                throw new ArgumentNullException("cosignatoryAddresses is a required property for MultisigDTO and cannot be null");
            }
            this.CosignatoryAddresses = cosignatoryAddresses;
            // to ensure "multisigAddresses" is required (not null)
            if (multisigAddresses == null)
            {
                throw new ArgumentNullException("multisigAddresses is a required property for MultisigDTO and cannot be null");
            }
            this.MultisigAddresses = multisigAddresses;
        }

        /// <summary>
        /// The version of the state
        /// </summary>
        /// <value>The version of the state</value>
        /// <example>1</example>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        /// <example>TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY</example>
        [DataMember(Name = "accountAddress", IsRequired = true, EmitDefaultValue = true)]
        public string AccountAddress { get; set; }

        /// <summary>
        /// A number that allows uint 32 values.
        /// </summary>
        /// <value>A number that allows uint 32 values.</value>
        /// <example>2222212828</example>
        [DataMember(Name = "minApproval", IsRequired = true, EmitDefaultValue = true)]
        public long MinApproval { get; set; }

        /// <summary>
        /// A number that allows uint 32 values.
        /// </summary>
        /// <value>A number that allows uint 32 values.</value>
        /// <example>2222212828</example>
        [DataMember(Name = "minRemoval", IsRequired = true, EmitDefaultValue = true)]
        public long MinRemoval { get; set; }

        /// <summary>
        /// Addresses of the cosignatory accounts.
        /// </summary>
        /// <value>Addresses of the cosignatory accounts.</value>
        [DataMember(Name = "cosignatoryAddresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> CosignatoryAddresses { get; set; }

        /// <summary>
        /// Multisig accounts where the account is cosignatory.
        /// </summary>
        /// <value>Multisig accounts where the account is cosignatory.</value>
        [DataMember(Name = "multisigAddresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> MultisigAddresses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultisigDTO {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  AccountAddress: ").Append(AccountAddress).Append("\n");
            sb.Append("  MinApproval: ").Append(MinApproval).Append("\n");
            sb.Append("  MinRemoval: ").Append(MinRemoval).Append("\n");
            sb.Append("  CosignatoryAddresses: ").Append(CosignatoryAddresses).Append("\n");
            sb.Append("  MultisigAddresses: ").Append(MultisigAddresses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
