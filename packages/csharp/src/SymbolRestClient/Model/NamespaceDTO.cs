/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// NamespaceDTO
    /// </summary>
    [DataContract(Name = "NamespaceDTO")]
    public partial class NamespaceDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RegistrationType
        /// </summary>
        [DataMember(Name = "registrationType", IsRequired = true, EmitDefaultValue = true)]
        public NamespaceRegistrationTypeEnum RegistrationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceDTO" /> class.
        /// </summary>
        [JsonConstructor]
        protected NamespaceDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceDTO" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the state (required).</param>
        /// <param name="registrationType">registrationType (required).</param>
        /// <param name="depth">Level of the namespace. (required).</param>
        /// <param name="level0">Namespace identifier. (required).</param>
        /// <param name="level1">Namespace identifier..</param>
        /// <param name="level2">Namespace identifier..</param>
        /// <param name="alias">alias (required).</param>
        /// <param name="parentId">Namespace identifier. (required).</param>
        /// <param name="ownerAddress">Address encoded using a 32-character set. (required).</param>
        /// <param name="startHeight">Height of the blockchain. (required).</param>
        /// <param name="endHeight">Height of the blockchain. (required).</param>
        public NamespaceDTO(int varVersion = default(int), NamespaceRegistrationTypeEnum registrationType = default(NamespaceRegistrationTypeEnum), int depth = default(int), string level0 = default(string), string level1 = default(string), string level2 = default(string), AliasDTO alias = default(AliasDTO), string parentId = default(string), string ownerAddress = default(string), string startHeight = default(string), string endHeight = default(string))
        {
            this.VarVersion = varVersion;
            this.RegistrationType = registrationType;
            this.Depth = depth;
            // to ensure "level0" is required (not null)
            if (level0 == null)
            {
                throw new ArgumentNullException("level0 is a required property for NamespaceDTO and cannot be null");
            }
            this.Level0 = level0;
            // to ensure "alias" is required (not null)
            if (alias == null)
            {
                throw new ArgumentNullException("alias is a required property for NamespaceDTO and cannot be null");
            }
            this.Alias = alias;
            // to ensure "parentId" is required (not null)
            if (parentId == null)
            {
                throw new ArgumentNullException("parentId is a required property for NamespaceDTO and cannot be null");
            }
            this.ParentId = parentId;
            // to ensure "ownerAddress" is required (not null)
            if (ownerAddress == null)
            {
                throw new ArgumentNullException("ownerAddress is a required property for NamespaceDTO and cannot be null");
            }
            this.OwnerAddress = ownerAddress;
            // to ensure "startHeight" is required (not null)
            if (startHeight == null)
            {
                throw new ArgumentNullException("startHeight is a required property for NamespaceDTO and cannot be null");
            }
            this.StartHeight = startHeight;
            // to ensure "endHeight" is required (not null)
            if (endHeight == null)
            {
                throw new ArgumentNullException("endHeight is a required property for NamespaceDTO and cannot be null");
            }
            this.EndHeight = endHeight;
            this.Level1 = level1;
            this.Level2 = level2;
        }

        /// <summary>
        /// The version of the state
        /// </summary>
        /// <value>The version of the state</value>
        /// <example>1</example>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Level of the namespace.
        /// </summary>
        /// <value>Level of the namespace.</value>
        /// <example>1</example>
        [DataMember(Name = "depth", IsRequired = true, EmitDefaultValue = true)]
        public int Depth { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        /// <example>85BBEA6CC462B244</example>
        [DataMember(Name = "level0", IsRequired = true, EmitDefaultValue = true)]
        public string Level0 { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        /// <example>85BBEA6CC462B244</example>
        [DataMember(Name = "level1", EmitDefaultValue = false)]
        public string Level1 { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        /// <example>85BBEA6CC462B244</example>
        [DataMember(Name = "level2", EmitDefaultValue = false)]
        public string Level2 { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name = "alias", IsRequired = true, EmitDefaultValue = true)]
        public AliasDTO Alias { get; set; }

        /// <summary>
        /// Namespace identifier.
        /// </summary>
        /// <value>Namespace identifier.</value>
        /// <example>85BBEA6CC462B244</example>
        [DataMember(Name = "parentId", IsRequired = true, EmitDefaultValue = true)]
        public string ParentId { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        /// <example>TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY</example>
        [DataMember(Name = "ownerAddress", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerAddress { get; set; }

        /// <summary>
        /// Height of the blockchain.
        /// </summary>
        /// <value>Height of the blockchain.</value>
        /// <example>1</example>
        [DataMember(Name = "startHeight", IsRequired = true, EmitDefaultValue = true)]
        public string StartHeight { get; set; }

        /// <summary>
        /// Height of the blockchain.
        /// </summary>
        /// <value>Height of the blockchain.</value>
        /// <example>1</example>
        [DataMember(Name = "endHeight", IsRequired = true, EmitDefaultValue = true)]
        public string EndHeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NamespaceDTO {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  RegistrationType: ").Append(RegistrationType).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Level0: ").Append(Level0).Append("\n");
            sb.Append("  Level1: ").Append(Level1).Append("\n");
            sb.Append("  Level2: ").Append(Level2).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  OwnerAddress: ").Append(OwnerAddress).Append("\n");
            sb.Append("  StartHeight: ").Append(StartHeight).Append("\n");
            sb.Append("  EndHeight: ").Append(EndHeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
