/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// Plugin related configuration properties.
    /// </summary>
    [DataContract(Name = "PluginsPropertiesDTO")]
    public partial class PluginsPropertiesDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsPropertiesDTO" /> class.
        /// </summary>
        /// <param name="accountlink">accountlink.</param>
        /// <param name="aggregate">aggregate.</param>
        /// <param name="lockhash">lockhash.</param>
        /// <param name="locksecret">locksecret.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="mosaic">mosaic.</param>
        /// <param name="multisig">multisig.</param>
        /// <param name="varNamespace">varNamespace.</param>
        /// <param name="restrictionaccount">restrictionaccount.</param>
        /// <param name="restrictionmosaic">restrictionmosaic.</param>
        /// <param name="transfer">transfer.</param>
        public PluginsPropertiesDTO(AccountKeyLinkNetworkPropertiesDTO accountlink = default(AccountKeyLinkNetworkPropertiesDTO), AggregateNetworkPropertiesDTO aggregate = default(AggregateNetworkPropertiesDTO), HashLockNetworkPropertiesDTO lockhash = default(HashLockNetworkPropertiesDTO), SecretLockNetworkPropertiesDTO locksecret = default(SecretLockNetworkPropertiesDTO), MetadataNetworkPropertiesDTO metadata = default(MetadataNetworkPropertiesDTO), MosaicNetworkPropertiesDTO mosaic = default(MosaicNetworkPropertiesDTO), MultisigNetworkPropertiesDTO multisig = default(MultisigNetworkPropertiesDTO), NamespaceNetworkPropertiesDTO varNamespace = default(NamespaceNetworkPropertiesDTO), AccountRestrictionNetworkPropertiesDTO restrictionaccount = default(AccountRestrictionNetworkPropertiesDTO), MosaicRestrictionNetworkPropertiesDTO restrictionmosaic = default(MosaicRestrictionNetworkPropertiesDTO), TransferNetworkPropertiesDTO transfer = default(TransferNetworkPropertiesDTO))
        {
            this.Accountlink = accountlink;
            this.Aggregate = aggregate;
            this.Lockhash = lockhash;
            this.Locksecret = locksecret;
            this.Metadata = metadata;
            this.Mosaic = mosaic;
            this.Multisig = multisig;
            this.VarNamespace = varNamespace;
            this.Restrictionaccount = restrictionaccount;
            this.Restrictionmosaic = restrictionmosaic;
            this.Transfer = transfer;
        }

        /// <summary>
        /// Gets or Sets Accountlink
        /// </summary>
        [DataMember(Name = "accountlink", EmitDefaultValue = false)]
        public AccountKeyLinkNetworkPropertiesDTO Accountlink { get; set; }

        /// <summary>
        /// Gets or Sets Aggregate
        /// </summary>
        [DataMember(Name = "aggregate", EmitDefaultValue = false)]
        public AggregateNetworkPropertiesDTO Aggregate { get; set; }

        /// <summary>
        /// Gets or Sets Lockhash
        /// </summary>
        [DataMember(Name = "lockhash", EmitDefaultValue = false)]
        public HashLockNetworkPropertiesDTO Lockhash { get; set; }

        /// <summary>
        /// Gets or Sets Locksecret
        /// </summary>
        [DataMember(Name = "locksecret", EmitDefaultValue = false)]
        public SecretLockNetworkPropertiesDTO Locksecret { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public MetadataNetworkPropertiesDTO Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Mosaic
        /// </summary>
        [DataMember(Name = "mosaic", EmitDefaultValue = false)]
        public MosaicNetworkPropertiesDTO Mosaic { get; set; }

        /// <summary>
        /// Gets or Sets Multisig
        /// </summary>
        [DataMember(Name = "multisig", EmitDefaultValue = false)]
        public MultisigNetworkPropertiesDTO Multisig { get; set; }

        /// <summary>
        /// Gets or Sets VarNamespace
        /// </summary>
        [DataMember(Name = "namespace", EmitDefaultValue = false)]
        public NamespaceNetworkPropertiesDTO VarNamespace { get; set; }

        /// <summary>
        /// Gets or Sets Restrictionaccount
        /// </summary>
        [DataMember(Name = "restrictionaccount", EmitDefaultValue = false)]
        public AccountRestrictionNetworkPropertiesDTO Restrictionaccount { get; set; }

        /// <summary>
        /// Gets or Sets Restrictionmosaic
        /// </summary>
        [DataMember(Name = "restrictionmosaic", EmitDefaultValue = false)]
        public MosaicRestrictionNetworkPropertiesDTO Restrictionmosaic { get; set; }

        /// <summary>
        /// Gets or Sets Transfer
        /// </summary>
        [DataMember(Name = "transfer", EmitDefaultValue = false)]
        public TransferNetworkPropertiesDTO Transfer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PluginsPropertiesDTO {\n");
            sb.Append("  Accountlink: ").Append(Accountlink).Append("\n");
            sb.Append("  Aggregate: ").Append(Aggregate).Append("\n");
            sb.Append("  Lockhash: ").Append(Lockhash).Append("\n");
            sb.Append("  Locksecret: ").Append(Locksecret).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Mosaic: ").Append(Mosaic).Append("\n");
            sb.Append("  Multisig: ").Append(Multisig).Append("\n");
            sb.Append("  VarNamespace: ").Append(VarNamespace).Append("\n");
            sb.Append("  Restrictionaccount: ").Append(Restrictionaccount).Append("\n");
            sb.Append("  Restrictionmosaic: ").Append(Restrictionmosaic).Append("\n");
            sb.Append("  Transfer: ").Append(Transfer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
