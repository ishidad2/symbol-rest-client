/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolRestClient.Client.OpenAPIDateConverter;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// MetadataEntryDTO
    /// </summary>
    [DataContract(Name = "MetadataEntryDTO")]
    public partial class MetadataEntryDTO : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MetadataType
        /// </summary>
        [DataMember(Name = "metadataType", IsRequired = true, EmitDefaultValue = true)]
        public MetadataTypeEnum MetadataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataEntryDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MetadataEntryDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataEntryDTO" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the state (required).</param>
        /// <param name="compositeHash">compositeHash (required).</param>
        /// <param name="sourceAddress">Address encoded using a 32-character set. (required).</param>
        /// <param name="targetAddress">Address encoded using a 32-character set. (required).</param>
        /// <param name="scopedMetadataKey">Metadata key scoped to source, target and type expressed. (required).</param>
        /// <param name="targetId">targetId.</param>
        /// <param name="metadataType">metadataType (required).</param>
        /// <param name="value">Metadata value. (required).</param>
        public MetadataEntryDTO(int varVersion = default(int), string compositeHash = default(string), string sourceAddress = default(string), string targetAddress = default(string), string scopedMetadataKey = default(string), MetadataEntryDTOTargetId targetId = default(MetadataEntryDTOTargetId), MetadataTypeEnum metadataType = default(MetadataTypeEnum), string value = default(string))
        {
            this.VarVersion = varVersion;
            // to ensure "compositeHash" is required (not null)
            if (compositeHash == null)
            {
                throw new ArgumentNullException("compositeHash is a required property for MetadataEntryDTO and cannot be null");
            }
            this.CompositeHash = compositeHash;
            // to ensure "sourceAddress" is required (not null)
            if (sourceAddress == null)
            {
                throw new ArgumentNullException("sourceAddress is a required property for MetadataEntryDTO and cannot be null");
            }
            this.SourceAddress = sourceAddress;
            // to ensure "targetAddress" is required (not null)
            if (targetAddress == null)
            {
                throw new ArgumentNullException("targetAddress is a required property for MetadataEntryDTO and cannot be null");
            }
            this.TargetAddress = targetAddress;
            // to ensure "scopedMetadataKey" is required (not null)
            if (scopedMetadataKey == null)
            {
                throw new ArgumentNullException("scopedMetadataKey is a required property for MetadataEntryDTO and cannot be null");
            }
            this.ScopedMetadataKey = scopedMetadataKey;
            this.MetadataType = metadataType;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for MetadataEntryDTO and cannot be null");
            }
            this.Value = value;
            this.TargetId = targetId;
        }

        /// <summary>
        /// The version of the state
        /// </summary>
        /// <value>The version of the state</value>
        /// <example>1</example>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets CompositeHash
        /// </summary>
        /// <example>C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810</example>
        [DataMember(Name = "compositeHash", IsRequired = true, EmitDefaultValue = true)]
        public string CompositeHash { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        /// <example>TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY</example>
        [DataMember(Name = "sourceAddress", IsRequired = true, EmitDefaultValue = true)]
        public string SourceAddress { get; set; }

        /// <summary>
        /// Address encoded using a 32-character set.
        /// </summary>
        /// <value>Address encoded using a 32-character set.</value>
        /// <example>TADP6C2GVEG654OP5LZI32P2GYJSCMEGQBYB7QY</example>
        [DataMember(Name = "targetAddress", IsRequired = true, EmitDefaultValue = true)]
        public string TargetAddress { get; set; }

        /// <summary>
        /// Metadata key scoped to source, target and type expressed.
        /// </summary>
        /// <value>Metadata key scoped to source, target and type expressed.</value>
        /// <example>0DC67FBE1CAD29E3</example>
        [DataMember(Name = "scopedMetadataKey", IsRequired = true, EmitDefaultValue = true)]
        public string ScopedMetadataKey { get; set; }

        /// <summary>
        /// Gets or Sets TargetId
        /// </summary>
        [DataMember(Name = "targetId", EmitDefaultValue = false)]
        public MetadataEntryDTOTargetId TargetId { get; set; }

        /// <summary>
        /// Metadata value.
        /// </summary>
        /// <value>Metadata value.</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataEntryDTO {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  CompositeHash: ").Append(CompositeHash).Append("\n");
            sb.Append("  SourceAddress: ").Append(SourceAddress).Append("\n");
            sb.Append("  TargetAddress: ").Append(TargetAddress).Append("\n");
            sb.Append("  ScopedMetadataKey: ").Append(ScopedMetadataKey).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  MetadataType: ").Append(MetadataType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
