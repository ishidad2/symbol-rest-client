/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// EmbeddedTransactionMetaDTO
    /// </summary>
    [DataContract(Name = "EmbeddedTransactionMetaDTO")]
    public partial class EmbeddedTransactionMetaDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedTransactionMetaDTO" /> class.
        /// </summary>
        [JsonConstructor]
        protected EmbeddedTransactionMetaDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedTransactionMetaDTO" /> class.
        /// </summary>
        /// <param name="height">Height of the blockchain. (required).</param>
        /// <param name="aggregateHash">aggregateHash (required).</param>
        /// <param name="aggregateId">Identifier of the aggregate transaction. (required).</param>
        /// <param name="index">Transaction index within the aggregate. (required).</param>
        /// <param name="timestamp">Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network&#39;s &#39;epochAdjustment&#39;..</param>
        /// <param name="feeMultiplier">Fee multiplier applied to transactions contained in block..</param>
        public EmbeddedTransactionMetaDTO(string height = default(string), string aggregateHash = default(string), string aggregateId = default(string), int index = default(int), string timestamp = default(string), long feeMultiplier = default(long))
        {
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new ArgumentNullException("height is a required property for EmbeddedTransactionMetaDTO and cannot be null");
            }
            this.Height = height;
            // to ensure "aggregateHash" is required (not null)
            if (aggregateHash == null)
            {
                throw new ArgumentNullException("aggregateHash is a required property for EmbeddedTransactionMetaDTO and cannot be null");
            }
            this.AggregateHash = aggregateHash;
            // to ensure "aggregateId" is required (not null)
            if (aggregateId == null)
            {
                throw new ArgumentNullException("aggregateId is a required property for EmbeddedTransactionMetaDTO and cannot be null");
            }
            this.AggregateId = aggregateId;
            this.Index = index;
            this.Timestamp = timestamp;
            this.FeeMultiplier = feeMultiplier;
        }

        /// <summary>
        /// Height of the blockchain.
        /// </summary>
        /// <value>Height of the blockchain.</value>
        /// <example>1</example>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public string Height { get; set; }

        /// <summary>
        /// Gets or Sets AggregateHash
        /// </summary>
        /// <example>C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810</example>
        [DataMember(Name = "aggregateHash", IsRequired = true, EmitDefaultValue = true)]
        public string AggregateHash { get; set; }

        /// <summary>
        /// Identifier of the aggregate transaction.
        /// </summary>
        /// <value>Identifier of the aggregate transaction.</value>
        [DataMember(Name = "aggregateId", IsRequired = true, EmitDefaultValue = true)]
        public string AggregateId { get; set; }

        /// <summary>
        /// Transaction index within the aggregate.
        /// </summary>
        /// <value>Transaction index within the aggregate.</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network&#39;s &#39;epochAdjustment&#39;.
        /// </summary>
        /// <value>Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network&#39;s &#39;epochAdjustment&#39;.</value>
        /// <example>108303181802</example>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Fee multiplier applied to transactions contained in block.
        /// </summary>
        /// <value>Fee multiplier applied to transactions contained in block.</value>
        /// <example>0</example>
        [DataMember(Name = "feeMultiplier", EmitDefaultValue = false)]
        public long FeeMultiplier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmbeddedTransactionMetaDTO {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  AggregateHash: ").Append(AggregateHash).Append("\n");
            sb.Append("  AggregateId: ").Append(AggregateId).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FeeMultiplier: ").Append(FeeMultiplier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
