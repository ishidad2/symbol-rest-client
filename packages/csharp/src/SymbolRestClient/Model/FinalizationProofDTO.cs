/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SymbolRestClient.Client.OpenAPIDateConverter;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// FinalizationProofDTO
    /// </summary>
    [DataContract(Name = "FinalizationProofDTO")]
    public partial class FinalizationProofDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinalizationProofDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FinalizationProofDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinalizationProofDTO" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion (required).</param>
        /// <param name="finalizationEpoch">Finalization Epoch (required).</param>
        /// <param name="finalizationPoint">Finalization point (required).</param>
        /// <param name="height">Height of the blockchain. (required).</param>
        /// <param name="hash">hash (required).</param>
        /// <param name="messageGroups">messageGroups (required).</param>
        public FinalizationProofDTO(int varVersion = default(int), long finalizationEpoch = default(long), long finalizationPoint = default(long), string height = default(string), string hash = default(string), List<MessageGroup> messageGroups = default(List<MessageGroup>))
        {
            this.VarVersion = varVersion;
            this.FinalizationEpoch = finalizationEpoch;
            this.FinalizationPoint = finalizationPoint;
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new ArgumentNullException("height is a required property for FinalizationProofDTO and cannot be null");
            }
            this.Height = height;
            // to ensure "hash" is required (not null)
            if (hash == null)
            {
                throw new ArgumentNullException("hash is a required property for FinalizationProofDTO and cannot be null");
            }
            this.Hash = hash;
            // to ensure "messageGroups" is required (not null)
            if (messageGroups == null)
            {
                throw new ArgumentNullException("messageGroups is a required property for FinalizationProofDTO and cannot be null");
            }
            this.MessageGroups = messageGroups;
        }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Finalization Epoch
        /// </summary>
        /// <value>Finalization Epoch</value>
        /// <example>123456</example>
        [DataMember(Name = "finalizationEpoch", IsRequired = true, EmitDefaultValue = true)]
        public long FinalizationEpoch { get; set; }

        /// <summary>
        /// Finalization point
        /// </summary>
        /// <value>Finalization point</value>
        /// <example>0</example>
        [DataMember(Name = "finalizationPoint", IsRequired = true, EmitDefaultValue = true)]
        public long FinalizationPoint { get; set; }

        /// <summary>
        /// Height of the blockchain.
        /// </summary>
        /// <value>Height of the blockchain.</value>
        /// <example>1</example>
        [DataMember(Name = "height", IsRequired = true, EmitDefaultValue = true)]
        public string Height { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        /// <example>C8FC3FB54FDDFBCE0E8C71224990124E4EEC5AD5D30E592EDFA9524669A23810</example>
        [DataMember(Name = "hash", IsRequired = true, EmitDefaultValue = true)]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets MessageGroups
        /// </summary>
        [DataMember(Name = "messageGroups", IsRequired = true, EmitDefaultValue = true)]
        public List<MessageGroup> MessageGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinalizationProofDTO {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  FinalizationEpoch: ").Append(FinalizationEpoch).Append("\n");
            sb.Append("  FinalizationPoint: ").Append(FinalizationPoint).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  MessageGroups: ").Append(MessageGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
