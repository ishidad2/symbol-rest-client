/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace SymbolRestClient.Model
{
    /// <summary>
    /// TransactionInfoDTOTransaction
    /// </summary>
    [JsonConverter(typeof(TransactionInfoDTOTransactionJsonConverter))]
    [DataContract(Name = "TransactionInfoDTO_transaction")]
    public partial class TransactionInfoDTOTransaction : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="AccountKeyLinkTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AccountKeyLinkTransactionDTO.</param>
        public TransactionInfoDTOTransaction(AccountKeyLinkTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedAccountKeyLinkTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedAccountKeyLinkTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedAccountKeyLinkTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="NodeKeyLinkTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NodeKeyLinkTransactionDTO.</param>
        public TransactionInfoDTOTransaction(NodeKeyLinkTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedNodeKeyLinkTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedNodeKeyLinkTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedNodeKeyLinkTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="VrfKeyLinkTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VrfKeyLinkTransactionDTO.</param>
        public TransactionInfoDTOTransaction(VrfKeyLinkTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedVrfKeyLinkTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedVrfKeyLinkTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedVrfKeyLinkTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="VotingKeyLinkTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of VotingKeyLinkTransactionDTO.</param>
        public TransactionInfoDTOTransaction(VotingKeyLinkTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedVotingKeyLinkTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedVotingKeyLinkTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedVotingKeyLinkTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="AggregateTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AggregateTransactionDTO.</param>
        public TransactionInfoDTOTransaction(AggregateTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="AggregateTransactionExtendedDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AggregateTransactionExtendedDTO.</param>
        public TransactionInfoDTOTransaction(AggregateTransactionExtendedDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="HashLockTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of HashLockTransactionDTO.</param>
        public TransactionInfoDTOTransaction(HashLockTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedHashLockTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedHashLockTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedHashLockTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="SecretLockTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SecretLockTransactionDTO.</param>
        public TransactionInfoDTOTransaction(SecretLockTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedSecretLockTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedSecretLockTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedSecretLockTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="SecretProofTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SecretProofTransactionDTO.</param>
        public TransactionInfoDTOTransaction(SecretProofTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedSecretProofTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedSecretProofTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedSecretProofTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="AccountMetadataTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AccountMetadataTransactionDTO.</param>
        public TransactionInfoDTOTransaction(AccountMetadataTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedAccountMetadataTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedAccountMetadataTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedAccountMetadataTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="MosaicMetadataTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MosaicMetadataTransactionDTO.</param>
        public TransactionInfoDTOTransaction(MosaicMetadataTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedMosaicMetadataTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedMosaicMetadataTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedMosaicMetadataTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="NamespaceMetadataTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NamespaceMetadataTransactionDTO.</param>
        public TransactionInfoDTOTransaction(NamespaceMetadataTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedNamespaceMetadataTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedNamespaceMetadataTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedNamespaceMetadataTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="MosaicDefinitionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MosaicDefinitionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(MosaicDefinitionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedMosaicDefinitionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedMosaicDefinitionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedMosaicDefinitionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="MosaicSupplyChangeTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MosaicSupplyChangeTransactionDTO.</param>
        public TransactionInfoDTOTransaction(MosaicSupplyChangeTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedMosaicSupplyChangeTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedMosaicSupplyChangeTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedMosaicSupplyChangeTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="MosaicSupplyRevocationTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MosaicSupplyRevocationTransactionDTO.</param>
        public TransactionInfoDTOTransaction(MosaicSupplyRevocationTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedMosaicSupplyRevocationTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedMosaicSupplyRevocationTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedMosaicSupplyRevocationTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="NamespaceRegistrationTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of NamespaceRegistrationTransactionDTO.</param>
        public TransactionInfoDTOTransaction(NamespaceRegistrationTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedNamespaceRegistrationTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedNamespaceRegistrationTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedNamespaceRegistrationTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="AddressAliasTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AddressAliasTransactionDTO.</param>
        public TransactionInfoDTOTransaction(AddressAliasTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedAddressAliasTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedAddressAliasTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedAddressAliasTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="MosaicAliasTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MosaicAliasTransactionDTO.</param>
        public TransactionInfoDTOTransaction(MosaicAliasTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedMosaicAliasTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedMosaicAliasTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedMosaicAliasTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="MultisigAccountModificationTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MultisigAccountModificationTransactionDTO.</param>
        public TransactionInfoDTOTransaction(MultisigAccountModificationTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedMultisigAccountModificationTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedMultisigAccountModificationTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedMultisigAccountModificationTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="AccountAddressRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AccountAddressRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(AccountAddressRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedAccountAddressRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedAccountAddressRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedAccountAddressRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="AccountMosaicRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AccountMosaicRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(AccountMosaicRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedAccountMosaicRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedAccountMosaicRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedAccountMosaicRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="AccountOperationRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AccountOperationRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(AccountOperationRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedAccountOperationRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedAccountOperationRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedAccountOperationRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="MosaicGlobalRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MosaicGlobalRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(MosaicGlobalRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedMosaicGlobalRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedMosaicGlobalRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedMosaicGlobalRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="MosaicAddressRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of MosaicAddressRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(MosaicAddressRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedMosaicAddressRestrictionTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedMosaicAddressRestrictionTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedMosaicAddressRestrictionTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="TransferTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of TransferTransactionDTO.</param>
        public TransactionInfoDTOTransaction(TransferTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionInfoDTOTransaction" /> class
        /// with the <see cref="EmbeddedTransferTransactionDTO" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EmbeddedTransferTransactionDTO.</param>
        public TransactionInfoDTOTransaction(EmbeddedTransferTransactionDTO actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AccountAddressRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AccountKeyLinkTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AccountMetadataTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AccountMosaicRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AccountOperationRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AddressAliasTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AggregateTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AggregateTransactionExtendedDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedAccountAddressRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedAccountKeyLinkTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedAccountMetadataTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedAccountMosaicRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedAccountOperationRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedAddressAliasTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedHashLockTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedMosaicAddressRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedMosaicAliasTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedMosaicDefinitionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedMosaicGlobalRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedMosaicMetadataTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedMosaicSupplyChangeTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedMosaicSupplyRevocationTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedMultisigAccountModificationTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedNamespaceMetadataTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedNamespaceRegistrationTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedNodeKeyLinkTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedSecretLockTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedSecretProofTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedTransferTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedVotingKeyLinkTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EmbeddedVrfKeyLinkTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(HashLockTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MosaicAddressRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MosaicAliasTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MosaicDefinitionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MosaicGlobalRestrictionTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MosaicMetadataTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MosaicSupplyChangeTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MosaicSupplyRevocationTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(MultisigAccountModificationTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(NamespaceMetadataTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(NamespaceRegistrationTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(NodeKeyLinkTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SecretLockTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SecretProofTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(TransferTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VotingKeyLinkTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(VrfKeyLinkTransactionDTO))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AccountAddressRestrictionTransactionDTO, AccountKeyLinkTransactionDTO, AccountMetadataTransactionDTO, AccountMosaicRestrictionTransactionDTO, AccountOperationRestrictionTransactionDTO, AddressAliasTransactionDTO, AggregateTransactionDTO, AggregateTransactionExtendedDTO, EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO, HashLockTransactionDTO, MosaicAddressRestrictionTransactionDTO, MosaicAliasTransactionDTO, MosaicDefinitionTransactionDTO, MosaicGlobalRestrictionTransactionDTO, MosaicMetadataTransactionDTO, MosaicSupplyChangeTransactionDTO, MosaicSupplyRevocationTransactionDTO, MultisigAccountModificationTransactionDTO, NamespaceMetadataTransactionDTO, NamespaceRegistrationTransactionDTO, NodeKeyLinkTransactionDTO, SecretLockTransactionDTO, SecretProofTransactionDTO, TransferTransactionDTO, VotingKeyLinkTransactionDTO, VrfKeyLinkTransactionDTO");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `AccountKeyLinkTransactionDTO`. If the actual instance is not `AccountKeyLinkTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccountKeyLinkTransactionDTO</returns>
        public AccountKeyLinkTransactionDTO GetAccountKeyLinkTransactionDTO()
        {
            return (AccountKeyLinkTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedAccountKeyLinkTransactionDTO`. If the actual instance is not `EmbeddedAccountKeyLinkTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedAccountKeyLinkTransactionDTO</returns>
        public EmbeddedAccountKeyLinkTransactionDTO GetEmbeddedAccountKeyLinkTransactionDTO()
        {
            return (EmbeddedAccountKeyLinkTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `NodeKeyLinkTransactionDTO`. If the actual instance is not `NodeKeyLinkTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NodeKeyLinkTransactionDTO</returns>
        public NodeKeyLinkTransactionDTO GetNodeKeyLinkTransactionDTO()
        {
            return (NodeKeyLinkTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedNodeKeyLinkTransactionDTO`. If the actual instance is not `EmbeddedNodeKeyLinkTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedNodeKeyLinkTransactionDTO</returns>
        public EmbeddedNodeKeyLinkTransactionDTO GetEmbeddedNodeKeyLinkTransactionDTO()
        {
            return (EmbeddedNodeKeyLinkTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VrfKeyLinkTransactionDTO`. If the actual instance is not `VrfKeyLinkTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VrfKeyLinkTransactionDTO</returns>
        public VrfKeyLinkTransactionDTO GetVrfKeyLinkTransactionDTO()
        {
            return (VrfKeyLinkTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedVrfKeyLinkTransactionDTO`. If the actual instance is not `EmbeddedVrfKeyLinkTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedVrfKeyLinkTransactionDTO</returns>
        public EmbeddedVrfKeyLinkTransactionDTO GetEmbeddedVrfKeyLinkTransactionDTO()
        {
            return (EmbeddedVrfKeyLinkTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `VotingKeyLinkTransactionDTO`. If the actual instance is not `VotingKeyLinkTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of VotingKeyLinkTransactionDTO</returns>
        public VotingKeyLinkTransactionDTO GetVotingKeyLinkTransactionDTO()
        {
            return (VotingKeyLinkTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedVotingKeyLinkTransactionDTO`. If the actual instance is not `EmbeddedVotingKeyLinkTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedVotingKeyLinkTransactionDTO</returns>
        public EmbeddedVotingKeyLinkTransactionDTO GetEmbeddedVotingKeyLinkTransactionDTO()
        {
            return (EmbeddedVotingKeyLinkTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AggregateTransactionDTO`. If the actual instance is not `AggregateTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AggregateTransactionDTO</returns>
        public AggregateTransactionDTO GetAggregateTransactionDTO()
        {
            return (AggregateTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AggregateTransactionExtendedDTO`. If the actual instance is not `AggregateTransactionExtendedDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AggregateTransactionExtendedDTO</returns>
        public AggregateTransactionExtendedDTO GetAggregateTransactionExtendedDTO()
        {
            return (AggregateTransactionExtendedDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `HashLockTransactionDTO`. If the actual instance is not `HashLockTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of HashLockTransactionDTO</returns>
        public HashLockTransactionDTO GetHashLockTransactionDTO()
        {
            return (HashLockTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedHashLockTransactionDTO`. If the actual instance is not `EmbeddedHashLockTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedHashLockTransactionDTO</returns>
        public EmbeddedHashLockTransactionDTO GetEmbeddedHashLockTransactionDTO()
        {
            return (EmbeddedHashLockTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SecretLockTransactionDTO`. If the actual instance is not `SecretLockTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SecretLockTransactionDTO</returns>
        public SecretLockTransactionDTO GetSecretLockTransactionDTO()
        {
            return (SecretLockTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedSecretLockTransactionDTO`. If the actual instance is not `EmbeddedSecretLockTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedSecretLockTransactionDTO</returns>
        public EmbeddedSecretLockTransactionDTO GetEmbeddedSecretLockTransactionDTO()
        {
            return (EmbeddedSecretLockTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SecretProofTransactionDTO`. If the actual instance is not `SecretProofTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SecretProofTransactionDTO</returns>
        public SecretProofTransactionDTO GetSecretProofTransactionDTO()
        {
            return (SecretProofTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedSecretProofTransactionDTO`. If the actual instance is not `EmbeddedSecretProofTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedSecretProofTransactionDTO</returns>
        public EmbeddedSecretProofTransactionDTO GetEmbeddedSecretProofTransactionDTO()
        {
            return (EmbeddedSecretProofTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AccountMetadataTransactionDTO`. If the actual instance is not `AccountMetadataTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccountMetadataTransactionDTO</returns>
        public AccountMetadataTransactionDTO GetAccountMetadataTransactionDTO()
        {
            return (AccountMetadataTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedAccountMetadataTransactionDTO`. If the actual instance is not `EmbeddedAccountMetadataTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedAccountMetadataTransactionDTO</returns>
        public EmbeddedAccountMetadataTransactionDTO GetEmbeddedAccountMetadataTransactionDTO()
        {
            return (EmbeddedAccountMetadataTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MosaicMetadataTransactionDTO`. If the actual instance is not `MosaicMetadataTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MosaicMetadataTransactionDTO</returns>
        public MosaicMetadataTransactionDTO GetMosaicMetadataTransactionDTO()
        {
            return (MosaicMetadataTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedMosaicMetadataTransactionDTO`. If the actual instance is not `EmbeddedMosaicMetadataTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedMosaicMetadataTransactionDTO</returns>
        public EmbeddedMosaicMetadataTransactionDTO GetEmbeddedMosaicMetadataTransactionDTO()
        {
            return (EmbeddedMosaicMetadataTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `NamespaceMetadataTransactionDTO`. If the actual instance is not `NamespaceMetadataTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NamespaceMetadataTransactionDTO</returns>
        public NamespaceMetadataTransactionDTO GetNamespaceMetadataTransactionDTO()
        {
            return (NamespaceMetadataTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedNamespaceMetadataTransactionDTO`. If the actual instance is not `EmbeddedNamespaceMetadataTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedNamespaceMetadataTransactionDTO</returns>
        public EmbeddedNamespaceMetadataTransactionDTO GetEmbeddedNamespaceMetadataTransactionDTO()
        {
            return (EmbeddedNamespaceMetadataTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MosaicDefinitionTransactionDTO`. If the actual instance is not `MosaicDefinitionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MosaicDefinitionTransactionDTO</returns>
        public MosaicDefinitionTransactionDTO GetMosaicDefinitionTransactionDTO()
        {
            return (MosaicDefinitionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedMosaicDefinitionTransactionDTO`. If the actual instance is not `EmbeddedMosaicDefinitionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedMosaicDefinitionTransactionDTO</returns>
        public EmbeddedMosaicDefinitionTransactionDTO GetEmbeddedMosaicDefinitionTransactionDTO()
        {
            return (EmbeddedMosaicDefinitionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MosaicSupplyChangeTransactionDTO`. If the actual instance is not `MosaicSupplyChangeTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MosaicSupplyChangeTransactionDTO</returns>
        public MosaicSupplyChangeTransactionDTO GetMosaicSupplyChangeTransactionDTO()
        {
            return (MosaicSupplyChangeTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedMosaicSupplyChangeTransactionDTO`. If the actual instance is not `EmbeddedMosaicSupplyChangeTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedMosaicSupplyChangeTransactionDTO</returns>
        public EmbeddedMosaicSupplyChangeTransactionDTO GetEmbeddedMosaicSupplyChangeTransactionDTO()
        {
            return (EmbeddedMosaicSupplyChangeTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MosaicSupplyRevocationTransactionDTO`. If the actual instance is not `MosaicSupplyRevocationTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MosaicSupplyRevocationTransactionDTO</returns>
        public MosaicSupplyRevocationTransactionDTO GetMosaicSupplyRevocationTransactionDTO()
        {
            return (MosaicSupplyRevocationTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedMosaicSupplyRevocationTransactionDTO`. If the actual instance is not `EmbeddedMosaicSupplyRevocationTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedMosaicSupplyRevocationTransactionDTO</returns>
        public EmbeddedMosaicSupplyRevocationTransactionDTO GetEmbeddedMosaicSupplyRevocationTransactionDTO()
        {
            return (EmbeddedMosaicSupplyRevocationTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `NamespaceRegistrationTransactionDTO`. If the actual instance is not `NamespaceRegistrationTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of NamespaceRegistrationTransactionDTO</returns>
        public NamespaceRegistrationTransactionDTO GetNamespaceRegistrationTransactionDTO()
        {
            return (NamespaceRegistrationTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedNamespaceRegistrationTransactionDTO`. If the actual instance is not `EmbeddedNamespaceRegistrationTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedNamespaceRegistrationTransactionDTO</returns>
        public EmbeddedNamespaceRegistrationTransactionDTO GetEmbeddedNamespaceRegistrationTransactionDTO()
        {
            return (EmbeddedNamespaceRegistrationTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AddressAliasTransactionDTO`. If the actual instance is not `AddressAliasTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AddressAliasTransactionDTO</returns>
        public AddressAliasTransactionDTO GetAddressAliasTransactionDTO()
        {
            return (AddressAliasTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedAddressAliasTransactionDTO`. If the actual instance is not `EmbeddedAddressAliasTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedAddressAliasTransactionDTO</returns>
        public EmbeddedAddressAliasTransactionDTO GetEmbeddedAddressAliasTransactionDTO()
        {
            return (EmbeddedAddressAliasTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MosaicAliasTransactionDTO`. If the actual instance is not `MosaicAliasTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MosaicAliasTransactionDTO</returns>
        public MosaicAliasTransactionDTO GetMosaicAliasTransactionDTO()
        {
            return (MosaicAliasTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedMosaicAliasTransactionDTO`. If the actual instance is not `EmbeddedMosaicAliasTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedMosaicAliasTransactionDTO</returns>
        public EmbeddedMosaicAliasTransactionDTO GetEmbeddedMosaicAliasTransactionDTO()
        {
            return (EmbeddedMosaicAliasTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MultisigAccountModificationTransactionDTO`. If the actual instance is not `MultisigAccountModificationTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MultisigAccountModificationTransactionDTO</returns>
        public MultisigAccountModificationTransactionDTO GetMultisigAccountModificationTransactionDTO()
        {
            return (MultisigAccountModificationTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedMultisigAccountModificationTransactionDTO`. If the actual instance is not `EmbeddedMultisigAccountModificationTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedMultisigAccountModificationTransactionDTO</returns>
        public EmbeddedMultisigAccountModificationTransactionDTO GetEmbeddedMultisigAccountModificationTransactionDTO()
        {
            return (EmbeddedMultisigAccountModificationTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AccountAddressRestrictionTransactionDTO`. If the actual instance is not `AccountAddressRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccountAddressRestrictionTransactionDTO</returns>
        public AccountAddressRestrictionTransactionDTO GetAccountAddressRestrictionTransactionDTO()
        {
            return (AccountAddressRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedAccountAddressRestrictionTransactionDTO`. If the actual instance is not `EmbeddedAccountAddressRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedAccountAddressRestrictionTransactionDTO</returns>
        public EmbeddedAccountAddressRestrictionTransactionDTO GetEmbeddedAccountAddressRestrictionTransactionDTO()
        {
            return (EmbeddedAccountAddressRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AccountMosaicRestrictionTransactionDTO`. If the actual instance is not `AccountMosaicRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccountMosaicRestrictionTransactionDTO</returns>
        public AccountMosaicRestrictionTransactionDTO GetAccountMosaicRestrictionTransactionDTO()
        {
            return (AccountMosaicRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedAccountMosaicRestrictionTransactionDTO`. If the actual instance is not `EmbeddedAccountMosaicRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedAccountMosaicRestrictionTransactionDTO</returns>
        public EmbeddedAccountMosaicRestrictionTransactionDTO GetEmbeddedAccountMosaicRestrictionTransactionDTO()
        {
            return (EmbeddedAccountMosaicRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AccountOperationRestrictionTransactionDTO`. If the actual instance is not `AccountOperationRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccountOperationRestrictionTransactionDTO</returns>
        public AccountOperationRestrictionTransactionDTO GetAccountOperationRestrictionTransactionDTO()
        {
            return (AccountOperationRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedAccountOperationRestrictionTransactionDTO`. If the actual instance is not `EmbeddedAccountOperationRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedAccountOperationRestrictionTransactionDTO</returns>
        public EmbeddedAccountOperationRestrictionTransactionDTO GetEmbeddedAccountOperationRestrictionTransactionDTO()
        {
            return (EmbeddedAccountOperationRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MosaicGlobalRestrictionTransactionDTO`. If the actual instance is not `MosaicGlobalRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MosaicGlobalRestrictionTransactionDTO</returns>
        public MosaicGlobalRestrictionTransactionDTO GetMosaicGlobalRestrictionTransactionDTO()
        {
            return (MosaicGlobalRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedMosaicGlobalRestrictionTransactionDTO`. If the actual instance is not `EmbeddedMosaicGlobalRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedMosaicGlobalRestrictionTransactionDTO</returns>
        public EmbeddedMosaicGlobalRestrictionTransactionDTO GetEmbeddedMosaicGlobalRestrictionTransactionDTO()
        {
            return (EmbeddedMosaicGlobalRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `MosaicAddressRestrictionTransactionDTO`. If the actual instance is not `MosaicAddressRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of MosaicAddressRestrictionTransactionDTO</returns>
        public MosaicAddressRestrictionTransactionDTO GetMosaicAddressRestrictionTransactionDTO()
        {
            return (MosaicAddressRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedMosaicAddressRestrictionTransactionDTO`. If the actual instance is not `EmbeddedMosaicAddressRestrictionTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedMosaicAddressRestrictionTransactionDTO</returns>
        public EmbeddedMosaicAddressRestrictionTransactionDTO GetEmbeddedMosaicAddressRestrictionTransactionDTO()
        {
            return (EmbeddedMosaicAddressRestrictionTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `TransferTransactionDTO`. If the actual instance is not `TransferTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of TransferTransactionDTO</returns>
        public TransferTransactionDTO GetTransferTransactionDTO()
        {
            return (TransferTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EmbeddedTransferTransactionDTO`. If the actual instance is not `EmbeddedTransferTransactionDTO`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EmbeddedTransferTransactionDTO</returns>
        public EmbeddedTransferTransactionDTO GetEmbeddedTransferTransactionDTO()
        {
            return (EmbeddedTransferTransactionDTO)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionInfoDTOTransaction {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, TransactionInfoDTOTransaction.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of TransactionInfoDTOTransaction
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of TransactionInfoDTOTransaction</returns>
        public static TransactionInfoDTOTransaction FromJson(string jsonString)
        {
            TransactionInfoDTOTransaction newTransactionInfoDTOTransaction = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newTransactionInfoDTOTransaction;
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<AccountAddressRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccountAddressRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<AccountKeyLinkTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccountKeyLinkTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<AccountMetadataTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccountMetadataTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<AccountMosaicRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccountMosaicRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<AccountOperationRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccountOperationRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<AddressAliasTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AddressAliasTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<AggregateTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AggregateTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<AggregateTransactionExtendedDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AggregateTransactionExtendedDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedAccountAddressRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedAccountAddressRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedAccountKeyLinkTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedAccountKeyLinkTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedAccountMetadataTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedAccountMetadataTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedAccountMosaicRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedAccountMosaicRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedAccountOperationRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedAccountOperationRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedAddressAliasTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedAddressAliasTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedHashLockTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedHashLockTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedMosaicAddressRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedMosaicAddressRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedMosaicAliasTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedMosaicAliasTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedMosaicDefinitionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedMosaicDefinitionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedMosaicGlobalRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedMosaicGlobalRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedMosaicMetadataTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedMosaicMetadataTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedMosaicSupplyChangeTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedMosaicSupplyChangeTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedMosaicSupplyRevocationTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedMosaicSupplyRevocationTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedMultisigAccountModificationTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedMultisigAccountModificationTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedNamespaceMetadataTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedNamespaceMetadataTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedNamespaceRegistrationTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedNamespaceRegistrationTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedNodeKeyLinkTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedNodeKeyLinkTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedSecretLockTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedSecretLockTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedSecretProofTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedSecretProofTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedTransferTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedTransferTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedVotingKeyLinkTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedVotingKeyLinkTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<EmbeddedVrfKeyLinkTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EmbeddedVrfKeyLinkTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<HashLockTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into HashLockTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<MosaicAddressRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MosaicAddressRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<MosaicAliasTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MosaicAliasTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<MosaicDefinitionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MosaicDefinitionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<MosaicGlobalRestrictionTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MosaicGlobalRestrictionTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<MosaicMetadataTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MosaicMetadataTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<MosaicSupplyChangeTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MosaicSupplyChangeTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<MosaicSupplyRevocationTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MosaicSupplyRevocationTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<MultisigAccountModificationTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into MultisigAccountModificationTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<NamespaceMetadataTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NamespaceMetadataTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<NamespaceRegistrationTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NamespaceRegistrationTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<NodeKeyLinkTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into NodeKeyLinkTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<SecretLockTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SecretLockTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<SecretProofTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SecretProofTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<TransferTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into TransferTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<VotingKeyLinkTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VotingKeyLinkTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newTransactionInfoDTOTransaction = new TransactionInfoDTOTransaction(JsonConvert.DeserializeObject<VrfKeyLinkTransactionDTO>(jsonString, TransactionInfoDTOTransaction.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newTransactionInfoDTOTransaction;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into VrfKeyLinkTransactionDTO: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for TransactionInfoDTOTransaction
    /// </summary>
    public class TransactionInfoDTOTransactionJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(TransactionInfoDTOTransaction).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return TransactionInfoDTOTransaction.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
