/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using SymbolRestClient.Client;
using SymbolRestClient.Model;

namespace SymbolRestClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptRoutesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get receipts address resolution statements
        /// </summary>
        /// <remarks>
        /// Gets an array of address resolution statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResolutionStatementPage</returns>
        ResolutionStatementPage SearchAddressResolutionStatements(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);

        /// <summary>
        /// Get receipts address resolution statements
        /// </summary>
        /// <remarks>
        /// Gets an array of address resolution statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResolutionStatementPage</returns>
        ApiResponse<ResolutionStatementPage> SearchAddressResolutionStatementsWithHttpInfo(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);
        /// <summary>
        /// Get receipts mosaic resolution statements
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaic resolution statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResolutionStatementPage</returns>
        ResolutionStatementPage SearchMosaicResolutionStatements(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);

        /// <summary>
        /// Get receipts mosaic resolution statements
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaic resolution statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResolutionStatementPage</returns>
        ApiResponse<ResolutionStatementPage> SearchMosaicResolutionStatementsWithHttpInfo(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);
        /// <summary>
        /// Search transaction statements
        /// </summary>
        /// <remarks>
        /// Gets an array of transaction statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="receiptType">Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="senderAddress">Filter by address sending mosaics. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="artifactId">Mosaic or namespace identifier (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionStatementPage</returns>
        TransactionStatementPage SearchReceipts(string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), List<ReceiptTypeEnum>? receiptType = default(List<ReceiptTypeEnum>?), string? recipientAddress = default(string?), string? senderAddress = default(string?), string? targetAddress = default(string?), string? artifactId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);

        /// <summary>
        /// Search transaction statements
        /// </summary>
        /// <remarks>
        /// Gets an array of transaction statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="receiptType">Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="senderAddress">Filter by address sending mosaics. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="artifactId">Mosaic or namespace identifier (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionStatementPage</returns>
        ApiResponse<TransactionStatementPage> SearchReceiptsWithHttpInfo(string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), List<ReceiptTypeEnum>? receiptType = default(List<ReceiptTypeEnum>?), string? recipientAddress = default(string?), string? senderAddress = default(string?), string? targetAddress = default(string?), string? artifactId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptRoutesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get receipts address resolution statements
        /// </summary>
        /// <remarks>
        /// Gets an array of address resolution statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResolutionStatementPage</returns>
        System.Threading.Tasks.Task<ResolutionStatementPage> SearchAddressResolutionStatementsAsync(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get receipts address resolution statements
        /// </summary>
        /// <remarks>
        /// Gets an array of address resolution statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResolutionStatementPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResolutionStatementPage>> SearchAddressResolutionStatementsWithHttpInfoAsync(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get receipts mosaic resolution statements
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaic resolution statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResolutionStatementPage</returns>
        System.Threading.Tasks.Task<ResolutionStatementPage> SearchMosaicResolutionStatementsAsync(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get receipts mosaic resolution statements
        /// </summary>
        /// <remarks>
        /// Gets an array of mosaic resolution statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResolutionStatementPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResolutionStatementPage>> SearchMosaicResolutionStatementsWithHttpInfoAsync(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search transaction statements
        /// </summary>
        /// <remarks>
        /// Gets an array of transaction statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="receiptType">Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="senderAddress">Filter by address sending mosaics. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="artifactId">Mosaic or namespace identifier (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionStatementPage</returns>
        System.Threading.Tasks.Task<TransactionStatementPage> SearchReceiptsAsync(string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), List<ReceiptTypeEnum>? receiptType = default(List<ReceiptTypeEnum>?), string? recipientAddress = default(string?), string? senderAddress = default(string?), string? targetAddress = default(string?), string? artifactId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search transaction statements
        /// </summary>
        /// <remarks>
        /// Gets an array of transaction statements.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="receiptType">Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="senderAddress">Filter by address sending mosaics. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="artifactId">Mosaic or namespace identifier (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionStatementPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionStatementPage>> SearchReceiptsWithHttpInfoAsync(string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), List<ReceiptTypeEnum>? receiptType = default(List<ReceiptTypeEnum>?), string? recipientAddress = default(string?), string? senderAddress = default(string?), string? targetAddress = default(string?), string? artifactId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceiptRoutesApi : IReceiptRoutesApiSync, IReceiptRoutesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReceiptRoutesApi : IReceiptRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceiptRoutesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceiptRoutesApi(string basePath)
        {
            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReceiptRoutesApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptRoutesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReceiptRoutesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get receipts address resolution statements Gets an array of address resolution statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResolutionStatementPage</returns>
        public ResolutionStatementPage SearchAddressResolutionStatements(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            ApiResponse<ResolutionStatementPage> localVarResponse = SearchAddressResolutionStatementsWithHttpInfo(height, pageSize, pageNumber, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get receipts address resolution statements Gets an array of address resolution statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResolutionStatementPage</returns>
        public ApiResponse<ResolutionStatementPage> SearchAddressResolutionStatementsWithHttpInfo(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ReceiptRoutesApi.SearchAddressResolutionStatements";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResolutionStatementPage>("/statements/resolutions/address", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAddressResolutionStatements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get receipts address resolution statements Gets an array of address resolution statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResolutionStatementPage</returns>
        public async System.Threading.Tasks.Task<ResolutionStatementPage> SearchAddressResolutionStatementsAsync(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ResolutionStatementPage> localVarResponse = await SearchAddressResolutionStatementsWithHttpInfoAsync(height, pageSize, pageNumber, offset, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get receipts address resolution statements Gets an array of address resolution statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResolutionStatementPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResolutionStatementPage>> SearchAddressResolutionStatementsWithHttpInfoAsync(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ReceiptRoutesApi.SearchAddressResolutionStatements";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResolutionStatementPage>("/statements/resolutions/address", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchAddressResolutionStatements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get receipts mosaic resolution statements Gets an array of mosaic resolution statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResolutionStatementPage</returns>
        public ResolutionStatementPage SearchMosaicResolutionStatements(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            ApiResponse<ResolutionStatementPage> localVarResponse = SearchMosaicResolutionStatementsWithHttpInfo(height, pageSize, pageNumber, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get receipts mosaic resolution statements Gets an array of mosaic resolution statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResolutionStatementPage</returns>
        public ApiResponse<ResolutionStatementPage> SearchMosaicResolutionStatementsWithHttpInfo(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ReceiptRoutesApi.SearchMosaicResolutionStatements";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResolutionStatementPage>("/statements/resolutions/mosaic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMosaicResolutionStatements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get receipts mosaic resolution statements Gets an array of mosaic resolution statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResolutionStatementPage</returns>
        public async System.Threading.Tasks.Task<ResolutionStatementPage> SearchMosaicResolutionStatementsAsync(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ResolutionStatementPage> localVarResponse = await SearchMosaicResolutionStatementsWithHttpInfoAsync(height, pageSize, pageNumber, offset, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get receipts mosaic resolution statements Gets an array of mosaic resolution statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResolutionStatementPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResolutionStatementPage>> SearchMosaicResolutionStatementsWithHttpInfoAsync(string? height = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ReceiptRoutesApi.SearchMosaicResolutionStatements";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ResolutionStatementPage>("/statements/resolutions/mosaic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMosaicResolutionStatements", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search transaction statements Gets an array of transaction statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="receiptType">Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="senderAddress">Filter by address sending mosaics. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="artifactId">Mosaic or namespace identifier (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionStatementPage</returns>
        public TransactionStatementPage SearchReceipts(string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), List<ReceiptTypeEnum>? receiptType = default(List<ReceiptTypeEnum>?), string? recipientAddress = default(string?), string? senderAddress = default(string?), string? targetAddress = default(string?), string? artifactId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            ApiResponse<TransactionStatementPage> localVarResponse = SearchReceiptsWithHttpInfo(height, fromHeight, toHeight, receiptType, recipientAddress, senderAddress, targetAddress, artifactId, pageSize, pageNumber, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search transaction statements Gets an array of transaction statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="receiptType">Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="senderAddress">Filter by address sending mosaics. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="artifactId">Mosaic or namespace identifier (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionStatementPage</returns>
        public ApiResponse<TransactionStatementPage> SearchReceiptsWithHttpInfo(string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), List<ReceiptTypeEnum>? receiptType = default(List<ReceiptTypeEnum>?), string? recipientAddress = default(string?), string? senderAddress = default(string?), string? targetAddress = default(string?), string? artifactId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }
            if (receiptType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "receiptType", receiptType));
            }
            if (recipientAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "recipientAddress", recipientAddress));
            }
            if (senderAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "senderAddress", senderAddress));
            }
            if (targetAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "targetAddress", targetAddress));
            }
            if (artifactId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "artifactId", artifactId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ReceiptRoutesApi.SearchReceipts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionStatementPage>("/statements/transaction", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchReceipts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search transaction statements Gets an array of transaction statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="receiptType">Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="senderAddress">Filter by address sending mosaics. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="artifactId">Mosaic or namespace identifier (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionStatementPage</returns>
        public async System.Threading.Tasks.Task<TransactionStatementPage> SearchReceiptsAsync(string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), List<ReceiptTypeEnum>? receiptType = default(List<ReceiptTypeEnum>?), string? recipientAddress = default(string?), string? senderAddress = default(string?), string? targetAddress = default(string?), string? artifactId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TransactionStatementPage> localVarResponse = await SearchReceiptsWithHttpInfoAsync(height, fromHeight, toHeight, receiptType, recipientAddress, senderAddress, targetAddress, artifactId, pageSize, pageNumber, offset, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search transaction statements Gets an array of transaction statements.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="receiptType">Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="senderAddress">Filter by address sending mosaics. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="artifactId">Mosaic or namespace identifier (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionStatementPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionStatementPage>> SearchReceiptsWithHttpInfoAsync(string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), List<ReceiptTypeEnum>? receiptType = default(List<ReceiptTypeEnum>?), string? recipientAddress = default(string?), string? senderAddress = default(string?), string? targetAddress = default(string?), string? artifactId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }
            if (receiptType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "receiptType", receiptType));
            }
            if (recipientAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "recipientAddress", recipientAddress));
            }
            if (senderAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "senderAddress", senderAddress));
            }
            if (targetAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "targetAddress", targetAddress));
            }
            if (artifactId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "artifactId", artifactId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ReceiptRoutesApi.SearchReceipts";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionStatementPage>("/statements/transaction", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchReceipts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
