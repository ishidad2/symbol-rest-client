/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SymbolRestClient.Client;
using SymbolRestClient.Model;

namespace SymbolRestClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamespaceRoutesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get readable names for a set of accountIds
        /// </summary>
        /// <remarks>
        /// Returns friendly names for accounts.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsNamesDTO</returns>
        AccountsNamesDTO GetAccountsNames(Addresses addresses, int operationIndex = 0);

        /// <summary>
        /// Get readable names for a set of accountIds
        /// </summary>
        /// <remarks>
        /// Returns friendly names for accounts.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsNamesDTO</returns>
        ApiResponse<AccountsNamesDTO> GetAccountsNamesWithHttpInfo(Addresses addresses, int operationIndex = 0);
        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns friendly names for mosaics.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MosaicsNamesDTO</returns>
        MosaicsNamesDTO GetMosaicsNames(MosaicIds mosaicIds, int operationIndex = 0);

        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns friendly names for mosaics.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MosaicsNamesDTO</returns>
        ApiResponse<MosaicsNamesDTO> GetMosaicsNamesWithHttpInfo(MosaicIds mosaicIds, int operationIndex = 0);
        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Gets the namespace for a given namespace identifier.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamespaceInfoDTO</returns>
        NamespaceInfoDTO GetNamespace(string namespaceId, int operationIndex = 0);

        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Gets the namespace for a given namespace identifier.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamespaceInfoDTO</returns>
        ApiResponse<NamespaceInfoDTO> GetNamespaceWithHttpInfo(string namespaceId, int operationIndex = 0);
        /// <summary>
        /// Get namespace merkle information
        /// </summary>
        /// <remarks>
        /// Gets the namespace merkle for a given namespace identifier.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        MerkleStateInfoDTO GetNamespaceMerkle(string namespaceId, int operationIndex = 0);

        /// <summary>
        /// Get namespace merkle information
        /// </summary>
        /// <remarks>
        /// Gets the namespace merkle for a given namespace identifier.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        ApiResponse<MerkleStateInfoDTO> GetNamespaceMerkleWithHttpInfo(string namespaceId, int operationIndex = 0);
        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns friendly names for namespaces.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NamespaceNameDTO&gt;</returns>
        List<NamespaceNameDTO> GetNamespacesNames(NamespaceIds namespaceIds, int operationIndex = 0);

        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns friendly names for namespaces.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NamespaceNameDTO&gt;</returns>
        ApiResponse<List<NamespaceNameDTO>> GetNamespacesNamesWithHttpInfo(NamespaceIds namespaceIds, int operationIndex = 0);
        /// <summary>
        /// Search namespaces
        /// </summary>
        /// <remarks>
        /// Gets an array of namespaces.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamespacePage</returns>
        NamespacePage SearchNamespaces(string? ownerAddress = default(string?), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string? level0 = default(string?), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);

        /// <summary>
        /// Search namespaces
        /// </summary>
        /// <remarks>
        /// Gets an array of namespaces.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamespacePage</returns>
        ApiResponse<NamespacePage> SearchNamespacesWithHttpInfo(string? ownerAddress = default(string?), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string? level0 = default(string?), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamespaceRoutesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get readable names for a set of accountIds
        /// </summary>
        /// <remarks>
        /// Returns friendly names for accounts.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsNamesDTO</returns>
        System.Threading.Tasks.Task<AccountsNamesDTO> GetAccountsNamesAsync(Addresses addresses, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get readable names for a set of accountIds
        /// </summary>
        /// <remarks>
        /// Returns friendly names for accounts.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsNamesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountsNamesDTO>> GetAccountsNamesWithHttpInfoAsync(Addresses addresses, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns friendly names for mosaics.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MosaicsNamesDTO</returns>
        System.Threading.Tasks.Task<MosaicsNamesDTO> GetMosaicsNamesAsync(MosaicIds mosaicIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns friendly names for mosaics.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MosaicsNamesDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MosaicsNamesDTO>> GetMosaicsNamesWithHttpInfoAsync(MosaicIds mosaicIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Gets the namespace for a given namespace identifier.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamespaceInfoDTO</returns>
        System.Threading.Tasks.Task<NamespaceInfoDTO> GetNamespaceAsync(string namespaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Gets the namespace for a given namespace identifier.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamespaceInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamespaceInfoDTO>> GetNamespaceWithHttpInfoAsync(string namespaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get namespace merkle information
        /// </summary>
        /// <remarks>
        /// Gets the namespace merkle for a given namespace identifier.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        System.Threading.Tasks.Task<MerkleStateInfoDTO> GetNamespaceMerkleAsync(string namespaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get namespace merkle information
        /// </summary>
        /// <remarks>
        /// Gets the namespace merkle for a given namespace identifier.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetNamespaceMerkleWithHttpInfoAsync(string namespaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns friendly names for namespaces.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NamespaceNameDTO&gt;</returns>
        System.Threading.Tasks.Task<List<NamespaceNameDTO>> GetNamespacesNamesAsync(NamespaceIds namespaceIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns friendly names for namespaces.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceNameDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NamespaceNameDTO>>> GetNamespacesNamesWithHttpInfoAsync(NamespaceIds namespaceIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search namespaces
        /// </summary>
        /// <remarks>
        /// Gets an array of namespaces.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamespacePage</returns>
        System.Threading.Tasks.Task<NamespacePage> SearchNamespacesAsync(string? ownerAddress = default(string?), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string? level0 = default(string?), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search namespaces
        /// </summary>
        /// <remarks>
        /// Gets an array of namespaces.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamespacePage)</returns>
        System.Threading.Tasks.Task<ApiResponse<NamespacePage>> SearchNamespacesWithHttpInfoAsync(string? ownerAddress = default(string?), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string? level0 = default(string?), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INamespaceRoutesApi : INamespaceRoutesApiSync, INamespaceRoutesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NamespaceRoutesApi : INamespaceRoutesApi
    {
        private SymbolRestClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NamespaceRoutesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NamespaceRoutesApi(string basePath)
        {
            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                SymbolRestClient.Client.GlobalConfiguration.Instance,
                new SymbolRestClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SymbolRestClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SymbolRestClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NamespaceRoutesApi(SymbolRestClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                SymbolRestClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SymbolRestClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SymbolRestClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NamespaceRoutesApi(SymbolRestClient.Client.ISynchronousClient client, SymbolRestClient.Client.IAsynchronousClient asyncClient, SymbolRestClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SymbolRestClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SymbolRestClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SymbolRestClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymbolRestClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get readable names for a set of accountIds Returns friendly names for accounts.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountsNamesDTO</returns>
        public AccountsNamesDTO GetAccountsNames(Addresses addresses, int operationIndex = 0)
        {
            SymbolRestClient.Client.ApiResponse<AccountsNamesDTO> localVarResponse = GetAccountsNamesWithHttpInfo(addresses);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of accountIds Returns friendly names for accounts.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountsNamesDTO</returns>
        public SymbolRestClient.Client.ApiResponse<AccountsNamesDTO> GetAccountsNamesWithHttpInfo(Addresses addresses, int operationIndex = 0)
        {
            // verify the required parameter 'addresses' is set
            if (addresses == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'addresses' when calling NamespaceRoutesApi->GetAccountsNames");
            }

            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addresses;

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetAccountsNames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountsNamesDTO>("/namespaces/account/names", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountsNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get readable names for a set of accountIds Returns friendly names for accounts.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountsNamesDTO</returns>
        public async System.Threading.Tasks.Task<AccountsNamesDTO> GetAccountsNamesAsync(Addresses addresses, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SymbolRestClient.Client.ApiResponse<AccountsNamesDTO> localVarResponse = await GetAccountsNamesWithHttpInfoAsync(addresses, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of accountIds Returns friendly names for accounts.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addresses"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountsNamesDTO)</returns>
        public async System.Threading.Tasks.Task<SymbolRestClient.Client.ApiResponse<AccountsNamesDTO>> GetAccountsNamesWithHttpInfoAsync(Addresses addresses, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addresses' is set
            if (addresses == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'addresses' when calling NamespaceRoutesApi->GetAccountsNames");
            }


            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addresses;

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetAccountsNames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountsNamesDTO>("/namespaces/account/names", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountsNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns friendly names for mosaics.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MosaicsNamesDTO</returns>
        public MosaicsNamesDTO GetMosaicsNames(MosaicIds mosaicIds, int operationIndex = 0)
        {
            SymbolRestClient.Client.ApiResponse<MosaicsNamesDTO> localVarResponse = GetMosaicsNamesWithHttpInfo(mosaicIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns friendly names for mosaics.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MosaicsNamesDTO</returns>
        public SymbolRestClient.Client.ApiResponse<MosaicsNamesDTO> GetMosaicsNamesWithHttpInfo(MosaicIds mosaicIds, int operationIndex = 0)
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'mosaicIds' when calling NamespaceRoutesApi->GetMosaicsNames");
            }

            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mosaicIds;

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetMosaicsNames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MosaicsNamesDTO>("/namespaces/mosaic/names", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMosaicsNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns friendly names for mosaics.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MosaicsNamesDTO</returns>
        public async System.Threading.Tasks.Task<MosaicsNamesDTO> GetMosaicsNamesAsync(MosaicIds mosaicIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SymbolRestClient.Client.ApiResponse<MosaicsNamesDTO> localVarResponse = await GetMosaicsNamesWithHttpInfoAsync(mosaicIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns friendly names for mosaics.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MosaicsNamesDTO)</returns>
        public async System.Threading.Tasks.Task<SymbolRestClient.Client.ApiResponse<MosaicsNamesDTO>> GetMosaicsNamesWithHttpInfoAsync(MosaicIds mosaicIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'mosaicIds' when calling NamespaceRoutesApi->GetMosaicsNames");
            }


            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = mosaicIds;

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetMosaicsNames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MosaicsNamesDTO>("/namespaces/mosaic/names", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMosaicsNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get namespace information Gets the namespace for a given namespace identifier.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamespaceInfoDTO</returns>
        public NamespaceInfoDTO GetNamespace(string namespaceId, int operationIndex = 0)
        {
            SymbolRestClient.Client.ApiResponse<NamespaceInfoDTO> localVarResponse = GetNamespaceWithHttpInfo(namespaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get namespace information Gets the namespace for a given namespace identifier.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamespaceInfoDTO</returns>
        public SymbolRestClient.Client.ApiResponse<NamespaceInfoDTO> GetNamespaceWithHttpInfo(string namespaceId, int operationIndex = 0)
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespace");
            }

            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespaceId", SymbolRestClient.Client.ClientUtils.ParameterToString(namespaceId)); // path parameter

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetNamespace";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<NamespaceInfoDTO>("/namespaces/{namespaceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNamespace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get namespace information Gets the namespace for a given namespace identifier.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamespaceInfoDTO</returns>
        public async System.Threading.Tasks.Task<NamespaceInfoDTO> GetNamespaceAsync(string namespaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SymbolRestClient.Client.ApiResponse<NamespaceInfoDTO> localVarResponse = await GetNamespaceWithHttpInfoAsync(namespaceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get namespace information Gets the namespace for a given namespace identifier.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamespaceInfoDTO)</returns>
        public async System.Threading.Tasks.Task<SymbolRestClient.Client.ApiResponse<NamespaceInfoDTO>> GetNamespaceWithHttpInfoAsync(string namespaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespace");
            }


            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespaceId", SymbolRestClient.Client.ClientUtils.ParameterToString(namespaceId)); // path parameter

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetNamespace";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NamespaceInfoDTO>("/namespaces/{namespaceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNamespace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get namespace merkle information Gets the namespace merkle for a given namespace identifier.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        public MerkleStateInfoDTO GetNamespaceMerkle(string namespaceId, int operationIndex = 0)
        {
            SymbolRestClient.Client.ApiResponse<MerkleStateInfoDTO> localVarResponse = GetNamespaceMerkleWithHttpInfo(namespaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get namespace merkle information Gets the namespace merkle for a given namespace identifier.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        public SymbolRestClient.Client.ApiResponse<MerkleStateInfoDTO> GetNamespaceMerkleWithHttpInfo(string namespaceId, int operationIndex = 0)
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespaceMerkle");
            }

            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespaceId", SymbolRestClient.Client.ClientUtils.ParameterToString(namespaceId)); // path parameter

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetNamespaceMerkle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MerkleStateInfoDTO>("/namespaces/{namespaceId}/merkle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNamespaceMerkle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get namespace merkle information Gets the namespace merkle for a given namespace identifier.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        public async System.Threading.Tasks.Task<MerkleStateInfoDTO> GetNamespaceMerkleAsync(string namespaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SymbolRestClient.Client.ApiResponse<MerkleStateInfoDTO> localVarResponse = await GetNamespaceMerkleWithHttpInfoAsync(namespaceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get namespace merkle information Gets the namespace merkle for a given namespace identifier.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">Namespace identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        public async System.Threading.Tasks.Task<SymbolRestClient.Client.ApiResponse<MerkleStateInfoDTO>> GetNamespaceMerkleWithHttpInfoAsync(string namespaceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespaceMerkle");
            }


            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("namespaceId", SymbolRestClient.Client.ClientUtils.ParameterToString(namespaceId)); // path parameter

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetNamespaceMerkle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MerkleStateInfoDTO>("/namespaces/{namespaceId}/merkle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNamespaceMerkle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns friendly names for namespaces.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;NamespaceNameDTO&gt;</returns>
        public List<NamespaceNameDTO> GetNamespacesNames(NamespaceIds namespaceIds, int operationIndex = 0)
        {
            SymbolRestClient.Client.ApiResponse<List<NamespaceNameDTO>> localVarResponse = GetNamespacesNamesWithHttpInfo(namespaceIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns friendly names for namespaces.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;NamespaceNameDTO&gt;</returns>
        public SymbolRestClient.Client.ApiResponse<List<NamespaceNameDTO>> GetNamespacesNamesWithHttpInfo(NamespaceIds namespaceIds, int operationIndex = 0)
        {
            // verify the required parameter 'namespaceIds' is set
            if (namespaceIds == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'namespaceIds' when calling NamespaceRoutesApi->GetNamespacesNames");
            }

            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = namespaceIds;

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetNamespacesNames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<NamespaceNameDTO>>("/namespaces/names", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNamespacesNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns friendly names for namespaces.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;NamespaceNameDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<NamespaceNameDTO>> GetNamespacesNamesAsync(NamespaceIds namespaceIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SymbolRestClient.Client.ApiResponse<List<NamespaceNameDTO>> localVarResponse = await GetNamespacesNamesWithHttpInfoAsync(namespaceIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns friendly names for namespaces.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceNameDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<SymbolRestClient.Client.ApiResponse<List<NamespaceNameDTO>>> GetNamespacesNamesWithHttpInfoAsync(NamespaceIds namespaceIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'namespaceIds' is set
            if (namespaceIds == null)
            {
                throw new SymbolRestClient.Client.ApiException(400, "Missing required parameter 'namespaceIds' when calling NamespaceRoutesApi->GetNamespacesNames");
            }


            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = namespaceIds;

            localVarRequestOptions.Operation = "NamespaceRoutesApi.GetNamespacesNames";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<NamespaceNameDTO>>("/namespaces/names", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNamespacesNames", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search namespaces Gets an array of namespaces.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NamespacePage</returns>
        public NamespacePage SearchNamespaces(string? ownerAddress = default(string?), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string? level0 = default(string?), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            SymbolRestClient.Client.ApiResponse<NamespacePage> localVarResponse = SearchNamespacesWithHttpInfo(ownerAddress, registrationType, level0, aliasType, pageSize, pageNumber, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search namespaces Gets an array of namespaces.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NamespacePage</returns>
        public SymbolRestClient.Client.ApiResponse<NamespacePage> SearchNamespacesWithHttpInfo(string? ownerAddress = default(string?), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string? level0 = default(string?), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ownerAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "ownerAddress", ownerAddress));
            }
            if (registrationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "registrationType", registrationType));
            }
            if (level0 != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "level0", level0));
            }
            if (aliasType != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "aliasType", aliasType));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "NamespaceRoutesApi.SearchNamespaces";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<NamespacePage>("/namespaces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNamespaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search namespaces Gets an array of namespaces.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NamespacePage</returns>
        public async System.Threading.Tasks.Task<NamespacePage> SearchNamespacesAsync(string? ownerAddress = default(string?), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string? level0 = default(string?), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SymbolRestClient.Client.ApiResponse<NamespacePage> localVarResponse = await SearchNamespacesWithHttpInfoAsync(ownerAddress, registrationType, level0, aliasType, pageSize, pageNumber, offset, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search namespaces Gets an array of namespaces.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerAddress">Filter by owner address. (optional)</param>
        /// <param name="registrationType">Filter by registration type. (optional)</param>
        /// <param name="level0">Filter by root namespace. (optional)</param>
        /// <param name="aliasType">Filter by alias type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NamespacePage)</returns>
        public async System.Threading.Tasks.Task<SymbolRestClient.Client.ApiResponse<NamespacePage>> SearchNamespacesWithHttpInfoAsync(string? ownerAddress = default(string?), NamespaceRegistrationTypeEnum? registrationType = default(NamespaceRegistrationTypeEnum?), string? level0 = default(string?), AliasTypeEnum? aliasType = default(AliasTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SymbolRestClient.Client.RequestOptions localVarRequestOptions = new SymbolRestClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SymbolRestClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SymbolRestClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ownerAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "ownerAddress", ownerAddress));
            }
            if (registrationType != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "registrationType", registrationType));
            }
            if (level0 != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "level0", level0));
            }
            if (aliasType != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "aliasType", aliasType));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(SymbolRestClient.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "NamespaceRoutesApi.SearchNamespaces";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NamespacePage>("/namespaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNamespaces", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
