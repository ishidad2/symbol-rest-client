/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using SymbolRestClient.Client;
using SymbolRestClient.Model;

namespace SymbolRestClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinalizationRoutesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get finalization proof
        /// </summary>
        /// <remarks>
        /// Gets finalization proof for the greatest height associated with the given epoch.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="epoch">Finalization epoch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FinalizationProofDTO</returns>
        FinalizationProofDTO GetFinalizationProofAtEpoch(long epoch, int operationIndex = 0);

        /// <summary>
        /// Get finalization proof
        /// </summary>
        /// <remarks>
        /// Gets finalization proof for the greatest height associated with the given epoch.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="epoch">Finalization epoch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FinalizationProofDTO</returns>
        ApiResponse<FinalizationProofDTO> GetFinalizationProofAtEpochWithHttpInfo(long epoch, int operationIndex = 0);
        /// <summary>
        /// Get finalization proof
        /// </summary>
        /// <remarks>
        /// Gets finalization proof at the given height.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FinalizationProofDTO</returns>
        FinalizationProofDTO GetFinalizationProofAtHeight(string height, int operationIndex = 0);

        /// <summary>
        /// Get finalization proof
        /// </summary>
        /// <remarks>
        /// Gets finalization proof at the given height.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FinalizationProofDTO</returns>
        ApiResponse<FinalizationProofDTO> GetFinalizationProofAtHeightWithHttpInfo(string height, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinalizationRoutesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get finalization proof
        /// </summary>
        /// <remarks>
        /// Gets finalization proof for the greatest height associated with the given epoch.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="epoch">Finalization epoch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinalizationProofDTO</returns>
        System.Threading.Tasks.Task<FinalizationProofDTO> GetFinalizationProofAtEpochAsync(long epoch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get finalization proof
        /// </summary>
        /// <remarks>
        /// Gets finalization proof for the greatest height associated with the given epoch.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="epoch">Finalization epoch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinalizationProofDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinalizationProofDTO>> GetFinalizationProofAtEpochWithHttpInfoAsync(long epoch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get finalization proof
        /// </summary>
        /// <remarks>
        /// Gets finalization proof at the given height.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinalizationProofDTO</returns>
        System.Threading.Tasks.Task<FinalizationProofDTO> GetFinalizationProofAtHeightAsync(string height, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get finalization proof
        /// </summary>
        /// <remarks>
        /// Gets finalization proof at the given height.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinalizationProofDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FinalizationProofDTO>> GetFinalizationProofAtHeightWithHttpInfoAsync(string height, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinalizationRoutesApi : IFinalizationRoutesApiSync, IFinalizationRoutesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FinalizationRoutesApi : IFinalizationRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FinalizationRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinalizationRoutesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinalizationRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinalizationRoutesApi(string basePath)
        {
            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinalizationRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FinalizationRoutesApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinalizationRoutesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FinalizationRoutesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get finalization proof Gets finalization proof for the greatest height associated with the given epoch.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="epoch">Finalization epoch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FinalizationProofDTO</returns>
        public FinalizationProofDTO GetFinalizationProofAtEpoch(long epoch, int operationIndex = 0)
        {
            ApiResponse<FinalizationProofDTO> localVarResponse = GetFinalizationProofAtEpochWithHttpInfo(epoch);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get finalization proof Gets finalization proof for the greatest height associated with the given epoch.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="epoch">Finalization epoch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FinalizationProofDTO</returns>
        public ApiResponse<FinalizationProofDTO> GetFinalizationProofAtEpochWithHttpInfo(long epoch, int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("epoch", ClientUtils.ParameterToString(epoch)); // path parameter

            localVarRequestOptions.Operation = "FinalizationRoutesApi.GetFinalizationProofAtEpoch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<FinalizationProofDTO>("/finalization/proof/epoch/{epoch}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinalizationProofAtEpoch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get finalization proof Gets finalization proof for the greatest height associated with the given epoch.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="epoch">Finalization epoch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinalizationProofDTO</returns>
        public async System.Threading.Tasks.Task<FinalizationProofDTO> GetFinalizationProofAtEpochAsync(long epoch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FinalizationProofDTO> localVarResponse = await GetFinalizationProofAtEpochWithHttpInfoAsync(epoch, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get finalization proof Gets finalization proof for the greatest height associated with the given epoch.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="epoch">Finalization epoch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinalizationProofDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FinalizationProofDTO>> GetFinalizationProofAtEpochWithHttpInfoAsync(long epoch, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("epoch", ClientUtils.ParameterToString(epoch)); // path parameter

            localVarRequestOptions.Operation = "FinalizationRoutesApi.GetFinalizationProofAtEpoch";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FinalizationProofDTO>("/finalization/proof/epoch/{epoch}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinalizationProofAtEpoch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get finalization proof Gets finalization proof at the given height.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FinalizationProofDTO</returns>
        public FinalizationProofDTO GetFinalizationProofAtHeight(string height, int operationIndex = 0)
        {
            ApiResponse<FinalizationProofDTO> localVarResponse = GetFinalizationProofAtHeightWithHttpInfo(height);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get finalization proof Gets finalization proof at the given height.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FinalizationProofDTO</returns>
        public ApiResponse<FinalizationProofDTO> GetFinalizationProofAtHeightWithHttpInfo(string height, int operationIndex = 0)
        {
            // verify the required parameter 'height' is set
            if (height == null)
            {
                throw new ApiException(400, "Missing required parameter 'height' when calling FinalizationRoutesApi->GetFinalizationProofAtHeight");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("height", ClientUtils.ParameterToString(height)); // path parameter

            localVarRequestOptions.Operation = "FinalizationRoutesApi.GetFinalizationProofAtHeight";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<FinalizationProofDTO>("/finalization/proof/height/{height}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinalizationProofAtHeight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get finalization proof Gets finalization proof at the given height.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FinalizationProofDTO</returns>
        public async System.Threading.Tasks.Task<FinalizationProofDTO> GetFinalizationProofAtHeightAsync(string height, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FinalizationProofDTO> localVarResponse = await GetFinalizationProofAtHeightWithHttpInfoAsync(height, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get finalization proof Gets finalization proof at the given height.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FinalizationProofDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FinalizationProofDTO>> GetFinalizationProofAtHeightWithHttpInfoAsync(string height, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'height' is set
            if (height == null)
            {
                throw new ApiException(400, "Missing required parameter 'height' when calling FinalizationRoutesApi->GetFinalizationProofAtHeight");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("height", ClientUtils.ParameterToString(height)); // path parameter

            localVarRequestOptions.Operation = "FinalizationRoutesApi.GetFinalizationProofAtHeight";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FinalizationProofDTO>("/finalization/proof/height/{height}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFinalizationProofAtHeight", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
