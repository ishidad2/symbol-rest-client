/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using SymbolRestClient.Client;
using SymbolRestClient.Model;

namespace SymbolRestClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionRoutesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Announce a cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announces a cosignature transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        AnnounceTransactionInfoDTO AnnounceCosignatureTransaction(Cosignature cosignature, int operationIndex = 0);

        /// <summary>
        /// Announce a cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announces a cosignature transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        ApiResponse<AnnounceTransactionInfoDTO> AnnounceCosignatureTransactionWithHttpInfo(Cosignature cosignature, int operationIndex = 0);
        /// <summary>
        /// Announce an aggregate bonded transaction
        /// </summary>
        /// <remarks>
        /// Announces an aggregate bonded transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        AnnounceTransactionInfoDTO AnnouncePartialTransaction(TransactionPayload transactionPayload, int operationIndex = 0);

        /// <summary>
        /// Announce an aggregate bonded transaction
        /// </summary>
        /// <remarks>
        /// Announces an aggregate bonded transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        ApiResponse<AnnounceTransactionInfoDTO> AnnouncePartialTransactionWithHttpInfo(TransactionPayload transactionPayload, int operationIndex = 0);
        /// <summary>
        /// Announce a new transaction
        /// </summary>
        /// <remarks>
        /// Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        AnnounceTransactionInfoDTO AnnounceTransaction(TransactionPayload transactionPayload, int operationIndex = 0);

        /// <summary>
        /// Announce a new transaction
        /// </summary>
        /// <remarks>
        /// Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        ApiResponse<AnnounceTransactionInfoDTO> AnnounceTransactionWithHttpInfo(TransactionPayload transactionPayload, int operationIndex = 0);
        /// <summary>
        /// Get confirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInfoDTO</returns>
        TransactionInfoDTO GetConfirmedTransaction(string transactionId, int operationIndex = 0);

        /// <summary>
        /// Get confirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        ApiResponse<TransactionInfoDTO> GetConfirmedTransactionWithHttpInfo(string transactionId, int operationIndex = 0);
        /// <summary>
        /// Get confirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TransactionInfoDTO&gt;</returns>
        List<TransactionInfoDTO> GetConfirmedTransactions(TransactionIds transactionIds, int operationIndex = 0);

        /// <summary>
        /// Get confirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TransactionInfoDTO&gt;</returns>
        ApiResponse<List<TransactionInfoDTO>> GetConfirmedTransactionsWithHttpInfo(TransactionIds transactionIds, int operationIndex = 0);
        /// <summary>
        /// Get partial transaction information
        /// </summary>
        /// <remarks>
        /// Returns partial transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInfoDTO</returns>
        TransactionInfoDTO GetPartialTransaction(string transactionId, int operationIndex = 0);

        /// <summary>
        /// Get partial transaction information
        /// </summary>
        /// <remarks>
        /// Returns partial transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        ApiResponse<TransactionInfoDTO> GetPartialTransactionWithHttpInfo(string transactionId, int operationIndex = 0);
        /// <summary>
        /// Get partial trasactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TransactionInfoDTO&gt;</returns>
        List<TransactionInfoDTO> GetPartialTransactions(TransactionIds transactionIds, int operationIndex = 0);

        /// <summary>
        /// Get partial trasactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TransactionInfoDTO&gt;</returns>
        ApiResponse<List<TransactionInfoDTO>> GetPartialTransactionsWithHttpInfo(TransactionIds transactionIds, int operationIndex = 0);
        /// <summary>
        /// Get unconfirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInfoDTO</returns>
        TransactionInfoDTO GetUnconfirmedTransaction(string transactionId, int operationIndex = 0);

        /// <summary>
        /// Get unconfirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        ApiResponse<TransactionInfoDTO> GetUnconfirmedTransactionWithHttpInfo(string transactionId, int operationIndex = 0);
        /// <summary>
        /// Get unconfirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TransactionInfoDTO&gt;</returns>
        List<TransactionInfoDTO> GetUnconfirmedTransactions(TransactionIds transactionIds, int operationIndex = 0);

        /// <summary>
        /// Get unconfirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TransactionInfoDTO&gt;</returns>
        ApiResponse<List<TransactionInfoDTO>> GetUnconfirmedTransactionsWithHttpInfo(TransactionIds transactionIds, int operationIndex = 0);
        /// <summary>
        /// Search confirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionPage</returns>
        TransactionPage SearchConfirmedTransactions(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);

        /// <summary>
        /// Search confirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        ApiResponse<TransactionPage> SearchConfirmedTransactionsWithHttpInfo(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);
        /// <summary>
        /// Search partial transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of partial transactions.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionPage</returns>
        TransactionPage SearchPartialTransactions(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);

        /// <summary>
        /// Search partial transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of partial transactions.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        ApiResponse<TransactionPage> SearchPartialTransactionsWithHttpInfo(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);
        /// <summary>
        /// Search unconfirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of unconfirmed transactions.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionPage</returns>
        TransactionPage SearchUnconfirmedTransactions(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);

        /// <summary>
        /// Search unconfirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of unconfirmed transactions.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        ApiResponse<TransactionPage> SearchUnconfirmedTransactionsWithHttpInfo(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionRoutesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Announce a cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announces a cosignature transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnounceCosignatureTransactionAsync(Cosignature cosignature, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Announce a cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announces a cosignature transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnounceCosignatureTransactionWithHttpInfoAsync(Cosignature cosignature, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Announce an aggregate bonded transaction
        /// </summary>
        /// <remarks>
        /// Announces an aggregate bonded transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnouncePartialTransactionAsync(TransactionPayload transactionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Announce an aggregate bonded transaction
        /// </summary>
        /// <remarks>
        /// Announces an aggregate bonded transaction to the network.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnouncePartialTransactionWithHttpInfoAsync(TransactionPayload transactionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Announce a new transaction
        /// </summary>
        /// <remarks>
        /// Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnounceTransactionAsync(TransactionPayload transactionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Announce a new transaction
        /// </summary>
        /// <remarks>
        /// Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnounceTransactionWithHttpInfoAsync(TransactionPayload transactionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get confirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInfoDTO</returns>
        System.Threading.Tasks.Task<TransactionInfoDTO> GetConfirmedTransactionAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get confirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetConfirmedTransactionWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get confirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TransactionInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetConfirmedTransactionsAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get confirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns confirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetConfirmedTransactionsWithHttpInfoAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get partial transaction information
        /// </summary>
        /// <remarks>
        /// Returns partial transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInfoDTO</returns>
        System.Threading.Tasks.Task<TransactionInfoDTO> GetPartialTransactionAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get partial transaction information
        /// </summary>
        /// <remarks>
        /// Returns partial transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetPartialTransactionWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get partial trasactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TransactionInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetPartialTransactionsAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get partial trasactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetPartialTransactionsWithHttpInfoAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get unconfirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInfoDTO</returns>
        System.Threading.Tasks.Task<TransactionInfoDTO> GetUnconfirmedTransactionAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get unconfirmed transaction information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transaction information given a transactionId or hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetUnconfirmedTransactionWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get unconfirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TransactionInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetUnconfirmedTransactionsAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get unconfirmed trasactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given array of transactionIds.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetUnconfirmedTransactionsWithHttpInfoAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search confirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionPage</returns>
        System.Threading.Tasks.Task<TransactionPage> SearchConfirmedTransactionsAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search confirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchConfirmedTransactionsWithHttpInfoAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search partial transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of partial transactions.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionPage</returns>
        System.Threading.Tasks.Task<TransactionPage> SearchPartialTransactionsAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search partial transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of partial transactions.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchPartialTransactionsWithHttpInfoAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search unconfirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of unconfirmed transactions.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionPage</returns>
        System.Threading.Tasks.Task<TransactionPage> SearchUnconfirmedTransactionsAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search unconfirmed transactions
        /// </summary>
        /// <remarks>
        /// Returns an array of unconfirmed transactions.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchUnconfirmedTransactionsWithHttpInfoAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionRoutesApi : ITransactionRoutesApiSync, ITransactionRoutesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionRoutesApi : ITransactionRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionRoutesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionRoutesApi(string basePath)
        {
            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionRoutesApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransactionRoutesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Announce a cosignature transaction Announces a cosignature transaction to the network.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        public AnnounceTransactionInfoDTO AnnounceCosignatureTransaction(Cosignature cosignature, int operationIndex = 0)
        {
            ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = AnnounceCosignatureTransactionWithHttpInfo(cosignature);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Announce a cosignature transaction Announces a cosignature transaction to the network.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        public ApiResponse<AnnounceTransactionInfoDTO> AnnounceCosignatureTransactionWithHttpInfo(Cosignature cosignature, int operationIndex = 0)
        {
            // verify the required parameter 'cosignature' is set
            if (cosignature == null)
            {
                throw new ApiException(400, "Missing required parameter 'cosignature' when calling TransactionRoutesApi->AnnounceCosignatureTransaction");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cosignature;

            localVarRequestOptions.Operation = "TransactionRoutesApi.AnnounceCosignatureTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AnnounceTransactionInfoDTO>("/transactions/cosignature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnnounceCosignatureTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Announce a cosignature transaction Announces a cosignature transaction to the network.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnounceCosignatureTransactionAsync(Cosignature cosignature, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = await AnnounceCosignatureTransactionWithHttpInfoAsync(cosignature, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Announce a cosignature transaction Announces a cosignature transaction to the network.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cosignature"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnounceCosignatureTransactionWithHttpInfoAsync(Cosignature cosignature, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'cosignature' is set
            if (cosignature == null)
            {
                throw new ApiException(400, "Missing required parameter 'cosignature' when calling TransactionRoutesApi->AnnounceCosignatureTransaction");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = cosignature;

            localVarRequestOptions.Operation = "TransactionRoutesApi.AnnounceCosignatureTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AnnounceTransactionInfoDTO>("/transactions/cosignature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnnounceCosignatureTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Announce an aggregate bonded transaction Announces an aggregate bonded transaction to the network.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        public AnnounceTransactionInfoDTO AnnouncePartialTransaction(TransactionPayload transactionPayload, int operationIndex = 0)
        {
            ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = AnnouncePartialTransactionWithHttpInfo(transactionPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Announce an aggregate bonded transaction Announces an aggregate bonded transaction to the network.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        public ApiResponse<AnnounceTransactionInfoDTO> AnnouncePartialTransactionWithHttpInfo(TransactionPayload transactionPayload, int operationIndex = 0)
        {
            // verify the required parameter 'transactionPayload' is set
            if (transactionPayload == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionPayload' when calling TransactionRoutesApi->AnnouncePartialTransaction");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionPayload;

            localVarRequestOptions.Operation = "TransactionRoutesApi.AnnouncePartialTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AnnounceTransactionInfoDTO>("/transactions/partial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnnouncePartialTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Announce an aggregate bonded transaction Announces an aggregate bonded transaction to the network.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnouncePartialTransactionAsync(TransactionPayload transactionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = await AnnouncePartialTransactionWithHttpInfoAsync(transactionPayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Announce an aggregate bonded transaction Announces an aggregate bonded transaction to the network.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnouncePartialTransactionWithHttpInfoAsync(TransactionPayload transactionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionPayload' is set
            if (transactionPayload == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionPayload' when calling TransactionRoutesApi->AnnouncePartialTransaction");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionPayload;

            localVarRequestOptions.Operation = "TransactionRoutesApi.AnnouncePartialTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AnnounceTransactionInfoDTO>("/transactions/partial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnnouncePartialTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Announce a new transaction Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AnnounceTransactionInfoDTO</returns>
        public AnnounceTransactionInfoDTO AnnounceTransaction(TransactionPayload transactionPayload, int operationIndex = 0)
        {
            ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = AnnounceTransactionWithHttpInfo(transactionPayload);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Announce a new transaction Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AnnounceTransactionInfoDTO</returns>
        public ApiResponse<AnnounceTransactionInfoDTO> AnnounceTransactionWithHttpInfo(TransactionPayload transactionPayload, int operationIndex = 0)
        {
            // verify the required parameter 'transactionPayload' is set
            if (transactionPayload == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionPayload' when calling TransactionRoutesApi->AnnounceTransaction");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionPayload;

            localVarRequestOptions.Operation = "TransactionRoutesApi.AnnounceTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AnnounceTransactionInfoDTO>("/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnnounceTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Announce a new transaction Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AnnounceTransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<AnnounceTransactionInfoDTO> AnnounceTransactionAsync(TransactionPayload transactionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AnnounceTransactionInfoDTO> localVarResponse = await AnnounceTransactionWithHttpInfoAsync(transactionPayload, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Announce a new transaction Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionPayload"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AnnounceTransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnnounceTransactionInfoDTO>> AnnounceTransactionWithHttpInfoAsync(TransactionPayload transactionPayload, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionPayload' is set
            if (transactionPayload == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionPayload' when calling TransactionRoutesApi->AnnounceTransaction");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionPayload;

            localVarRequestOptions.Operation = "TransactionRoutesApi.AnnounceTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AnnounceTransactionInfoDTO>("/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnnounceTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get confirmed transaction information Returns confirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInfoDTO</returns>
        public TransactionInfoDTO GetConfirmedTransaction(string transactionId, int operationIndex = 0)
        {
            ApiResponse<TransactionInfoDTO> localVarResponse = GetConfirmedTransactionWithHttpInfo(transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get confirmed transaction information Returns confirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        public ApiResponse<TransactionInfoDTO> GetConfirmedTransactionWithHttpInfo(string transactionId, int operationIndex = 0)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetConfirmedTransaction");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionId", ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetConfirmedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionInfoDTO>("/transactions/confirmed/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfirmedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get confirmed transaction information Returns confirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<TransactionInfoDTO> GetConfirmedTransactionAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TransactionInfoDTO> localVarResponse = await GetConfirmedTransactionWithHttpInfoAsync(transactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get confirmed transaction information Returns confirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetConfirmedTransactionWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetConfirmedTransaction");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionId", ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetConfirmedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionInfoDTO>("/transactions/confirmed/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfirmedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get confirmed trasactions information Returns confirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TransactionInfoDTO&gt;</returns>
        public List<TransactionInfoDTO> GetConfirmedTransactions(TransactionIds transactionIds, int operationIndex = 0)
        {
            ApiResponse<List<TransactionInfoDTO>> localVarResponse = GetConfirmedTransactionsWithHttpInfo(transactionIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get confirmed trasactions information Returns confirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TransactionInfoDTO&gt;</returns>
        public ApiResponse<List<TransactionInfoDTO>> GetConfirmedTransactionsWithHttpInfo(TransactionIds transactionIds, int operationIndex = 0)
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetConfirmedTransactions");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionIds;

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetConfirmedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TransactionInfoDTO>>("/transactions/confirmed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfirmedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get confirmed trasactions information Returns confirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TransactionInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetConfirmedTransactionsAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<TransactionInfoDTO>> localVarResponse = await GetConfirmedTransactionsWithHttpInfoAsync(transactionIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get confirmed trasactions information Returns confirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetConfirmedTransactionsWithHttpInfoAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetConfirmedTransactions");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionIds;

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetConfirmedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TransactionInfoDTO>>("/transactions/confirmed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConfirmedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get partial transaction information Returns partial transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInfoDTO</returns>
        public TransactionInfoDTO GetPartialTransaction(string transactionId, int operationIndex = 0)
        {
            ApiResponse<TransactionInfoDTO> localVarResponse = GetPartialTransactionWithHttpInfo(transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get partial transaction information Returns partial transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        public ApiResponse<TransactionInfoDTO> GetPartialTransactionWithHttpInfo(string transactionId, int operationIndex = 0)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetPartialTransaction");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionId", ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetPartialTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionInfoDTO>("/transactions/partial/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartialTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get partial transaction information Returns partial transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<TransactionInfoDTO> GetPartialTransactionAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TransactionInfoDTO> localVarResponse = await GetPartialTransactionWithHttpInfoAsync(transactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get partial transaction information Returns partial transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetPartialTransactionWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetPartialTransaction");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionId", ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetPartialTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionInfoDTO>("/transactions/partial/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartialTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get partial trasactions information Returns partial transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TransactionInfoDTO&gt;</returns>
        public List<TransactionInfoDTO> GetPartialTransactions(TransactionIds transactionIds, int operationIndex = 0)
        {
            ApiResponse<List<TransactionInfoDTO>> localVarResponse = GetPartialTransactionsWithHttpInfo(transactionIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get partial trasactions information Returns partial transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TransactionInfoDTO&gt;</returns>
        public ApiResponse<List<TransactionInfoDTO>> GetPartialTransactionsWithHttpInfo(TransactionIds transactionIds, int operationIndex = 0)
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetPartialTransactions");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionIds;

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetPartialTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TransactionInfoDTO>>("/transactions/partial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartialTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get partial trasactions information Returns partial transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TransactionInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetPartialTransactionsAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<TransactionInfoDTO>> localVarResponse = await GetPartialTransactionsWithHttpInfoAsync(transactionIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get partial trasactions information Returns partial transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetPartialTransactionsWithHttpInfoAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetPartialTransactions");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionIds;

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetPartialTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TransactionInfoDTO>>("/transactions/partial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartialTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unconfirmed transaction information Returns unconfirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionInfoDTO</returns>
        public TransactionInfoDTO GetUnconfirmedTransaction(string transactionId, int operationIndex = 0)
        {
            ApiResponse<TransactionInfoDTO> localVarResponse = GetUnconfirmedTransactionWithHttpInfo(transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get unconfirmed transaction information Returns unconfirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionInfoDTO</returns>
        public ApiResponse<TransactionInfoDTO> GetUnconfirmedTransactionWithHttpInfo(string transactionId, int operationIndex = 0)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetUnconfirmedTransaction");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionId", ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetUnconfirmedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionInfoDTO>("/transactions/unconfirmed/{transactionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnconfirmedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unconfirmed transaction information Returns unconfirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionInfoDTO</returns>
        public async System.Threading.Tasks.Task<TransactionInfoDTO> GetUnconfirmedTransactionAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TransactionInfoDTO> localVarResponse = await GetUnconfirmedTransactionWithHttpInfoAsync(transactionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get unconfirmed transaction information Returns unconfirmed transaction information given a transactionId or hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionInfoDTO>> GetUnconfirmedTransactionWithHttpInfoAsync(string transactionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetUnconfirmedTransaction");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transactionId", ClientUtils.ParameterToString(transactionId)); // path parameter

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetUnconfirmedTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionInfoDTO>("/transactions/unconfirmed/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnconfirmedTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unconfirmed trasactions information Returns unconfirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TransactionInfoDTO&gt;</returns>
        public List<TransactionInfoDTO> GetUnconfirmedTransactions(TransactionIds transactionIds, int operationIndex = 0)
        {
            ApiResponse<List<TransactionInfoDTO>> localVarResponse = GetUnconfirmedTransactionsWithHttpInfo(transactionIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get unconfirmed trasactions information Returns unconfirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TransactionInfoDTO&gt;</returns>
        public ApiResponse<List<TransactionInfoDTO>> GetUnconfirmedTransactionsWithHttpInfo(TransactionIds transactionIds, int operationIndex = 0)
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetUnconfirmedTransactions");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionIds;

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetUnconfirmedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<TransactionInfoDTO>>("/transactions/unconfirmed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnconfirmedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get unconfirmed trasactions information Returns unconfirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TransactionInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TransactionInfoDTO>> GetUnconfirmedTransactionsAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<List<TransactionInfoDTO>> localVarResponse = await GetUnconfirmedTransactionsWithHttpInfoAsync(transactionIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get unconfirmed trasactions information Returns unconfirmed transactions information for a given array of transactionIds.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionInfoDTO>>> GetUnconfirmedTransactionsWithHttpInfoAsync(TransactionIds transactionIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
            {
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetUnconfirmedTransactions");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = transactionIds;

            localVarRequestOptions.Operation = "TransactionRoutesApi.GetUnconfirmedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<TransactionInfoDTO>>("/transactions/unconfirmed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUnconfirmedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search confirmed transactions Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionPage</returns>
        public TransactionPage SearchConfirmedTransactions(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            ApiResponse<TransactionPage> localVarResponse = SearchConfirmedTransactionsWithHttpInfo(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search confirmed transactions Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        public ApiResponse<TransactionPage> SearchConfirmedTransactionsWithHttpInfo(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (recipientAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "recipientAddress", recipientAddress));
            }
            if (signerPublicKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "signerPublicKey", signerPublicKey));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }
            if (fromTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromTransferAmount", fromTransferAmount));
            }
            if (toTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toTransferAmount", toTransferAmount));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (embedded != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "embedded", embedded));
            }
            if (transferMosaicId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "transferMosaicId", transferMosaicId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "TransactionRoutesApi.SearchConfirmedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionPage>("/transactions/confirmed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConfirmedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search confirmed transactions Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionPage</returns>
        public async System.Threading.Tasks.Task<TransactionPage> SearchConfirmedTransactionsAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TransactionPage> localVarResponse = await SearchConfirmedTransactionsWithHttpInfoAsync(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search confirmed transactions Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchConfirmedTransactionsWithHttpInfoAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (recipientAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "recipientAddress", recipientAddress));
            }
            if (signerPublicKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "signerPublicKey", signerPublicKey));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }
            if (fromTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromTransferAmount", fromTransferAmount));
            }
            if (toTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toTransferAmount", toTransferAmount));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (embedded != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "embedded", embedded));
            }
            if (transferMosaicId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "transferMosaicId", transferMosaicId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "TransactionRoutesApi.SearchConfirmedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionPage>("/transactions/confirmed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConfirmedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search partial transactions Returns an array of partial transactions.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionPage</returns>
        public TransactionPage SearchPartialTransactions(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            ApiResponse<TransactionPage> localVarResponse = SearchPartialTransactionsWithHttpInfo(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search partial transactions Returns an array of partial transactions.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        public ApiResponse<TransactionPage> SearchPartialTransactionsWithHttpInfo(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (recipientAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "recipientAddress", recipientAddress));
            }
            if (signerPublicKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "signerPublicKey", signerPublicKey));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }
            if (fromTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromTransferAmount", fromTransferAmount));
            }
            if (toTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toTransferAmount", toTransferAmount));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (embedded != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "embedded", embedded));
            }
            if (transferMosaicId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "transferMosaicId", transferMosaicId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "TransactionRoutesApi.SearchPartialTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionPage>("/transactions/partial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPartialTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search partial transactions Returns an array of partial transactions.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionPage</returns>
        public async System.Threading.Tasks.Task<TransactionPage> SearchPartialTransactionsAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TransactionPage> localVarResponse = await SearchPartialTransactionsWithHttpInfoAsync(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search partial transactions Returns an array of partial transactions.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchPartialTransactionsWithHttpInfoAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (recipientAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "recipientAddress", recipientAddress));
            }
            if (signerPublicKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "signerPublicKey", signerPublicKey));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }
            if (fromTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromTransferAmount", fromTransferAmount));
            }
            if (toTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toTransferAmount", toTransferAmount));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (embedded != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "embedded", embedded));
            }
            if (transferMosaicId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "transferMosaicId", transferMosaicId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "TransactionRoutesApi.SearchPartialTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionPage>("/transactions/partial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPartialTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search unconfirmed transactions Returns an array of unconfirmed transactions.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionPage</returns>
        public TransactionPage SearchUnconfirmedTransactions(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            ApiResponse<TransactionPage> localVarResponse = SearchUnconfirmedTransactionsWithHttpInfo(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search unconfirmed transactions Returns an array of unconfirmed transactions.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionPage</returns>
        public ApiResponse<TransactionPage> SearchUnconfirmedTransactionsWithHttpInfo(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (recipientAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "recipientAddress", recipientAddress));
            }
            if (signerPublicKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "signerPublicKey", signerPublicKey));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }
            if (fromTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromTransferAmount", fromTransferAmount));
            }
            if (toTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toTransferAmount", toTransferAmount));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (embedded != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "embedded", embedded));
            }
            if (transferMosaicId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "transferMosaicId", transferMosaicId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "TransactionRoutesApi.SearchUnconfirmedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionPage>("/transactions/unconfirmed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUnconfirmedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search unconfirmed transactions Returns an array of unconfirmed transactions.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionPage</returns>
        public async System.Threading.Tasks.Task<TransactionPage> SearchUnconfirmedTransactionsAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<TransactionPage> localVarResponse = await SearchUnconfirmedTransactionsWithHttpInfoAsync(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search unconfirmed transactions Returns an array of unconfirmed transactions.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)</param>
        /// <param name="recipientAddress">Filter by address of the account receiving the transaction. (optional)</param>
        /// <param name="signerPublicKey">Filter by public key of the account signing the entity. (optional)</param>
        /// <param name="height">Filter by block height. (optional)</param>
        /// <param name="fromHeight">Only blocks with height greater or equal than this one are returned. (optional)</param>
        /// <param name="toHeight">Only blocks with height smaller or equal than this one are returned. (optional)</param>
        /// <param name="fromTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)</param>
        /// <param name="toTransferAmount">Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)</param>
        /// <param name="type">Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)</param>
        /// <param name="embedded">When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)</param>
        /// <param name="transferMosaicId">Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionPage>> SearchUnconfirmedTransactionsWithHttpInfoAsync(string? address = default(string?), string? recipientAddress = default(string?), string? signerPublicKey = default(string?), string? height = default(string?), string? fromHeight = default(string?), string? toHeight = default(string?), string? fromTransferAmount = default(string?), string? toTransferAmount = default(string?), List<TransactionTypeEnum>? type = default(List<TransactionTypeEnum>?), bool? embedded = default(bool?), string? transferMosaicId = default(string?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (recipientAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "recipientAddress", recipientAddress));
            }
            if (signerPublicKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "signerPublicKey", signerPublicKey));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (fromHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromHeight", fromHeight));
            }
            if (toHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toHeight", toHeight));
            }
            if (fromTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "fromTransferAmount", fromTransferAmount));
            }
            if (toTransferAmount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "toTransferAmount", toTransferAmount));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "type", type));
            }
            if (embedded != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "embedded", embedded));
            }
            if (transferMosaicId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "transferMosaicId", transferMosaicId));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "TransactionRoutesApi.SearchUnconfirmedTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionPage>("/transactions/unconfirmed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUnconfirmedTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
