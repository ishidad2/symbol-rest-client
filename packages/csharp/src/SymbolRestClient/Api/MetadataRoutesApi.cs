/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using SymbolRestClient.Client;
using SymbolRestClient.Model;

namespace SymbolRestClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataRoutesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get metadata information
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MetadataInfoDTO</returns>
        MetadataInfoDTO GetMetadata(string compositeHash, int operationIndex = 0);

        /// <summary>
        /// Get metadata information
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MetadataInfoDTO</returns>
        ApiResponse<MetadataInfoDTO> GetMetadataWithHttpInfo(string compositeHash, int operationIndex = 0);
        /// <summary>
        /// Get metadata merkle information
        /// </summary>
        /// <remarks>
        /// Gets the metadata merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        MerkleStateInfoDTO GetMetadataMerkle(string compositeHash, int operationIndex = 0);

        /// <summary>
        /// Get metadata merkle information
        /// </summary>
        /// <remarks>
        /// Gets the metadata merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        ApiResponse<MerkleStateInfoDTO> GetMetadataMerkleWithHttpInfo(string compositeHash, int operationIndex = 0);
        /// <summary>
        /// Search metadata entries
        /// </summary>
        /// <remarks>
        /// Returns an array of metadata.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MetadataPage</returns>
        MetadataPage SearchMetadataEntries(string? sourceAddress = default(string?), string? targetAddress = default(string?), string? scopedMetadataKey = default(string?), string? targetId = default(string?), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);

        /// <summary>
        /// Search metadata entries
        /// </summary>
        /// <remarks>
        /// Returns an array of metadata.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MetadataPage</returns>
        ApiResponse<MetadataPage> SearchMetadataEntriesWithHttpInfo(string? sourceAddress = default(string?), string? targetAddress = default(string?), string? scopedMetadataKey = default(string?), string? targetId = default(string?), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataRoutesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get metadata information
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetadataInfoDTO</returns>
        System.Threading.Tasks.Task<MetadataInfoDTO> GetMetadataAsync(string compositeHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get metadata information
        /// </summary>
        /// <remarks>
        /// Gets the metadata for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetadataInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataInfoDTO>> GetMetadataWithHttpInfoAsync(string compositeHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get metadata merkle information
        /// </summary>
        /// <remarks>
        /// Gets the metadata merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        System.Threading.Tasks.Task<MerkleStateInfoDTO> GetMetadataMerkleAsync(string compositeHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get metadata merkle information
        /// </summary>
        /// <remarks>
        /// Gets the metadata merkle for a given composite hash.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetMetadataMerkleWithHttpInfoAsync(string compositeHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search metadata entries
        /// </summary>
        /// <remarks>
        /// Returns an array of metadata.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetadataPage</returns>
        System.Threading.Tasks.Task<MetadataPage> SearchMetadataEntriesAsync(string? sourceAddress = default(string?), string? targetAddress = default(string?), string? scopedMetadataKey = default(string?), string? targetId = default(string?), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search metadata entries
        /// </summary>
        /// <remarks>
        /// Returns an array of metadata.
        /// </remarks>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetadataPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataPage>> SearchMetadataEntriesWithHttpInfoAsync(string? sourceAddress = default(string?), string? targetAddress = default(string?), string? scopedMetadataKey = default(string?), string? targetId = default(string?), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMetadataRoutesApi : IMetadataRoutesApiSync, IMetadataRoutesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MetadataRoutesApi : IMetadataRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataRoutesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MetadataRoutesApi(string basePath)
        {
            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MetadataRoutesApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SymbolRestClient.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataRoutesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MetadataRoutesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SymbolRestClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get metadata information Gets the metadata for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MetadataInfoDTO</returns>
        public MetadataInfoDTO GetMetadata(string compositeHash, int operationIndex = 0)
        {
            ApiResponse<MetadataInfoDTO> localVarResponse = GetMetadataWithHttpInfo(compositeHash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata information Gets the metadata for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MetadataInfoDTO</returns>
        public ApiResponse<MetadataInfoDTO> GetMetadataWithHttpInfo(string compositeHash, int operationIndex = 0)
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
            {
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling MetadataRoutesApi->GetMetadata");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("compositeHash", ClientUtils.ParameterToString(compositeHash)); // path parameter

            localVarRequestOptions.Operation = "MetadataRoutesApi.GetMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MetadataInfoDTO>("/metadata/{compositeHash}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get metadata information Gets the metadata for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetadataInfoDTO</returns>
        public async System.Threading.Tasks.Task<MetadataInfoDTO> GetMetadataAsync(string compositeHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<MetadataInfoDTO> localVarResponse = await GetMetadataWithHttpInfoAsync(compositeHash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata information Gets the metadata for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetadataInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataInfoDTO>> GetMetadataWithHttpInfoAsync(string compositeHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
            {
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling MetadataRoutesApi->GetMetadata");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("compositeHash", ClientUtils.ParameterToString(compositeHash)); // path parameter

            localVarRequestOptions.Operation = "MetadataRoutesApi.GetMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MetadataInfoDTO>("/metadata/{compositeHash}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get metadata merkle information Gets the metadata merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MerkleStateInfoDTO</returns>
        public MerkleStateInfoDTO GetMetadataMerkle(string compositeHash, int operationIndex = 0)
        {
            ApiResponse<MerkleStateInfoDTO> localVarResponse = GetMetadataMerkleWithHttpInfo(compositeHash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata merkle information Gets the metadata merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MerkleStateInfoDTO</returns>
        public ApiResponse<MerkleStateInfoDTO> GetMetadataMerkleWithHttpInfo(string compositeHash, int operationIndex = 0)
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
            {
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling MetadataRoutesApi->GetMetadataMerkle");
            }

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("compositeHash", ClientUtils.ParameterToString(compositeHash)); // path parameter

            localVarRequestOptions.Operation = "MetadataRoutesApi.GetMetadataMerkle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MerkleStateInfoDTO>("/metadata/{compositeHash}/merkle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataMerkle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get metadata merkle information Gets the metadata merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MerkleStateInfoDTO</returns>
        public async System.Threading.Tasks.Task<MerkleStateInfoDTO> GetMetadataMerkleAsync(string compositeHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<MerkleStateInfoDTO> localVarResponse = await GetMetadataMerkleWithHttpInfoAsync(compositeHash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata merkle information Gets the metadata merkle for a given composite hash.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="compositeHash">Filter by composite hash.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MerkleStateInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerkleStateInfoDTO>> GetMetadataMerkleWithHttpInfoAsync(string compositeHash, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'compositeHash' is set
            if (compositeHash == null)
            {
                throw new ApiException(400, "Missing required parameter 'compositeHash' when calling MetadataRoutesApi->GetMetadataMerkle");
            }


            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("compositeHash", ClientUtils.ParameterToString(compositeHash)); // path parameter

            localVarRequestOptions.Operation = "MetadataRoutesApi.GetMetadataMerkle";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MerkleStateInfoDTO>("/metadata/{compositeHash}/merkle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataMerkle", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search metadata entries Returns an array of metadata.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MetadataPage</returns>
        public MetadataPage SearchMetadataEntries(string? sourceAddress = default(string?), string? targetAddress = default(string?), string? scopedMetadataKey = default(string?), string? targetId = default(string?), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            ApiResponse<MetadataPage> localVarResponse = SearchMetadataEntriesWithHttpInfo(sourceAddress, targetAddress, scopedMetadataKey, targetId, metadataType, pageSize, pageNumber, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search metadata entries Returns an array of metadata.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MetadataPage</returns>
        public ApiResponse<MetadataPage> SearchMetadataEntriesWithHttpInfo(string? sourceAddress = default(string?), string? targetAddress = default(string?), string? scopedMetadataKey = default(string?), string? targetId = default(string?), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sourceAddress", sourceAddress));
            }
            if (targetAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "targetAddress", targetAddress));
            }
            if (scopedMetadataKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "scopedMetadataKey", scopedMetadataKey));
            }
            if (targetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "targetId", targetId));
            }
            if (metadataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "metadataType", metadataType));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "MetadataRoutesApi.SearchMetadataEntries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MetadataPage>("/metadata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMetadataEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search metadata entries Returns an array of metadata.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MetadataPage</returns>
        public async System.Threading.Tasks.Task<MetadataPage> SearchMetadataEntriesAsync(string? sourceAddress = default(string?), string? targetAddress = default(string?), string? scopedMetadataKey = default(string?), string? targetId = default(string?), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<MetadataPage> localVarResponse = await SearchMetadataEntriesWithHttpInfoAsync(sourceAddress, targetAddress, scopedMetadataKey, targetId, metadataType, pageSize, pageNumber, offset, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search metadata entries Returns an array of metadata.
        /// </summary>
        /// <exception cref="SymbolRestClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceAddress">Filter by address sending the metadata entry. (optional)</param>
        /// <param name="targetAddress">Filter by target address. (optional)</param>
        /// <param name="scopedMetadataKey">Filter by metadata key. (optional)</param>
        /// <param name="targetId">Filter by namespace or mosaic id. (optional)</param>
        /// <param name="metadataType">Filter by metadata type. (optional)</param>
        /// <param name="pageSize">Select the number of entries to return. (optional, default to 10)</param>
        /// <param name="pageNumber">Filter by page number. (optional, default to 1)</param>
        /// <param name="offset">Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)</param>
        /// <param name="order">Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MetadataPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataPage>> SearchMetadataEntriesWithHttpInfoAsync(string? sourceAddress = default(string?), string? targetAddress = default(string?), string? scopedMetadataKey = default(string?), string? targetId = default(string?), MetadataTypeEnum? metadataType = default(MetadataTypeEnum?), int? pageSize = default(int?), int? pageNumber = default(int?), string? offset = default(string?), Order? order = default(Order?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (sourceAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "sourceAddress", sourceAddress));
            }
            if (targetAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "targetAddress", targetAddress));
            }
            if (scopedMetadataKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "scopedMetadataKey", scopedMetadataKey));
            }
            if (targetId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "targetId", targetId));
            }
            if (metadataType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "metadataType", metadataType));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageNumber", pageNumber));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "MetadataRoutesApi.SearchMetadataEntries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MetadataPage>("/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMetadataEntries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
