/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SymbolRestClient.Client;
using SymbolRestClient.Api;
// uncomment below to import models
//using SymbolRestClient.Model;

namespace SymbolRestClient.Test.Api
{
    /// <summary>
    ///  Class for testing ReceiptRoutesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ReceiptRoutesApiTests : IDisposable
    {
        private ReceiptRoutesApi instance;

        public ReceiptRoutesApiTests()
        {
            instance = new ReceiptRoutesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ReceiptRoutesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ReceiptRoutesApi
            //Assert.IsType<ReceiptRoutesApi>(instance);
        }

        /// <summary>
        /// Test SearchAddressResolutionStatements
        /// </summary>
        [Fact]
        public void SearchAddressResolutionStatementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? height = null;
            //int? pageSize = null;
            //int? pageNumber = null;
            //string? offset = null;
            //Order? order = null;
            //var response = instance.SearchAddressResolutionStatements(height, pageSize, pageNumber, offset, order);
            //Assert.IsType<ResolutionStatementPage>(response);
        }

        /// <summary>
        /// Test SearchMosaicResolutionStatements
        /// </summary>
        [Fact]
        public void SearchMosaicResolutionStatementsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? height = null;
            //int? pageSize = null;
            //int? pageNumber = null;
            //string? offset = null;
            //Order? order = null;
            //var response = instance.SearchMosaicResolutionStatements(height, pageSize, pageNumber, offset, order);
            //Assert.IsType<ResolutionStatementPage>(response);
        }

        /// <summary>
        /// Test SearchReceipts
        /// </summary>
        [Fact]
        public void SearchReceiptsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? height = null;
            //string? fromHeight = null;
            //string? toHeight = null;
            //List<ReceiptTypeEnum>? receiptType = null;
            //string? recipientAddress = null;
            //string? senderAddress = null;
            //string? targetAddress = null;
            //string? artifactId = null;
            //int? pageSize = null;
            //int? pageNumber = null;
            //string? offset = null;
            //Order? order = null;
            //var response = instance.SearchReceipts(height, fromHeight, toHeight, receiptType, recipientAddress, senderAddress, targetAddress, artifactId, pageSize, pageNumber, offset, order);
            //Assert.IsType<TransactionStatementPage>(response);
        }
    }
}
