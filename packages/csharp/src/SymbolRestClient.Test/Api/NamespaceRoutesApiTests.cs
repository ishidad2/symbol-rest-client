/*
 * Catapult REST Endpoints
 *
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SymbolRestClient.Client;
using SymbolRestClient.Api;
// uncomment below to import models
//using SymbolRestClient.Model;

namespace SymbolRestClient.Test.Api
{
    /// <summary>
    ///  Class for testing NamespaceRoutesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class NamespaceRoutesApiTests : IDisposable
    {
        private NamespaceRoutesApi instance;

        public NamespaceRoutesApiTests()
        {
            instance = new NamespaceRoutesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of NamespaceRoutesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' NamespaceRoutesApi
            //Assert.IsType<NamespaceRoutesApi>(instance);
        }

        /// <summary>
        /// Test GetAccountsNames
        /// </summary>
        [Fact]
        public void GetAccountsNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Addresses addresses = null;
            //var response = instance.GetAccountsNames(addresses);
            //Assert.IsType<AccountsNamesDTO>(response);
        }

        /// <summary>
        /// Test GetMosaicsNames
        /// </summary>
        [Fact]
        public void GetMosaicsNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MosaicIds mosaicIds = null;
            //var response = instance.GetMosaicsNames(mosaicIds);
            //Assert.IsType<MosaicsNamesDTO>(response);
        }

        /// <summary>
        /// Test GetNamespace
        /// </summary>
        [Fact]
        public void GetNamespaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string namespaceId = null;
            //var response = instance.GetNamespace(namespaceId);
            //Assert.IsType<NamespaceInfoDTO>(response);
        }

        /// <summary>
        /// Test GetNamespaceMerkle
        /// </summary>
        [Fact]
        public void GetNamespaceMerkleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string namespaceId = null;
            //var response = instance.GetNamespaceMerkle(namespaceId);
            //Assert.IsType<MerkleStateInfoDTO>(response);
        }

        /// <summary>
        /// Test GetNamespacesNames
        /// </summary>
        [Fact]
        public void GetNamespacesNamesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NamespaceIds namespaceIds = null;
            //var response = instance.GetNamespacesNames(namespaceIds);
            //Assert.IsType<List<NamespaceNameDTO>>(response);
        }

        /// <summary>
        /// Test SearchNamespaces
        /// </summary>
        [Fact]
        public void SearchNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? ownerAddress = null;
            //NamespaceRegistrationTypeEnum? registrationType = null;
            //string? level0 = null;
            //AliasTypeEnum? aliasType = null;
            //int? pageSize = null;
            //int? pageNumber = null;
            //string? offset = null;
            //Order? order = null;
            //var response = instance.SearchNamespaces(ownerAddress, registrationType, level0, aliasType, pageSize, pageNumber, offset, order);
            //Assert.IsType<NamespacePage>(response);
        }
    }
}
