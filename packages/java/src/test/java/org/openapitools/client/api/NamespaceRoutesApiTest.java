/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountsNamesDTO;
import org.openapitools.client.model.Addresses;
import org.openapitools.client.model.AliasTypeEnum;
import org.openapitools.client.model.MerkleStateInfoDTO;
import org.openapitools.client.model.ModelError;
import org.openapitools.client.model.MosaicIds;
import org.openapitools.client.model.MosaicsNamesDTO;
import org.openapitools.client.model.NamespaceIds;
import org.openapitools.client.model.NamespaceInfoDTO;
import org.openapitools.client.model.NamespaceNameDTO;
import org.openapitools.client.model.NamespacePage;
import org.openapitools.client.model.NamespaceRegistrationTypeEnum;
import org.openapitools.client.model.Order;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamespaceRoutesApi
 */
@Disabled
public class NamespaceRoutesApiTest {

    private final NamespaceRoutesApi api = new NamespaceRoutesApi();

    /**
     * Get readable names for a set of accountIds
     *
     * Returns friendly names for accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountsNamesTest() throws ApiException {
        Addresses addresses = null;
        AccountsNamesDTO response = api.getAccountsNames(addresses);
        // TODO: test validations
    }

    /**
     * Get readable names for a set of mosaics
     *
     * Returns friendly names for mosaics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMosaicsNamesTest() throws ApiException {
        MosaicIds mosaicIds = null;
        MosaicsNamesDTO response = api.getMosaicsNames(mosaicIds);
        // TODO: test validations
    }

    /**
     * Get namespace information
     *
     * Gets the namespace for a given namespace identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespaceTest() throws ApiException {
        String namespaceId = null;
        NamespaceInfoDTO response = api.getNamespace(namespaceId);
        // TODO: test validations
    }

    /**
     * Get namespace merkle information
     *
     * Gets the namespace merkle for a given namespace identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespaceMerkleTest() throws ApiException {
        String namespaceId = null;
        MerkleStateInfoDTO response = api.getNamespaceMerkle(namespaceId);
        // TODO: test validations
    }

    /**
     * Get readable names for a set of namespaces
     *
     * Returns friendly names for namespaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespacesNamesTest() throws ApiException {
        NamespaceIds namespaceIds = null;
        List<NamespaceNameDTO> response = api.getNamespacesNames(namespaceIds);
        // TODO: test validations
    }

    /**
     * Search namespaces
     *
     * Gets an array of namespaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchNamespacesTest() throws ApiException {
        String ownerAddress = null;
        NamespaceRegistrationTypeEnum registrationType = null;
        String level0 = null;
        AliasTypeEnum aliasType = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String offset = null;
        Order order = null;
        NamespacePage response = api.searchNamespaces(ownerAddress, registrationType, level0, aliasType, pageSize, pageNumber, offset, order);
        // TODO: test validations
    }

}
