/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ChainPropertiesDTO
 */
public class ChainPropertiesDTOTest {
    private final ChainPropertiesDTO model = new ChainPropertiesDTO();

    /**
     * Model tests for ChainPropertiesDTO
     */
    @Test
    public void testChainPropertiesDTO() {
        // TODO: test ChainPropertiesDTO
    }

    /**
     * Test the property 'enableVerifiableState'
     */
    @Test
    public void enableVerifiableStateTest() {
        // TODO: test enableVerifiableState
    }

    /**
     * Test the property 'enableVerifiableReceipts'
     */
    @Test
    public void enableVerifiableReceiptsTest() {
        // TODO: test enableVerifiableReceipts
    }

    /**
     * Test the property 'currencyMosaicId'
     */
    @Test
    public void currencyMosaicIdTest() {
        // TODO: test currencyMosaicId
    }

    /**
     * Test the property 'harvestingMosaicId'
     */
    @Test
    public void harvestingMosaicIdTest() {
        // TODO: test harvestingMosaicId
    }

    /**
     * Test the property 'blockGenerationTargetTime'
     */
    @Test
    public void blockGenerationTargetTimeTest() {
        // TODO: test blockGenerationTargetTime
    }

    /**
     * Test the property 'blockTimeSmoothingFactor'
     */
    @Test
    public void blockTimeSmoothingFactorTest() {
        // TODO: test blockTimeSmoothingFactor
    }

    /**
     * Test the property 'blockFinalizationInterval'
     */
    @Test
    public void blockFinalizationIntervalTest() {
        // TODO: test blockFinalizationInterval
    }

    /**
     * Test the property 'importanceGrouping'
     */
    @Test
    public void importanceGroupingTest() {
        // TODO: test importanceGrouping
    }

    /**
     * Test the property 'importanceActivityPercentage'
     */
    @Test
    public void importanceActivityPercentageTest() {
        // TODO: test importanceActivityPercentage
    }

    /**
     * Test the property 'maxRollbackBlocks'
     */
    @Test
    public void maxRollbackBlocksTest() {
        // TODO: test maxRollbackBlocks
    }

    /**
     * Test the property 'maxDifficultyBlocks'
     */
    @Test
    public void maxDifficultyBlocksTest() {
        // TODO: test maxDifficultyBlocks
    }

    /**
     * Test the property 'defaultDynamicFeeMultiplier'
     */
    @Test
    public void defaultDynamicFeeMultiplierTest() {
        // TODO: test defaultDynamicFeeMultiplier
    }

    /**
     * Test the property 'maxTransactionLifetime'
     */
    @Test
    public void maxTransactionLifetimeTest() {
        // TODO: test maxTransactionLifetime
    }

    /**
     * Test the property 'maxBlockFutureTime'
     */
    @Test
    public void maxBlockFutureTimeTest() {
        // TODO: test maxBlockFutureTime
    }

    /**
     * Test the property 'initialCurrencyAtomicUnits'
     */
    @Test
    public void initialCurrencyAtomicUnitsTest() {
        // TODO: test initialCurrencyAtomicUnits
    }

    /**
     * Test the property 'maxMosaicAtomicUnits'
     */
    @Test
    public void maxMosaicAtomicUnitsTest() {
        // TODO: test maxMosaicAtomicUnits
    }

    /**
     * Test the property 'totalChainImportance'
     */
    @Test
    public void totalChainImportanceTest() {
        // TODO: test totalChainImportance
    }

    /**
     * Test the property 'minHarvesterBalance'
     */
    @Test
    public void minHarvesterBalanceTest() {
        // TODO: test minHarvesterBalance
    }

    /**
     * Test the property 'maxHarvesterBalance'
     */
    @Test
    public void maxHarvesterBalanceTest() {
        // TODO: test maxHarvesterBalance
    }

    /**
     * Test the property 'minVoterBalance'
     */
    @Test
    public void minVoterBalanceTest() {
        // TODO: test minVoterBalance
    }

    /**
     * Test the property 'maxVotingKeysPerAccount'
     */
    @Test
    public void maxVotingKeysPerAccountTest() {
        // TODO: test maxVotingKeysPerAccount
    }

    /**
     * Test the property 'minVotingKeyLifetime'
     */
    @Test
    public void minVotingKeyLifetimeTest() {
        // TODO: test minVotingKeyLifetime
    }

    /**
     * Test the property 'maxVotingKeyLifetime'
     */
    @Test
    public void maxVotingKeyLifetimeTest() {
        // TODO: test maxVotingKeyLifetime
    }

    /**
     * Test the property 'harvestBeneficiaryPercentage'
     */
    @Test
    public void harvestBeneficiaryPercentageTest() {
        // TODO: test harvestBeneficiaryPercentage
    }

    /**
     * Test the property 'harvestNetworkPercentage'
     */
    @Test
    public void harvestNetworkPercentageTest() {
        // TODO: test harvestNetworkPercentage
    }

    /**
     * Test the property 'harvestNetworkFeeSinkAddress'
     */
    @Test
    public void harvestNetworkFeeSinkAddressTest() {
        // TODO: test harvestNetworkFeeSinkAddress
    }

    /**
     * Test the property 'blockPruneInterval'
     */
    @Test
    public void blockPruneIntervalTest() {
        // TODO: test blockPruneInterval
    }

    /**
     * Test the property 'maxTransactionsPerBlock'
     */
    @Test
    public void maxTransactionsPerBlockTest() {
        // TODO: test maxTransactionsPerBlock
    }

}
