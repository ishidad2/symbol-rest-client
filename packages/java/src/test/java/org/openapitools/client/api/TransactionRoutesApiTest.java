/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnnounceTransactionInfoDTO;
import org.openapitools.client.model.Cosignature;
import org.openapitools.client.model.ModelError;
import org.openapitools.client.model.Order;
import org.openapitools.client.model.TransactionIds;
import org.openapitools.client.model.TransactionInfoDTO;
import org.openapitools.client.model.TransactionPage;
import org.openapitools.client.model.TransactionPayload;
import org.openapitools.client.model.TransactionTypeEnum;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionRoutesApi
 */
@Disabled
public class TransactionRoutesApiTest {

    private final TransactionRoutesApi api = new TransactionRoutesApi();

    /**
     * Announce a cosignature transaction
     *
     * Announces a cosignature transaction to the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void announceCosignatureTransactionTest() throws ApiException {
        Cosignature cosignature = null;
        AnnounceTransactionInfoDTO response = api.announceCosignatureTransaction(cosignature);
        // TODO: test validations
    }

    /**
     * Announce an aggregate bonded transaction
     *
     * Announces an aggregate bonded transaction to the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void announcePartialTransactionTest() throws ApiException {
        TransactionPayload transactionPayload = null;
        AnnounceTransactionInfoDTO response = api.announcePartialTransaction(transactionPayload);
        // TODO: test validations
    }

    /**
     * Announce a new transaction
     *
     * Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It&#39;s recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void announceTransactionTest() throws ApiException {
        TransactionPayload transactionPayload = null;
        AnnounceTransactionInfoDTO response = api.announceTransaction(transactionPayload);
        // TODO: test validations
    }

    /**
     * Get confirmed transaction information
     *
     * Returns confirmed transaction information given a transactionId or hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfirmedTransactionTest() throws ApiException {
        String transactionId = null;
        TransactionInfoDTO response = api.getConfirmedTransaction(transactionId);
        // TODO: test validations
    }

    /**
     * Get confirmed trasactions information
     *
     * Returns confirmed transactions information for a given array of transactionIds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfirmedTransactionsTest() throws ApiException {
        TransactionIds transactionIds = null;
        List<TransactionInfoDTO> response = api.getConfirmedTransactions(transactionIds);
        // TODO: test validations
    }

    /**
     * Get partial transaction information
     *
     * Returns partial transaction information given a transactionId or hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartialTransactionTest() throws ApiException {
        String transactionId = null;
        TransactionInfoDTO response = api.getPartialTransaction(transactionId);
        // TODO: test validations
    }

    /**
     * Get partial trasactions information
     *
     * Returns partial transactions information for a given array of transactionIds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartialTransactionsTest() throws ApiException {
        TransactionIds transactionIds = null;
        List<TransactionInfoDTO> response = api.getPartialTransactions(transactionIds);
        // TODO: test validations
    }

    /**
     * Get unconfirmed transaction information
     *
     * Returns unconfirmed transaction information given a transactionId or hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnconfirmedTransactionTest() throws ApiException {
        String transactionId = null;
        TransactionInfoDTO response = api.getUnconfirmedTransaction(transactionId);
        // TODO: test validations
    }

    /**
     * Get unconfirmed trasactions information
     *
     * Returns unconfirmed transactions information for a given array of transactionIds.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnconfirmedTransactionsTest() throws ApiException {
        TransactionIds transactionIds = null;
        List<TransactionInfoDTO> response = api.getUnconfirmedTransactions(transactionIds);
        // TODO: test validations
    }

    /**
     * Search confirmed transactions
     *
     * Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchConfirmedTransactionsTest() throws ApiException {
        String address = null;
        String recipientAddress = null;
        String signerPublicKey = null;
        String height = null;
        String fromHeight = null;
        String toHeight = null;
        String fromTransferAmount = null;
        String toTransferAmount = null;
        List<TransactionTypeEnum> type = null;
        Boolean embedded = null;
        String transferMosaicId = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String offset = null;
        Order order = null;
        TransactionPage response = api.searchConfirmedTransactions(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
        // TODO: test validations
    }

    /**
     * Search partial transactions
     *
     * Returns an array of partial transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPartialTransactionsTest() throws ApiException {
        String address = null;
        String recipientAddress = null;
        String signerPublicKey = null;
        String height = null;
        String fromHeight = null;
        String toHeight = null;
        String fromTransferAmount = null;
        String toTransferAmount = null;
        List<TransactionTypeEnum> type = null;
        Boolean embedded = null;
        String transferMosaicId = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String offset = null;
        Order order = null;
        TransactionPage response = api.searchPartialTransactions(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
        // TODO: test validations
    }

    /**
     * Search unconfirmed transactions
     *
     * Returns an array of unconfirmed transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUnconfirmedTransactionsTest() throws ApiException {
        String address = null;
        String recipientAddress = null;
        String signerPublicKey = null;
        String height = null;
        String fromHeight = null;
        String toHeight = null;
        String fromTransferAmount = null;
        String toTransferAmount = null;
        List<TransactionTypeEnum> type = null;
        Boolean embedded = null;
        String transferMosaicId = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        String offset = null;
        Order order = null;
        TransactionPage response = api.searchUnconfirmedTransactions(address, recipientAddress, signerPublicKey, height, fromHeight, toHeight, fromTransferAmount, toTransferAmount, type, embedded, transferMosaicId, pageSize, pageNumber, offset, order);
        // TODO: test validations
    }

}
