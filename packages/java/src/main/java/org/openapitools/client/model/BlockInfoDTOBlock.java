/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BlockDTO;
import org.openapitools.client.model.ImportanceBlockDTO;
import org.openapitools.client.model.NetworkTypeEnum;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class BlockInfoDTOBlock extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(BlockInfoDTOBlock.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!BlockInfoDTOBlock.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'BlockInfoDTOBlock' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BlockDTO> adapterBlockDTO = gson.getDelegateAdapter(this, TypeToken.get(BlockDTO.class));
            final TypeAdapter<ImportanceBlockDTO> adapterImportanceBlockDTO = gson.getDelegateAdapter(this, TypeToken.get(ImportanceBlockDTO.class));

            return (TypeAdapter<T>) new TypeAdapter<BlockInfoDTOBlock>() {
                @Override
                public void write(JsonWriter out, BlockInfoDTOBlock value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `BlockDTO`
                    if (value.getActualInstance() instanceof BlockDTO) {
                      JsonElement element = adapterBlockDTO.toJsonTree((BlockDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `ImportanceBlockDTO`
                    if (value.getActualInstance() instanceof ImportanceBlockDTO) {
                      JsonElement element = adapterImportanceBlockDTO.toJsonTree((ImportanceBlockDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemae: BlockDTO, ImportanceBlockDTO");
                }

                @Override
                public BlockInfoDTOBlock read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize BlockDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BlockDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterBlockDTO;
                      BlockInfoDTOBlock ret = new BlockInfoDTOBlock();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BlockDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BlockDTO'", e);
                    }
                    // deserialize ImportanceBlockDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      ImportanceBlockDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterImportanceBlockDTO;
                      BlockInfoDTOBlock ret = new BlockInfoDTOBlock();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for ImportanceBlockDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'ImportanceBlockDTO'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for BlockInfoDTOBlock: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public BlockInfoDTOBlock() {
        super("anyOf", Boolean.FALSE);
    }

    public BlockInfoDTOBlock(BlockDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public BlockInfoDTOBlock(ImportanceBlockDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BlockDTO", BlockDTO.class);
        schemas.put("ImportanceBlockDTO", ImportanceBlockDTO.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return BlockInfoDTOBlock.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * BlockDTO, ImportanceBlockDTO
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof BlockDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ImportanceBlockDTO) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BlockDTO, ImportanceBlockDTO");
    }

    /**
     * Get the actual instance, which can be the following:
     * BlockDTO, ImportanceBlockDTO
     *
     * @return The actual instance (BlockDTO, ImportanceBlockDTO)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BlockDTO`. If the actual instance is not `BlockDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BlockDTO`
     * @throws ClassCastException if the instance is not `BlockDTO`
     */
    public BlockDTO getBlockDTO() throws ClassCastException {
        return (BlockDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ImportanceBlockDTO`. If the actual instance is not `ImportanceBlockDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ImportanceBlockDTO`
     * @throws ClassCastException if the instance is not `ImportanceBlockDTO`
     */
    public ImportanceBlockDTO getImportanceBlockDTO() throws ClassCastException {
        return (ImportanceBlockDTO)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlockInfoDTOBlock
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate anyOf schemas one by one
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with BlockDTO
    try {
      BlockDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BlockDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ImportanceBlockDTO
    try {
      ImportanceBlockDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for ImportanceBlockDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    throw new IOException(String.format("The JSON string is invalid for BlockInfoDTOBlock with anyOf schemas: BlockDTO, ImportanceBlockDTO. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    
  }

 /**
  * Create an instance of BlockInfoDTOBlock given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlockInfoDTOBlock
  * @throws IOException if the JSON string is invalid with respect to BlockInfoDTOBlock
  */
  public static BlockInfoDTOBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockInfoDTOBlock.class);
  }

 /**
  * Convert an instance of BlockInfoDTOBlock to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

