/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeploymentDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class DeploymentDTO {
  public static final String SERIALIZED_NAME_DEPLOYMENT_TOOL = "deploymentTool";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_TOOL)
  private String deploymentTool;

  public static final String SERIALIZED_NAME_DEPLOYMENT_TOOL_VERSION = "deploymentToolVersion";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_TOOL_VERSION)
  private String deploymentToolVersion;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE = "lastUpdatedDate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE)
  private String lastUpdatedDate;

  public DeploymentDTO() {
  }

  public DeploymentDTO deploymentTool(String deploymentTool) {
    this.deploymentTool = deploymentTool;
    return this;
  }

   /**
   * The tool used to create, maintain and deploy the node. Examples: symbol-bootstrap, manual.
   * @return deploymentTool
  **/
  @javax.annotation.Nonnull
  public String getDeploymentTool() {
    return deploymentTool;
  }

  public void setDeploymentTool(String deploymentTool) {
    this.deploymentTool = deploymentTool;
  }


  public DeploymentDTO deploymentToolVersion(String deploymentToolVersion) {
    this.deploymentToolVersion = deploymentToolVersion;
    return this;
  }

   /**
   * The version of the tool used to create, maintain and deploy the node.
   * @return deploymentToolVersion
  **/
  @javax.annotation.Nonnull
  public String getDeploymentToolVersion() {
    return deploymentToolVersion;
  }

  public void setDeploymentToolVersion(String deploymentToolVersion) {
    this.deploymentToolVersion = deploymentToolVersion;
  }


  public DeploymentDTO lastUpdatedDate(String lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
    return this;
  }

   /**
   * When was the node last upgraded.
   * @return lastUpdatedDate
  **/
  @javax.annotation.Nonnull
  public String getLastUpdatedDate() {
    return lastUpdatedDate;
  }

  public void setLastUpdatedDate(String lastUpdatedDate) {
    this.lastUpdatedDate = lastUpdatedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentDTO deploymentDTO = (DeploymentDTO) o;
    return Objects.equals(this.deploymentTool, deploymentDTO.deploymentTool) &&
        Objects.equals(this.deploymentToolVersion, deploymentDTO.deploymentToolVersion) &&
        Objects.equals(this.lastUpdatedDate, deploymentDTO.lastUpdatedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentTool, deploymentToolVersion, lastUpdatedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentDTO {\n");
    sb.append("    deploymentTool: ").append(toIndentedString(deploymentTool)).append("\n");
    sb.append("    deploymentToolVersion: ").append(toIndentedString(deploymentToolVersion)).append("\n");
    sb.append("    lastUpdatedDate: ").append(toIndentedString(lastUpdatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deploymentTool");
    openapiFields.add("deploymentToolVersion");
    openapiFields.add("lastUpdatedDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("deploymentTool");
    openapiRequiredFields.add("deploymentToolVersion");
    openapiRequiredFields.add("lastUpdatedDate");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DeploymentDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeploymentDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeploymentDTO is not found in the empty JSON string", DeploymentDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeploymentDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeploymentDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeploymentDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("deploymentTool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentTool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentTool").toString()));
      }
      if (!jsonObj.get("deploymentToolVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentToolVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentToolVersion").toString()));
      }
      if (!jsonObj.get("lastUpdatedDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdatedDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdatedDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeploymentDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeploymentDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeploymentDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeploymentDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<DeploymentDTO>() {
           @Override
           public void write(JsonWriter out, DeploymentDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeploymentDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeploymentDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeploymentDTO
  * @throws IOException if the JSON string is invalid with respect to DeploymentDTO
  */
  public static DeploymentDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeploymentDTO.class);
  }

 /**
  * Convert an instance of DeploymentDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

