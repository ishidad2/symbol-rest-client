/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionFeesDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class TransactionFeesDTO {
  public static final String SERIALIZED_NAME_AVERAGE_FEE_MULTIPLIER = "averageFeeMultiplier";
  @SerializedName(SERIALIZED_NAME_AVERAGE_FEE_MULTIPLIER)
  private Long averageFeeMultiplier;

  public static final String SERIALIZED_NAME_MEDIAN_FEE_MULTIPLIER = "medianFeeMultiplier";
  @SerializedName(SERIALIZED_NAME_MEDIAN_FEE_MULTIPLIER)
  private Long medianFeeMultiplier;

  public static final String SERIALIZED_NAME_HIGHEST_FEE_MULTIPLIER = "highestFeeMultiplier";
  @SerializedName(SERIALIZED_NAME_HIGHEST_FEE_MULTIPLIER)
  private Long highestFeeMultiplier;

  public static final String SERIALIZED_NAME_LOWEST_FEE_MULTIPLIER = "lowestFeeMultiplier";
  @SerializedName(SERIALIZED_NAME_LOWEST_FEE_MULTIPLIER)
  private Long lowestFeeMultiplier;

  public static final String SERIALIZED_NAME_MIN_FEE_MULTIPLIER = "minFeeMultiplier";
  @SerializedName(SERIALIZED_NAME_MIN_FEE_MULTIPLIER)
  private Long minFeeMultiplier;

  public TransactionFeesDTO() {
  }

  public TransactionFeesDTO averageFeeMultiplier(Long averageFeeMultiplier) {
    this.averageFeeMultiplier = averageFeeMultiplier;
    return this;
  }

   /**
   * Fee multiplier applied to transactions contained in block.
   * @return averageFeeMultiplier
  **/
  @javax.annotation.Nonnull
  public Long getAverageFeeMultiplier() {
    return averageFeeMultiplier;
  }

  public void setAverageFeeMultiplier(Long averageFeeMultiplier) {
    this.averageFeeMultiplier = averageFeeMultiplier;
  }


  public TransactionFeesDTO medianFeeMultiplier(Long medianFeeMultiplier) {
    this.medianFeeMultiplier = medianFeeMultiplier;
    return this;
  }

   /**
   * Fee multiplier applied to transactions contained in block.
   * @return medianFeeMultiplier
  **/
  @javax.annotation.Nonnull
  public Long getMedianFeeMultiplier() {
    return medianFeeMultiplier;
  }

  public void setMedianFeeMultiplier(Long medianFeeMultiplier) {
    this.medianFeeMultiplier = medianFeeMultiplier;
  }


  public TransactionFeesDTO highestFeeMultiplier(Long highestFeeMultiplier) {
    this.highestFeeMultiplier = highestFeeMultiplier;
    return this;
  }

   /**
   * Fee multiplier applied to transactions contained in block.
   * @return highestFeeMultiplier
  **/
  @javax.annotation.Nonnull
  public Long getHighestFeeMultiplier() {
    return highestFeeMultiplier;
  }

  public void setHighestFeeMultiplier(Long highestFeeMultiplier) {
    this.highestFeeMultiplier = highestFeeMultiplier;
  }


  public TransactionFeesDTO lowestFeeMultiplier(Long lowestFeeMultiplier) {
    this.lowestFeeMultiplier = lowestFeeMultiplier;
    return this;
  }

   /**
   * Fee multiplier applied to transactions contained in block.
   * @return lowestFeeMultiplier
  **/
  @javax.annotation.Nonnull
  public Long getLowestFeeMultiplier() {
    return lowestFeeMultiplier;
  }

  public void setLowestFeeMultiplier(Long lowestFeeMultiplier) {
    this.lowestFeeMultiplier = lowestFeeMultiplier;
  }


  public TransactionFeesDTO minFeeMultiplier(Long minFeeMultiplier) {
    this.minFeeMultiplier = minFeeMultiplier;
    return this;
  }

   /**
   * Fee multiplier applied to transactions contained in block.
   * @return minFeeMultiplier
  **/
  @javax.annotation.Nonnull
  public Long getMinFeeMultiplier() {
    return minFeeMultiplier;
  }

  public void setMinFeeMultiplier(Long minFeeMultiplier) {
    this.minFeeMultiplier = minFeeMultiplier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionFeesDTO transactionFeesDTO = (TransactionFeesDTO) o;
    return Objects.equals(this.averageFeeMultiplier, transactionFeesDTO.averageFeeMultiplier) &&
        Objects.equals(this.medianFeeMultiplier, transactionFeesDTO.medianFeeMultiplier) &&
        Objects.equals(this.highestFeeMultiplier, transactionFeesDTO.highestFeeMultiplier) &&
        Objects.equals(this.lowestFeeMultiplier, transactionFeesDTO.lowestFeeMultiplier) &&
        Objects.equals(this.minFeeMultiplier, transactionFeesDTO.minFeeMultiplier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageFeeMultiplier, medianFeeMultiplier, highestFeeMultiplier, lowestFeeMultiplier, minFeeMultiplier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionFeesDTO {\n");
    sb.append("    averageFeeMultiplier: ").append(toIndentedString(averageFeeMultiplier)).append("\n");
    sb.append("    medianFeeMultiplier: ").append(toIndentedString(medianFeeMultiplier)).append("\n");
    sb.append("    highestFeeMultiplier: ").append(toIndentedString(highestFeeMultiplier)).append("\n");
    sb.append("    lowestFeeMultiplier: ").append(toIndentedString(lowestFeeMultiplier)).append("\n");
    sb.append("    minFeeMultiplier: ").append(toIndentedString(minFeeMultiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("averageFeeMultiplier");
    openapiFields.add("medianFeeMultiplier");
    openapiFields.add("highestFeeMultiplier");
    openapiFields.add("lowestFeeMultiplier");
    openapiFields.add("minFeeMultiplier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("averageFeeMultiplier");
    openapiRequiredFields.add("medianFeeMultiplier");
    openapiRequiredFields.add("highestFeeMultiplier");
    openapiRequiredFields.add("lowestFeeMultiplier");
    openapiRequiredFields.add("minFeeMultiplier");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionFeesDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionFeesDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionFeesDTO is not found in the empty JSON string", TransactionFeesDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionFeesDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionFeesDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionFeesDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionFeesDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionFeesDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionFeesDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionFeesDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionFeesDTO>() {
           @Override
           public void write(JsonWriter out, TransactionFeesDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionFeesDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionFeesDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionFeesDTO
  * @throws IOException if the JSON string is invalid with respect to TransactionFeesDTO
  */
  public static TransactionFeesDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionFeesDTO.class);
  }

 /**
  * Convert an instance of TransactionFeesDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

