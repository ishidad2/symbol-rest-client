/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountTypeEnum;
import org.openapitools.client.model.ActivityBucketDTO;
import org.openapitools.client.model.Mosaic;
import org.openapitools.client.model.SupplementalPublicKeysDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class AccountDTO {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ADDRESS_HEIGHT = "addressHeight";
  @SerializedName(SERIALIZED_NAME_ADDRESS_HEIGHT)
  private String addressHeight;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_PUBLIC_KEY_HEIGHT = "publicKeyHeight";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_HEIGHT)
  private String publicKeyHeight;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private AccountTypeEnum accountType;

  public static final String SERIALIZED_NAME_SUPPLEMENTAL_PUBLIC_KEYS = "supplementalPublicKeys";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENTAL_PUBLIC_KEYS)
  private SupplementalPublicKeysDTO supplementalPublicKeys;

  public static final String SERIALIZED_NAME_ACTIVITY_BUCKETS = "activityBuckets";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_BUCKETS)
  private List<ActivityBucketDTO> activityBuckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOSAICS = "mosaics";
  @SerializedName(SERIALIZED_NAME_MOSAICS)
  private List<Mosaic> mosaics = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMPORTANCE = "importance";
  @SerializedName(SERIALIZED_NAME_IMPORTANCE)
  private String importance;

  public static final String SERIALIZED_NAME_IMPORTANCE_HEIGHT = "importanceHeight";
  @SerializedName(SERIALIZED_NAME_IMPORTANCE_HEIGHT)
  private String importanceHeight;

  public AccountDTO() {
  }

  public AccountDTO version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the state
   * @return version
  **/
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public AccountDTO address(String address) {
    this.address = address;
    return this;
  }

   /**
   * Address encoded using a 32-character set.
   * @return address
  **/
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public AccountDTO addressHeight(String addressHeight) {
    this.addressHeight = addressHeight;
    return this;
  }

   /**
   * Height of the blockchain.
   * @return addressHeight
  **/
  @javax.annotation.Nonnull
  public String getAddressHeight() {
    return addressHeight;
  }

  public void setAddressHeight(String addressHeight) {
    this.addressHeight = addressHeight;
  }


  public AccountDTO publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Public key.
   * @return publicKey
  **/
  @javax.annotation.Nonnull
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public AccountDTO publicKeyHeight(String publicKeyHeight) {
    this.publicKeyHeight = publicKeyHeight;
    return this;
  }

   /**
   * Height of the blockchain.
   * @return publicKeyHeight
  **/
  @javax.annotation.Nonnull
  public String getPublicKeyHeight() {
    return publicKeyHeight;
  }

  public void setPublicKeyHeight(String publicKeyHeight) {
    this.publicKeyHeight = publicKeyHeight;
  }


  public AccountDTO accountType(AccountTypeEnum accountType) {
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @javax.annotation.Nonnull
  public AccountTypeEnum getAccountType() {
    return accountType;
  }

  public void setAccountType(AccountTypeEnum accountType) {
    this.accountType = accountType;
  }


  public AccountDTO supplementalPublicKeys(SupplementalPublicKeysDTO supplementalPublicKeys) {
    this.supplementalPublicKeys = supplementalPublicKeys;
    return this;
  }

   /**
   * Get supplementalPublicKeys
   * @return supplementalPublicKeys
  **/
  @javax.annotation.Nonnull
  public SupplementalPublicKeysDTO getSupplementalPublicKeys() {
    return supplementalPublicKeys;
  }

  public void setSupplementalPublicKeys(SupplementalPublicKeysDTO supplementalPublicKeys) {
    this.supplementalPublicKeys = supplementalPublicKeys;
  }


  public AccountDTO activityBuckets(List<ActivityBucketDTO> activityBuckets) {
    this.activityBuckets = activityBuckets;
    return this;
  }

  public AccountDTO addActivityBucketsItem(ActivityBucketDTO activityBucketsItem) {
    if (this.activityBuckets == null) {
      this.activityBuckets = new ArrayList<>();
    }
    this.activityBuckets.add(activityBucketsItem);
    return this;
  }

   /**
   * Get activityBuckets
   * @return activityBuckets
  **/
  @javax.annotation.Nonnull
  public List<ActivityBucketDTO> getActivityBuckets() {
    return activityBuckets;
  }

  public void setActivityBuckets(List<ActivityBucketDTO> activityBuckets) {
    this.activityBuckets = activityBuckets;
  }


  public AccountDTO mosaics(List<Mosaic> mosaics) {
    this.mosaics = mosaics;
    return this;
  }

  public AccountDTO addMosaicsItem(Mosaic mosaicsItem) {
    if (this.mosaics == null) {
      this.mosaics = new ArrayList<>();
    }
    this.mosaics.add(mosaicsItem);
    return this;
  }

   /**
   * Mosaic units owned.
   * @return mosaics
  **/
  @javax.annotation.Nonnull
  public List<Mosaic> getMosaics() {
    return mosaics;
  }

  public void setMosaics(List<Mosaic> mosaics) {
    this.mosaics = mosaics;
  }


  public AccountDTO importance(String importance) {
    this.importance = importance;
    return this;
  }

   /**
   * Probability of an account to harvest the next block.
   * @return importance
  **/
  @javax.annotation.Nonnull
  public String getImportance() {
    return importance;
  }

  public void setImportance(String importance) {
    this.importance = importance;
  }


  public AccountDTO importanceHeight(String importanceHeight) {
    this.importanceHeight = importanceHeight;
    return this;
  }

   /**
   * Height of the blockchain.
   * @return importanceHeight
  **/
  @javax.annotation.Nonnull
  public String getImportanceHeight() {
    return importanceHeight;
  }

  public void setImportanceHeight(String importanceHeight) {
    this.importanceHeight = importanceHeight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountDTO accountDTO = (AccountDTO) o;
    return Objects.equals(this.version, accountDTO.version) &&
        Objects.equals(this.address, accountDTO.address) &&
        Objects.equals(this.addressHeight, accountDTO.addressHeight) &&
        Objects.equals(this.publicKey, accountDTO.publicKey) &&
        Objects.equals(this.publicKeyHeight, accountDTO.publicKeyHeight) &&
        Objects.equals(this.accountType, accountDTO.accountType) &&
        Objects.equals(this.supplementalPublicKeys, accountDTO.supplementalPublicKeys) &&
        Objects.equals(this.activityBuckets, accountDTO.activityBuckets) &&
        Objects.equals(this.mosaics, accountDTO.mosaics) &&
        Objects.equals(this.importance, accountDTO.importance) &&
        Objects.equals(this.importanceHeight, accountDTO.importanceHeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, address, addressHeight, publicKey, publicKeyHeight, accountType, supplementalPublicKeys, activityBuckets, mosaics, importance, importanceHeight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountDTO {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    addressHeight: ").append(toIndentedString(addressHeight)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    publicKeyHeight: ").append(toIndentedString(publicKeyHeight)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    supplementalPublicKeys: ").append(toIndentedString(supplementalPublicKeys)).append("\n");
    sb.append("    activityBuckets: ").append(toIndentedString(activityBuckets)).append("\n");
    sb.append("    mosaics: ").append(toIndentedString(mosaics)).append("\n");
    sb.append("    importance: ").append(toIndentedString(importance)).append("\n");
    sb.append("    importanceHeight: ").append(toIndentedString(importanceHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("address");
    openapiFields.add("addressHeight");
    openapiFields.add("publicKey");
    openapiFields.add("publicKeyHeight");
    openapiFields.add("accountType");
    openapiFields.add("supplementalPublicKeys");
    openapiFields.add("activityBuckets");
    openapiFields.add("mosaics");
    openapiFields.add("importance");
    openapiFields.add("importanceHeight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("addressHeight");
    openapiRequiredFields.add("publicKey");
    openapiRequiredFields.add("publicKeyHeight");
    openapiRequiredFields.add("accountType");
    openapiRequiredFields.add("supplementalPublicKeys");
    openapiRequiredFields.add("activityBuckets");
    openapiRequiredFields.add("mosaics");
    openapiRequiredFields.add("importance");
    openapiRequiredFields.add("importanceHeight");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AccountDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountDTO is not found in the empty JSON string", AccountDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("addressHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressHeight").toString()));
      }
      if (!jsonObj.get("publicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKey").toString()));
      }
      if (!jsonObj.get("publicKeyHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKeyHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKeyHeight").toString()));
      }
      // validate the required field `accountType`
      AccountTypeEnum.validateJsonElement(jsonObj.get("accountType"));
      // validate the required field `supplementalPublicKeys`
      SupplementalPublicKeysDTO.validateJsonElement(jsonObj.get("supplementalPublicKeys"));
      // ensure the json data is an array
      if (!jsonObj.get("activityBuckets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityBuckets` to be an array in the JSON string but got `%s`", jsonObj.get("activityBuckets").toString()));
      }

      JsonArray jsonArrayactivityBuckets = jsonObj.getAsJsonArray("activityBuckets");
      // validate the required field `activityBuckets` (array)
      for (int i = 0; i < jsonArrayactivityBuckets.size(); i++) {
        ActivityBucketDTO.validateJsonElement(jsonArrayactivityBuckets.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("mosaics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mosaics` to be an array in the JSON string but got `%s`", jsonObj.get("mosaics").toString()));
      }

      JsonArray jsonArraymosaics = jsonObj.getAsJsonArray("mosaics");
      // validate the required field `mosaics` (array)
      for (int i = 0; i < jsonArraymosaics.size(); i++) {
        Mosaic.validateJsonElement(jsonArraymosaics.get(i));
      };
      if (!jsonObj.get("importance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importance").toString()));
      }
      if (!jsonObj.get("importanceHeight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importanceHeight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importanceHeight").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountDTO>() {
           @Override
           public void write(JsonWriter out, AccountDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountDTO
  * @throws IOException if the JSON string is invalid with respect to AccountDTO
  */
  public static AccountDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountDTO.class);
  }

 /**
  * Convert an instance of AccountDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

