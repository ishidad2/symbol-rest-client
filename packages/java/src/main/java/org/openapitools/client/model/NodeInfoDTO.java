/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NodeInfoDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class NodeInfoDTO {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_NETWORK_GENERATION_HASH_SEED = "networkGenerationHashSeed";
  @SerializedName(SERIALIZED_NAME_NETWORK_GENERATION_HASH_SEED)
  private String networkGenerationHashSeed;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private Integer roles;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_NETWORK_IDENTIFIER = "networkIdentifier";
  @SerializedName(SERIALIZED_NAME_NETWORK_IDENTIFIER)
  private Integer networkIdentifier;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_NODE_PUBLIC_KEY = "nodePublicKey";
  @SerializedName(SERIALIZED_NAME_NODE_PUBLIC_KEY)
  private String nodePublicKey;

  public NodeInfoDTO() {
  }

  public NodeInfoDTO version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Version of the application.
   * @return version
  **/
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public NodeInfoDTO publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Public key.
   * @return publicKey
  **/
  @javax.annotation.Nonnull
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public NodeInfoDTO networkGenerationHashSeed(String networkGenerationHashSeed) {
    this.networkGenerationHashSeed = networkGenerationHashSeed;
    return this;
  }

   /**
   * Get networkGenerationHashSeed
   * @return networkGenerationHashSeed
  **/
  @javax.annotation.Nonnull
  public String getNetworkGenerationHashSeed() {
    return networkGenerationHashSeed;
  }

  public void setNetworkGenerationHashSeed(String networkGenerationHashSeed) {
    this.networkGenerationHashSeed = networkGenerationHashSeed;
  }


  public NodeInfoDTO roles(Integer roles) {
    this.roles = roles;
    return this;
  }

   /**
   * A number that defines the different roles the node provides. Possible roles are: * 1 - Peer node. * 2 - Api node. * 4 - Voting node. * 64 - IPv4 compatible node * 128 - IPv6 compatible node.  The values are bitwise added together, Examples: 1 &#x3D; Just Peer. 2 &#x3D; Just Api. 3 &#x3D; Peer and Api node. 7 &#x3D; Peer, Api and Voting node. 65 &#x3D; IPv4 and Peer node. 
   * @return roles
  **/
  @javax.annotation.Nonnull
  public Integer getRoles() {
    return roles;
  }

  public void setRoles(Integer roles) {
    this.roles = roles;
  }


  public NodeInfoDTO port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Port used for the communication.
   * @return port
  **/
  @javax.annotation.Nonnull
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public NodeInfoDTO networkIdentifier(Integer networkIdentifier) {
    this.networkIdentifier = networkIdentifier;
    return this;
  }

   /**
   * Get networkIdentifier
   * @return networkIdentifier
  **/
  @javax.annotation.Nonnull
  public Integer getNetworkIdentifier() {
    return networkIdentifier;
  }

  public void setNetworkIdentifier(Integer networkIdentifier) {
    this.networkIdentifier = networkIdentifier;
  }


  public NodeInfoDTO friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

   /**
   * Node friendly name.
   * @return friendlyName
  **/
  @javax.annotation.Nonnull
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public NodeInfoDTO host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Node IP address.
   * @return host
  **/
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public NodeInfoDTO nodePublicKey(String nodePublicKey) {
    this.nodePublicKey = nodePublicKey;
    return this;
  }

   /**
   * Public key.
   * @return nodePublicKey
  **/
  @javax.annotation.Nullable
  public String getNodePublicKey() {
    return nodePublicKey;
  }

  public void setNodePublicKey(String nodePublicKey) {
    this.nodePublicKey = nodePublicKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInfoDTO nodeInfoDTO = (NodeInfoDTO) o;
    return Objects.equals(this.version, nodeInfoDTO.version) &&
        Objects.equals(this.publicKey, nodeInfoDTO.publicKey) &&
        Objects.equals(this.networkGenerationHashSeed, nodeInfoDTO.networkGenerationHashSeed) &&
        Objects.equals(this.roles, nodeInfoDTO.roles) &&
        Objects.equals(this.port, nodeInfoDTO.port) &&
        Objects.equals(this.networkIdentifier, nodeInfoDTO.networkIdentifier) &&
        Objects.equals(this.friendlyName, nodeInfoDTO.friendlyName) &&
        Objects.equals(this.host, nodeInfoDTO.host) &&
        Objects.equals(this.nodePublicKey, nodeInfoDTO.nodePublicKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, publicKey, networkGenerationHashSeed, roles, port, networkIdentifier, friendlyName, host, nodePublicKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInfoDTO {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    networkGenerationHashSeed: ").append(toIndentedString(networkGenerationHashSeed)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    networkIdentifier: ").append(toIndentedString(networkIdentifier)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    nodePublicKey: ").append(toIndentedString(nodePublicKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("publicKey");
    openapiFields.add("networkGenerationHashSeed");
    openapiFields.add("roles");
    openapiFields.add("port");
    openapiFields.add("networkIdentifier");
    openapiFields.add("friendlyName");
    openapiFields.add("host");
    openapiFields.add("nodePublicKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("publicKey");
    openapiRequiredFields.add("networkGenerationHashSeed");
    openapiRequiredFields.add("roles");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("networkIdentifier");
    openapiRequiredFields.add("friendlyName");
    openapiRequiredFields.add("host");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NodeInfoDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeInfoDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeInfoDTO is not found in the empty JSON string", NodeInfoDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeInfoDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeInfoDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeInfoDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("publicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKey").toString()));
      }
      if (!jsonObj.get("networkGenerationHashSeed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkGenerationHashSeed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkGenerationHashSeed").toString()));
      }
      if (!jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("nodePublicKey") != null && !jsonObj.get("nodePublicKey").isJsonNull()) && !jsonObj.get("nodePublicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodePublicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodePublicKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeInfoDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeInfoDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeInfoDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeInfoDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeInfoDTO>() {
           @Override
           public void write(JsonWriter out, NodeInfoDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeInfoDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NodeInfoDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NodeInfoDTO
  * @throws IOException if the JSON string is invalid with respect to NodeInfoDTO
  */
  public static NodeInfoDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeInfoDTO.class);
  }

 /**
  * Convert an instance of NodeInfoDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

