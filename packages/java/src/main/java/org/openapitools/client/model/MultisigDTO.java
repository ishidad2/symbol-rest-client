/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MultisigDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class MultisigDTO {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_ACCOUNT_ADDRESS = "accountAddress";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ADDRESS)
  private String accountAddress;

  public static final String SERIALIZED_NAME_MIN_APPROVAL = "minApproval";
  @SerializedName(SERIALIZED_NAME_MIN_APPROVAL)
  private Long minApproval;

  public static final String SERIALIZED_NAME_MIN_REMOVAL = "minRemoval";
  @SerializedName(SERIALIZED_NAME_MIN_REMOVAL)
  private Long minRemoval;

  public static final String SERIALIZED_NAME_COSIGNATORY_ADDRESSES = "cosignatoryAddresses";
  @SerializedName(SERIALIZED_NAME_COSIGNATORY_ADDRESSES)
  private List<String> cosignatoryAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_MULTISIG_ADDRESSES = "multisigAddresses";
  @SerializedName(SERIALIZED_NAME_MULTISIG_ADDRESSES)
  private List<String> multisigAddresses = new ArrayList<>();

  public MultisigDTO() {
  }

  public MultisigDTO version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the state
   * @return version
  **/
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public MultisigDTO accountAddress(String accountAddress) {
    this.accountAddress = accountAddress;
    return this;
  }

   /**
   * Address encoded using a 32-character set.
   * @return accountAddress
  **/
  @javax.annotation.Nonnull
  public String getAccountAddress() {
    return accountAddress;
  }

  public void setAccountAddress(String accountAddress) {
    this.accountAddress = accountAddress;
  }


  public MultisigDTO minApproval(Long minApproval) {
    this.minApproval = minApproval;
    return this;
  }

   /**
   * A number that allows uint 32 values.
   * @return minApproval
  **/
  @javax.annotation.Nonnull
  public Long getMinApproval() {
    return minApproval;
  }

  public void setMinApproval(Long minApproval) {
    this.minApproval = minApproval;
  }


  public MultisigDTO minRemoval(Long minRemoval) {
    this.minRemoval = minRemoval;
    return this;
  }

   /**
   * A number that allows uint 32 values.
   * @return minRemoval
  **/
  @javax.annotation.Nonnull
  public Long getMinRemoval() {
    return minRemoval;
  }

  public void setMinRemoval(Long minRemoval) {
    this.minRemoval = minRemoval;
  }


  public MultisigDTO cosignatoryAddresses(List<String> cosignatoryAddresses) {
    this.cosignatoryAddresses = cosignatoryAddresses;
    return this;
  }

  public MultisigDTO addCosignatoryAddressesItem(String cosignatoryAddressesItem) {
    if (this.cosignatoryAddresses == null) {
      this.cosignatoryAddresses = new ArrayList<>();
    }
    this.cosignatoryAddresses.add(cosignatoryAddressesItem);
    return this;
  }

   /**
   * Addresses of the cosignatory accounts.
   * @return cosignatoryAddresses
  **/
  @javax.annotation.Nonnull
  public List<String> getCosignatoryAddresses() {
    return cosignatoryAddresses;
  }

  public void setCosignatoryAddresses(List<String> cosignatoryAddresses) {
    this.cosignatoryAddresses = cosignatoryAddresses;
  }


  public MultisigDTO multisigAddresses(List<String> multisigAddresses) {
    this.multisigAddresses = multisigAddresses;
    return this;
  }

  public MultisigDTO addMultisigAddressesItem(String multisigAddressesItem) {
    if (this.multisigAddresses == null) {
      this.multisigAddresses = new ArrayList<>();
    }
    this.multisigAddresses.add(multisigAddressesItem);
    return this;
  }

   /**
   * Multisig accounts where the account is cosignatory.
   * @return multisigAddresses
  **/
  @javax.annotation.Nonnull
  public List<String> getMultisigAddresses() {
    return multisigAddresses;
  }

  public void setMultisigAddresses(List<String> multisigAddresses) {
    this.multisigAddresses = multisigAddresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultisigDTO multisigDTO = (MultisigDTO) o;
    return Objects.equals(this.version, multisigDTO.version) &&
        Objects.equals(this.accountAddress, multisigDTO.accountAddress) &&
        Objects.equals(this.minApproval, multisigDTO.minApproval) &&
        Objects.equals(this.minRemoval, multisigDTO.minRemoval) &&
        Objects.equals(this.cosignatoryAddresses, multisigDTO.cosignatoryAddresses) &&
        Objects.equals(this.multisigAddresses, multisigDTO.multisigAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, accountAddress, minApproval, minRemoval, cosignatoryAddresses, multisigAddresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultisigDTO {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    accountAddress: ").append(toIndentedString(accountAddress)).append("\n");
    sb.append("    minApproval: ").append(toIndentedString(minApproval)).append("\n");
    sb.append("    minRemoval: ").append(toIndentedString(minRemoval)).append("\n");
    sb.append("    cosignatoryAddresses: ").append(toIndentedString(cosignatoryAddresses)).append("\n");
    sb.append("    multisigAddresses: ").append(toIndentedString(multisigAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("accountAddress");
    openapiFields.add("minApproval");
    openapiFields.add("minRemoval");
    openapiFields.add("cosignatoryAddresses");
    openapiFields.add("multisigAddresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("accountAddress");
    openapiRequiredFields.add("minApproval");
    openapiRequiredFields.add("minRemoval");
    openapiRequiredFields.add("cosignatoryAddresses");
    openapiRequiredFields.add("multisigAddresses");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MultisigDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultisigDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultisigDTO is not found in the empty JSON string", MultisigDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultisigDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultisigDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MultisigDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountAddress").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("cosignatoryAddresses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("cosignatoryAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cosignatoryAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("cosignatoryAddresses").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("multisigAddresses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("multisigAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `multisigAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("multisigAddresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultisigDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultisigDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultisigDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultisigDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<MultisigDTO>() {
           @Override
           public void write(JsonWriter out, MultisigDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultisigDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MultisigDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MultisigDTO
  * @throws IOException if the JSON string is invalid with respect to MultisigDTO
  */
  public static MultisigDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultisigDTO.class);
  }

 /**
  * Convert an instance of MultisigDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

