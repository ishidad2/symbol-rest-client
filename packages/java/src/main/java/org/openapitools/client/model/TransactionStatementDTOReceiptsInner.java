/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BalanceChangeReceiptDTO;
import org.openapitools.client.model.BalanceTransferReceiptDTO;
import org.openapitools.client.model.InflationReceiptDTO;
import org.openapitools.client.model.MosaicExpiryReceiptDTO;
import org.openapitools.client.model.NamespaceExpiryReceiptDTO;
import org.openapitools.client.model.ReceiptTypeEnum;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class TransactionStatementDTOReceiptsInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TransactionStatementDTOReceiptsInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TransactionStatementDTOReceiptsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TransactionStatementDTOReceiptsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BalanceTransferReceiptDTO> adapterBalanceTransferReceiptDTO = gson.getDelegateAdapter(this, TypeToken.get(BalanceTransferReceiptDTO.class));
            final TypeAdapter<BalanceChangeReceiptDTO> adapterBalanceChangeReceiptDTO = gson.getDelegateAdapter(this, TypeToken.get(BalanceChangeReceiptDTO.class));
            final TypeAdapter<NamespaceExpiryReceiptDTO> adapterNamespaceExpiryReceiptDTO = gson.getDelegateAdapter(this, TypeToken.get(NamespaceExpiryReceiptDTO.class));
            final TypeAdapter<MosaicExpiryReceiptDTO> adapterMosaicExpiryReceiptDTO = gson.getDelegateAdapter(this, TypeToken.get(MosaicExpiryReceiptDTO.class));
            final TypeAdapter<InflationReceiptDTO> adapterInflationReceiptDTO = gson.getDelegateAdapter(this, TypeToken.get(InflationReceiptDTO.class));

            return (TypeAdapter<T>) new TypeAdapter<TransactionStatementDTOReceiptsInner>() {
                @Override
                public void write(JsonWriter out, TransactionStatementDTOReceiptsInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `BalanceTransferReceiptDTO`
                    if (value.getActualInstance() instanceof BalanceTransferReceiptDTO) {
                      JsonElement element = adapterBalanceTransferReceiptDTO.toJsonTree((BalanceTransferReceiptDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BalanceChangeReceiptDTO`
                    if (value.getActualInstance() instanceof BalanceChangeReceiptDTO) {
                      JsonElement element = adapterBalanceChangeReceiptDTO.toJsonTree((BalanceChangeReceiptDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `NamespaceExpiryReceiptDTO`
                    if (value.getActualInstance() instanceof NamespaceExpiryReceiptDTO) {
                      JsonElement element = adapterNamespaceExpiryReceiptDTO.toJsonTree((NamespaceExpiryReceiptDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MosaicExpiryReceiptDTO`
                    if (value.getActualInstance() instanceof MosaicExpiryReceiptDTO) {
                      JsonElement element = adapterMosaicExpiryReceiptDTO.toJsonTree((MosaicExpiryReceiptDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `InflationReceiptDTO`
                    if (value.getActualInstance() instanceof InflationReceiptDTO) {
                      JsonElement element = adapterInflationReceiptDTO.toJsonTree((InflationReceiptDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemae: BalanceChangeReceiptDTO, BalanceTransferReceiptDTO, InflationReceiptDTO, MosaicExpiryReceiptDTO, NamespaceExpiryReceiptDTO");
                }

                @Override
                public TransactionStatementDTOReceiptsInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize BalanceTransferReceiptDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BalanceTransferReceiptDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterBalanceTransferReceiptDTO;
                      TransactionStatementDTOReceiptsInner ret = new TransactionStatementDTOReceiptsInner();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BalanceTransferReceiptDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BalanceTransferReceiptDTO'", e);
                    }
                    // deserialize BalanceChangeReceiptDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BalanceChangeReceiptDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterBalanceChangeReceiptDTO;
                      TransactionStatementDTOReceiptsInner ret = new TransactionStatementDTOReceiptsInner();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BalanceChangeReceiptDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BalanceChangeReceiptDTO'", e);
                    }
                    // deserialize NamespaceExpiryReceiptDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      NamespaceExpiryReceiptDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterNamespaceExpiryReceiptDTO;
                      TransactionStatementDTOReceiptsInner ret = new TransactionStatementDTOReceiptsInner();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for NamespaceExpiryReceiptDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'NamespaceExpiryReceiptDTO'", e);
                    }
                    // deserialize MosaicExpiryReceiptDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MosaicExpiryReceiptDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMosaicExpiryReceiptDTO;
                      TransactionStatementDTOReceiptsInner ret = new TransactionStatementDTOReceiptsInner();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MosaicExpiryReceiptDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MosaicExpiryReceiptDTO'", e);
                    }
                    // deserialize InflationReceiptDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      InflationReceiptDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterInflationReceiptDTO;
                      TransactionStatementDTOReceiptsInner ret = new TransactionStatementDTOReceiptsInner();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for InflationReceiptDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'InflationReceiptDTO'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for TransactionStatementDTOReceiptsInner: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TransactionStatementDTOReceiptsInner() {
        super("anyOf", Boolean.FALSE);
    }

    public TransactionStatementDTOReceiptsInner(BalanceChangeReceiptDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionStatementDTOReceiptsInner(BalanceTransferReceiptDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionStatementDTOReceiptsInner(InflationReceiptDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionStatementDTOReceiptsInner(MosaicExpiryReceiptDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionStatementDTOReceiptsInner(NamespaceExpiryReceiptDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BalanceTransferReceiptDTO", BalanceTransferReceiptDTO.class);
        schemas.put("BalanceChangeReceiptDTO", BalanceChangeReceiptDTO.class);
        schemas.put("NamespaceExpiryReceiptDTO", NamespaceExpiryReceiptDTO.class);
        schemas.put("MosaicExpiryReceiptDTO", MosaicExpiryReceiptDTO.class);
        schemas.put("InflationReceiptDTO", InflationReceiptDTO.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TransactionStatementDTOReceiptsInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * BalanceChangeReceiptDTO, BalanceTransferReceiptDTO, InflationReceiptDTO, MosaicExpiryReceiptDTO, NamespaceExpiryReceiptDTO
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof BalanceTransferReceiptDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BalanceChangeReceiptDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NamespaceExpiryReceiptDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicExpiryReceiptDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InflationReceiptDTO) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BalanceChangeReceiptDTO, BalanceTransferReceiptDTO, InflationReceiptDTO, MosaicExpiryReceiptDTO, NamespaceExpiryReceiptDTO");
    }

    /**
     * Get the actual instance, which can be the following:
     * BalanceChangeReceiptDTO, BalanceTransferReceiptDTO, InflationReceiptDTO, MosaicExpiryReceiptDTO, NamespaceExpiryReceiptDTO
     *
     * @return The actual instance (BalanceChangeReceiptDTO, BalanceTransferReceiptDTO, InflationReceiptDTO, MosaicExpiryReceiptDTO, NamespaceExpiryReceiptDTO)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BalanceTransferReceiptDTO`. If the actual instance is not `BalanceTransferReceiptDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BalanceTransferReceiptDTO`
     * @throws ClassCastException if the instance is not `BalanceTransferReceiptDTO`
     */
    public BalanceTransferReceiptDTO getBalanceTransferReceiptDTO() throws ClassCastException {
        return (BalanceTransferReceiptDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BalanceChangeReceiptDTO`. If the actual instance is not `BalanceChangeReceiptDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BalanceChangeReceiptDTO`
     * @throws ClassCastException if the instance is not `BalanceChangeReceiptDTO`
     */
    public BalanceChangeReceiptDTO getBalanceChangeReceiptDTO() throws ClassCastException {
        return (BalanceChangeReceiptDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NamespaceExpiryReceiptDTO`. If the actual instance is not `NamespaceExpiryReceiptDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NamespaceExpiryReceiptDTO`
     * @throws ClassCastException if the instance is not `NamespaceExpiryReceiptDTO`
     */
    public NamespaceExpiryReceiptDTO getNamespaceExpiryReceiptDTO() throws ClassCastException {
        return (NamespaceExpiryReceiptDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicExpiryReceiptDTO`. If the actual instance is not `MosaicExpiryReceiptDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicExpiryReceiptDTO`
     * @throws ClassCastException if the instance is not `MosaicExpiryReceiptDTO`
     */
    public MosaicExpiryReceiptDTO getMosaicExpiryReceiptDTO() throws ClassCastException {
        return (MosaicExpiryReceiptDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InflationReceiptDTO`. If the actual instance is not `InflationReceiptDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InflationReceiptDTO`
     * @throws ClassCastException if the instance is not `InflationReceiptDTO`
     */
    public InflationReceiptDTO getInflationReceiptDTO() throws ClassCastException {
        return (InflationReceiptDTO)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionStatementDTOReceiptsInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate anyOf schemas one by one
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with BalanceTransferReceiptDTO
    try {
      BalanceTransferReceiptDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BalanceTransferReceiptDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BalanceChangeReceiptDTO
    try {
      BalanceChangeReceiptDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BalanceChangeReceiptDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with NamespaceExpiryReceiptDTO
    try {
      NamespaceExpiryReceiptDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for NamespaceExpiryReceiptDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MosaicExpiryReceiptDTO
    try {
      MosaicExpiryReceiptDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MosaicExpiryReceiptDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with InflationReceiptDTO
    try {
      InflationReceiptDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for InflationReceiptDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    throw new IOException(String.format("The JSON string is invalid for TransactionStatementDTOReceiptsInner with anyOf schemas: BalanceChangeReceiptDTO, BalanceTransferReceiptDTO, InflationReceiptDTO, MosaicExpiryReceiptDTO, NamespaceExpiryReceiptDTO. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    
  }

 /**
  * Create an instance of TransactionStatementDTOReceiptsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionStatementDTOReceiptsInner
  * @throws IOException if the JSON string is invalid with respect to TransactionStatementDTOReceiptsInner
  */
  public static TransactionStatementDTOReceiptsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionStatementDTOReceiptsInner.class);
  }

 /**
  * Convert an instance of TransactionStatementDTOReceiptsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

