/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountAddressRestrictionTransactionDTO;
import org.openapitools.client.model.AccountKeyLinkTransactionDTO;
import org.openapitools.client.model.AccountMetadataTransactionDTO;
import org.openapitools.client.model.AccountMosaicRestrictionTransactionDTO;
import org.openapitools.client.model.AccountOperationRestrictionTransactionDTO;
import org.openapitools.client.model.AccountRestrictionFlagsEnum;
import org.openapitools.client.model.AddressAliasTransactionDTO;
import org.openapitools.client.model.AggregateTransactionDTO;
import org.openapitools.client.model.AggregateTransactionExtendedDTO;
import org.openapitools.client.model.AliasActionEnum;
import org.openapitools.client.model.CosignatureDTO;
import org.openapitools.client.model.EmbeddedAccountAddressRestrictionTransactionDTO;
import org.openapitools.client.model.EmbeddedAccountKeyLinkTransactionDTO;
import org.openapitools.client.model.EmbeddedAccountMetadataTransactionDTO;
import org.openapitools.client.model.EmbeddedAccountMosaicRestrictionTransactionDTO;
import org.openapitools.client.model.EmbeddedAccountOperationRestrictionTransactionDTO;
import org.openapitools.client.model.EmbeddedAddressAliasTransactionDTO;
import org.openapitools.client.model.EmbeddedHashLockTransactionDTO;
import org.openapitools.client.model.EmbeddedMosaicAddressRestrictionTransactionDTO;
import org.openapitools.client.model.EmbeddedMosaicAliasTransactionDTO;
import org.openapitools.client.model.EmbeddedMosaicDefinitionTransactionDTO;
import org.openapitools.client.model.EmbeddedMosaicGlobalRestrictionTransactionDTO;
import org.openapitools.client.model.EmbeddedMosaicMetadataTransactionDTO;
import org.openapitools.client.model.EmbeddedMosaicSupplyChangeTransactionDTO;
import org.openapitools.client.model.EmbeddedMosaicSupplyRevocationTransactionDTO;
import org.openapitools.client.model.EmbeddedMultisigAccountModificationTransactionDTO;
import org.openapitools.client.model.EmbeddedNamespaceMetadataTransactionDTO;
import org.openapitools.client.model.EmbeddedNamespaceRegistrationTransactionDTO;
import org.openapitools.client.model.EmbeddedNodeKeyLinkTransactionDTO;
import org.openapitools.client.model.EmbeddedSecretLockTransactionDTO;
import org.openapitools.client.model.EmbeddedSecretProofTransactionDTO;
import org.openapitools.client.model.EmbeddedTransactionInfoDTO;
import org.openapitools.client.model.EmbeddedTransferTransactionDTO;
import org.openapitools.client.model.EmbeddedVotingKeyLinkTransactionDTO;
import org.openapitools.client.model.EmbeddedVrfKeyLinkTransactionDTO;
import org.openapitools.client.model.HashLockTransactionDTO;
import org.openapitools.client.model.LinkActionEnum;
import org.openapitools.client.model.LockHashAlgorithmEnum;
import org.openapitools.client.model.MosaicAddressRestrictionTransactionDTO;
import org.openapitools.client.model.MosaicAliasTransactionDTO;
import org.openapitools.client.model.MosaicDefinitionTransactionDTO;
import org.openapitools.client.model.MosaicGlobalRestrictionTransactionDTO;
import org.openapitools.client.model.MosaicMetadataTransactionDTO;
import org.openapitools.client.model.MosaicRestrictionTypeEnum;
import org.openapitools.client.model.MosaicSupplyChangeActionEnum;
import org.openapitools.client.model.MosaicSupplyChangeTransactionDTO;
import org.openapitools.client.model.MosaicSupplyRevocationTransactionDTO;
import org.openapitools.client.model.MultisigAccountModificationTransactionDTO;
import org.openapitools.client.model.NamespaceMetadataTransactionDTO;
import org.openapitools.client.model.NamespaceRegistrationTransactionDTO;
import org.openapitools.client.model.NamespaceRegistrationTypeEnum;
import org.openapitools.client.model.NetworkTypeEnum;
import org.openapitools.client.model.NodeKeyLinkTransactionDTO;
import org.openapitools.client.model.SecretLockTransactionDTO;
import org.openapitools.client.model.SecretProofTransactionDTO;
import org.openapitools.client.model.TransactionTypeEnum;
import org.openapitools.client.model.TransferTransactionDTO;
import org.openapitools.client.model.UnresolvedMosaic;
import org.openapitools.client.model.VotingKeyLinkTransactionDTO;
import org.openapitools.client.model.VrfKeyLinkTransactionDTO;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class TransactionInfoDTOTransaction extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TransactionInfoDTOTransaction.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TransactionInfoDTOTransaction.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TransactionInfoDTOTransaction' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountKeyLinkTransactionDTO> adapterAccountKeyLinkTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(AccountKeyLinkTransactionDTO.class));
            final TypeAdapter<EmbeddedAccountKeyLinkTransactionDTO> adapterEmbeddedAccountKeyLinkTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedAccountKeyLinkTransactionDTO.class));
            final TypeAdapter<NodeKeyLinkTransactionDTO> adapterNodeKeyLinkTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(NodeKeyLinkTransactionDTO.class));
            final TypeAdapter<EmbeddedNodeKeyLinkTransactionDTO> adapterEmbeddedNodeKeyLinkTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedNodeKeyLinkTransactionDTO.class));
            final TypeAdapter<VrfKeyLinkTransactionDTO> adapterVrfKeyLinkTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(VrfKeyLinkTransactionDTO.class));
            final TypeAdapter<EmbeddedVrfKeyLinkTransactionDTO> adapterEmbeddedVrfKeyLinkTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedVrfKeyLinkTransactionDTO.class));
            final TypeAdapter<VotingKeyLinkTransactionDTO> adapterVotingKeyLinkTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(VotingKeyLinkTransactionDTO.class));
            final TypeAdapter<EmbeddedVotingKeyLinkTransactionDTO> adapterEmbeddedVotingKeyLinkTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedVotingKeyLinkTransactionDTO.class));
            final TypeAdapter<AggregateTransactionDTO> adapterAggregateTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(AggregateTransactionDTO.class));
            final TypeAdapter<AggregateTransactionExtendedDTO> adapterAggregateTransactionExtendedDTO = gson.getDelegateAdapter(this, TypeToken.get(AggregateTransactionExtendedDTO.class));
            final TypeAdapter<HashLockTransactionDTO> adapterHashLockTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(HashLockTransactionDTO.class));
            final TypeAdapter<EmbeddedHashLockTransactionDTO> adapterEmbeddedHashLockTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedHashLockTransactionDTO.class));
            final TypeAdapter<SecretLockTransactionDTO> adapterSecretLockTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(SecretLockTransactionDTO.class));
            final TypeAdapter<EmbeddedSecretLockTransactionDTO> adapterEmbeddedSecretLockTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedSecretLockTransactionDTO.class));
            final TypeAdapter<SecretProofTransactionDTO> adapterSecretProofTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(SecretProofTransactionDTO.class));
            final TypeAdapter<EmbeddedSecretProofTransactionDTO> adapterEmbeddedSecretProofTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedSecretProofTransactionDTO.class));
            final TypeAdapter<AccountMetadataTransactionDTO> adapterAccountMetadataTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(AccountMetadataTransactionDTO.class));
            final TypeAdapter<EmbeddedAccountMetadataTransactionDTO> adapterEmbeddedAccountMetadataTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedAccountMetadataTransactionDTO.class));
            final TypeAdapter<MosaicMetadataTransactionDTO> adapterMosaicMetadataTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(MosaicMetadataTransactionDTO.class));
            final TypeAdapter<EmbeddedMosaicMetadataTransactionDTO> adapterEmbeddedMosaicMetadataTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedMosaicMetadataTransactionDTO.class));
            final TypeAdapter<NamespaceMetadataTransactionDTO> adapterNamespaceMetadataTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(NamespaceMetadataTransactionDTO.class));
            final TypeAdapter<EmbeddedNamespaceMetadataTransactionDTO> adapterEmbeddedNamespaceMetadataTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedNamespaceMetadataTransactionDTO.class));
            final TypeAdapter<MosaicDefinitionTransactionDTO> adapterMosaicDefinitionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(MosaicDefinitionTransactionDTO.class));
            final TypeAdapter<EmbeddedMosaicDefinitionTransactionDTO> adapterEmbeddedMosaicDefinitionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedMosaicDefinitionTransactionDTO.class));
            final TypeAdapter<MosaicSupplyChangeTransactionDTO> adapterMosaicSupplyChangeTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(MosaicSupplyChangeTransactionDTO.class));
            final TypeAdapter<EmbeddedMosaicSupplyChangeTransactionDTO> adapterEmbeddedMosaicSupplyChangeTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedMosaicSupplyChangeTransactionDTO.class));
            final TypeAdapter<MosaicSupplyRevocationTransactionDTO> adapterMosaicSupplyRevocationTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(MosaicSupplyRevocationTransactionDTO.class));
            final TypeAdapter<EmbeddedMosaicSupplyRevocationTransactionDTO> adapterEmbeddedMosaicSupplyRevocationTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedMosaicSupplyRevocationTransactionDTO.class));
            final TypeAdapter<NamespaceRegistrationTransactionDTO> adapterNamespaceRegistrationTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(NamespaceRegistrationTransactionDTO.class));
            final TypeAdapter<EmbeddedNamespaceRegistrationTransactionDTO> adapterEmbeddedNamespaceRegistrationTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedNamespaceRegistrationTransactionDTO.class));
            final TypeAdapter<AddressAliasTransactionDTO> adapterAddressAliasTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(AddressAliasTransactionDTO.class));
            final TypeAdapter<EmbeddedAddressAliasTransactionDTO> adapterEmbeddedAddressAliasTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedAddressAliasTransactionDTO.class));
            final TypeAdapter<MosaicAliasTransactionDTO> adapterMosaicAliasTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(MosaicAliasTransactionDTO.class));
            final TypeAdapter<EmbeddedMosaicAliasTransactionDTO> adapterEmbeddedMosaicAliasTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedMosaicAliasTransactionDTO.class));
            final TypeAdapter<MultisigAccountModificationTransactionDTO> adapterMultisigAccountModificationTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(MultisigAccountModificationTransactionDTO.class));
            final TypeAdapter<EmbeddedMultisigAccountModificationTransactionDTO> adapterEmbeddedMultisigAccountModificationTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedMultisigAccountModificationTransactionDTO.class));
            final TypeAdapter<AccountAddressRestrictionTransactionDTO> adapterAccountAddressRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(AccountAddressRestrictionTransactionDTO.class));
            final TypeAdapter<EmbeddedAccountAddressRestrictionTransactionDTO> adapterEmbeddedAccountAddressRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedAccountAddressRestrictionTransactionDTO.class));
            final TypeAdapter<AccountMosaicRestrictionTransactionDTO> adapterAccountMosaicRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(AccountMosaicRestrictionTransactionDTO.class));
            final TypeAdapter<EmbeddedAccountMosaicRestrictionTransactionDTO> adapterEmbeddedAccountMosaicRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedAccountMosaicRestrictionTransactionDTO.class));
            final TypeAdapter<AccountOperationRestrictionTransactionDTO> adapterAccountOperationRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(AccountOperationRestrictionTransactionDTO.class));
            final TypeAdapter<EmbeddedAccountOperationRestrictionTransactionDTO> adapterEmbeddedAccountOperationRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedAccountOperationRestrictionTransactionDTO.class));
            final TypeAdapter<MosaicGlobalRestrictionTransactionDTO> adapterMosaicGlobalRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(MosaicGlobalRestrictionTransactionDTO.class));
            final TypeAdapter<EmbeddedMosaicGlobalRestrictionTransactionDTO> adapterEmbeddedMosaicGlobalRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedMosaicGlobalRestrictionTransactionDTO.class));
            final TypeAdapter<MosaicAddressRestrictionTransactionDTO> adapterMosaicAddressRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(MosaicAddressRestrictionTransactionDTO.class));
            final TypeAdapter<EmbeddedMosaicAddressRestrictionTransactionDTO> adapterEmbeddedMosaicAddressRestrictionTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedMosaicAddressRestrictionTransactionDTO.class));
            final TypeAdapter<TransferTransactionDTO> adapterTransferTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(TransferTransactionDTO.class));
            final TypeAdapter<EmbeddedTransferTransactionDTO> adapterEmbeddedTransferTransactionDTO = gson.getDelegateAdapter(this, TypeToken.get(EmbeddedTransferTransactionDTO.class));

            return (TypeAdapter<T>) new TypeAdapter<TransactionInfoDTOTransaction>() {
                @Override
                public void write(JsonWriter out, TransactionInfoDTOTransaction value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AccountKeyLinkTransactionDTO`
                    if (value.getActualInstance() instanceof AccountKeyLinkTransactionDTO) {
                      JsonElement element = adapterAccountKeyLinkTransactionDTO.toJsonTree((AccountKeyLinkTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedAccountKeyLinkTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedAccountKeyLinkTransactionDTO) {
                      JsonElement element = adapterEmbeddedAccountKeyLinkTransactionDTO.toJsonTree((EmbeddedAccountKeyLinkTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `NodeKeyLinkTransactionDTO`
                    if (value.getActualInstance() instanceof NodeKeyLinkTransactionDTO) {
                      JsonElement element = adapterNodeKeyLinkTransactionDTO.toJsonTree((NodeKeyLinkTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedNodeKeyLinkTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedNodeKeyLinkTransactionDTO) {
                      JsonElement element = adapterEmbeddedNodeKeyLinkTransactionDTO.toJsonTree((EmbeddedNodeKeyLinkTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `VrfKeyLinkTransactionDTO`
                    if (value.getActualInstance() instanceof VrfKeyLinkTransactionDTO) {
                      JsonElement element = adapterVrfKeyLinkTransactionDTO.toJsonTree((VrfKeyLinkTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedVrfKeyLinkTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedVrfKeyLinkTransactionDTO) {
                      JsonElement element = adapterEmbeddedVrfKeyLinkTransactionDTO.toJsonTree((EmbeddedVrfKeyLinkTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `VotingKeyLinkTransactionDTO`
                    if (value.getActualInstance() instanceof VotingKeyLinkTransactionDTO) {
                      JsonElement element = adapterVotingKeyLinkTransactionDTO.toJsonTree((VotingKeyLinkTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedVotingKeyLinkTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedVotingKeyLinkTransactionDTO) {
                      JsonElement element = adapterEmbeddedVotingKeyLinkTransactionDTO.toJsonTree((EmbeddedVotingKeyLinkTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AggregateTransactionDTO`
                    if (value.getActualInstance() instanceof AggregateTransactionDTO) {
                      JsonElement element = adapterAggregateTransactionDTO.toJsonTree((AggregateTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AggregateTransactionExtendedDTO`
                    if (value.getActualInstance() instanceof AggregateTransactionExtendedDTO) {
                      JsonElement element = adapterAggregateTransactionExtendedDTO.toJsonTree((AggregateTransactionExtendedDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `HashLockTransactionDTO`
                    if (value.getActualInstance() instanceof HashLockTransactionDTO) {
                      JsonElement element = adapterHashLockTransactionDTO.toJsonTree((HashLockTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedHashLockTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedHashLockTransactionDTO) {
                      JsonElement element = adapterEmbeddedHashLockTransactionDTO.toJsonTree((EmbeddedHashLockTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `SecretLockTransactionDTO`
                    if (value.getActualInstance() instanceof SecretLockTransactionDTO) {
                      JsonElement element = adapterSecretLockTransactionDTO.toJsonTree((SecretLockTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedSecretLockTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedSecretLockTransactionDTO) {
                      JsonElement element = adapterEmbeddedSecretLockTransactionDTO.toJsonTree((EmbeddedSecretLockTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `SecretProofTransactionDTO`
                    if (value.getActualInstance() instanceof SecretProofTransactionDTO) {
                      JsonElement element = adapterSecretProofTransactionDTO.toJsonTree((SecretProofTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedSecretProofTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedSecretProofTransactionDTO) {
                      JsonElement element = adapterEmbeddedSecretProofTransactionDTO.toJsonTree((EmbeddedSecretProofTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AccountMetadataTransactionDTO`
                    if (value.getActualInstance() instanceof AccountMetadataTransactionDTO) {
                      JsonElement element = adapterAccountMetadataTransactionDTO.toJsonTree((AccountMetadataTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedAccountMetadataTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedAccountMetadataTransactionDTO) {
                      JsonElement element = adapterEmbeddedAccountMetadataTransactionDTO.toJsonTree((EmbeddedAccountMetadataTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MosaicMetadataTransactionDTO`
                    if (value.getActualInstance() instanceof MosaicMetadataTransactionDTO) {
                      JsonElement element = adapterMosaicMetadataTransactionDTO.toJsonTree((MosaicMetadataTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedMosaicMetadataTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedMosaicMetadataTransactionDTO) {
                      JsonElement element = adapterEmbeddedMosaicMetadataTransactionDTO.toJsonTree((EmbeddedMosaicMetadataTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `NamespaceMetadataTransactionDTO`
                    if (value.getActualInstance() instanceof NamespaceMetadataTransactionDTO) {
                      JsonElement element = adapterNamespaceMetadataTransactionDTO.toJsonTree((NamespaceMetadataTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedNamespaceMetadataTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedNamespaceMetadataTransactionDTO) {
                      JsonElement element = adapterEmbeddedNamespaceMetadataTransactionDTO.toJsonTree((EmbeddedNamespaceMetadataTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MosaicDefinitionTransactionDTO`
                    if (value.getActualInstance() instanceof MosaicDefinitionTransactionDTO) {
                      JsonElement element = adapterMosaicDefinitionTransactionDTO.toJsonTree((MosaicDefinitionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedMosaicDefinitionTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedMosaicDefinitionTransactionDTO) {
                      JsonElement element = adapterEmbeddedMosaicDefinitionTransactionDTO.toJsonTree((EmbeddedMosaicDefinitionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MosaicSupplyChangeTransactionDTO`
                    if (value.getActualInstance() instanceof MosaicSupplyChangeTransactionDTO) {
                      JsonElement element = adapterMosaicSupplyChangeTransactionDTO.toJsonTree((MosaicSupplyChangeTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedMosaicSupplyChangeTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedMosaicSupplyChangeTransactionDTO) {
                      JsonElement element = adapterEmbeddedMosaicSupplyChangeTransactionDTO.toJsonTree((EmbeddedMosaicSupplyChangeTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MosaicSupplyRevocationTransactionDTO`
                    if (value.getActualInstance() instanceof MosaicSupplyRevocationTransactionDTO) {
                      JsonElement element = adapterMosaicSupplyRevocationTransactionDTO.toJsonTree((MosaicSupplyRevocationTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedMosaicSupplyRevocationTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedMosaicSupplyRevocationTransactionDTO) {
                      JsonElement element = adapterEmbeddedMosaicSupplyRevocationTransactionDTO.toJsonTree((EmbeddedMosaicSupplyRevocationTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `NamespaceRegistrationTransactionDTO`
                    if (value.getActualInstance() instanceof NamespaceRegistrationTransactionDTO) {
                      JsonElement element = adapterNamespaceRegistrationTransactionDTO.toJsonTree((NamespaceRegistrationTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedNamespaceRegistrationTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedNamespaceRegistrationTransactionDTO) {
                      JsonElement element = adapterEmbeddedNamespaceRegistrationTransactionDTO.toJsonTree((EmbeddedNamespaceRegistrationTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AddressAliasTransactionDTO`
                    if (value.getActualInstance() instanceof AddressAliasTransactionDTO) {
                      JsonElement element = adapterAddressAliasTransactionDTO.toJsonTree((AddressAliasTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedAddressAliasTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedAddressAliasTransactionDTO) {
                      JsonElement element = adapterEmbeddedAddressAliasTransactionDTO.toJsonTree((EmbeddedAddressAliasTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MosaicAliasTransactionDTO`
                    if (value.getActualInstance() instanceof MosaicAliasTransactionDTO) {
                      JsonElement element = adapterMosaicAliasTransactionDTO.toJsonTree((MosaicAliasTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedMosaicAliasTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedMosaicAliasTransactionDTO) {
                      JsonElement element = adapterEmbeddedMosaicAliasTransactionDTO.toJsonTree((EmbeddedMosaicAliasTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MultisigAccountModificationTransactionDTO`
                    if (value.getActualInstance() instanceof MultisigAccountModificationTransactionDTO) {
                      JsonElement element = adapterMultisigAccountModificationTransactionDTO.toJsonTree((MultisigAccountModificationTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedMultisigAccountModificationTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedMultisigAccountModificationTransactionDTO) {
                      JsonElement element = adapterEmbeddedMultisigAccountModificationTransactionDTO.toJsonTree((EmbeddedMultisigAccountModificationTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AccountAddressRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof AccountAddressRestrictionTransactionDTO) {
                      JsonElement element = adapterAccountAddressRestrictionTransactionDTO.toJsonTree((AccountAddressRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedAccountAddressRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedAccountAddressRestrictionTransactionDTO) {
                      JsonElement element = adapterEmbeddedAccountAddressRestrictionTransactionDTO.toJsonTree((EmbeddedAccountAddressRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AccountMosaicRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof AccountMosaicRestrictionTransactionDTO) {
                      JsonElement element = adapterAccountMosaicRestrictionTransactionDTO.toJsonTree((AccountMosaicRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedAccountMosaicRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedAccountMosaicRestrictionTransactionDTO) {
                      JsonElement element = adapterEmbeddedAccountMosaicRestrictionTransactionDTO.toJsonTree((EmbeddedAccountMosaicRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AccountOperationRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof AccountOperationRestrictionTransactionDTO) {
                      JsonElement element = adapterAccountOperationRestrictionTransactionDTO.toJsonTree((AccountOperationRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedAccountOperationRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedAccountOperationRestrictionTransactionDTO) {
                      JsonElement element = adapterEmbeddedAccountOperationRestrictionTransactionDTO.toJsonTree((EmbeddedAccountOperationRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MosaicGlobalRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof MosaicGlobalRestrictionTransactionDTO) {
                      JsonElement element = adapterMosaicGlobalRestrictionTransactionDTO.toJsonTree((MosaicGlobalRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedMosaicGlobalRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedMosaicGlobalRestrictionTransactionDTO) {
                      JsonElement element = adapterEmbeddedMosaicGlobalRestrictionTransactionDTO.toJsonTree((EmbeddedMosaicGlobalRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `MosaicAddressRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof MosaicAddressRestrictionTransactionDTO) {
                      JsonElement element = adapterMosaicAddressRestrictionTransactionDTO.toJsonTree((MosaicAddressRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedMosaicAddressRestrictionTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedMosaicAddressRestrictionTransactionDTO) {
                      JsonElement element = adapterEmbeddedMosaicAddressRestrictionTransactionDTO.toJsonTree((EmbeddedMosaicAddressRestrictionTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `TransferTransactionDTO`
                    if (value.getActualInstance() instanceof TransferTransactionDTO) {
                      JsonElement element = adapterTransferTransactionDTO.toJsonTree((TransferTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmbeddedTransferTransactionDTO`
                    if (value.getActualInstance() instanceof EmbeddedTransferTransactionDTO) {
                      JsonElement element = adapterEmbeddedTransferTransactionDTO.toJsonTree((EmbeddedTransferTransactionDTO)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemae: AccountAddressRestrictionTransactionDTO, AccountKeyLinkTransactionDTO, AccountMetadataTransactionDTO, AccountMosaicRestrictionTransactionDTO, AccountOperationRestrictionTransactionDTO, AddressAliasTransactionDTO, AggregateTransactionDTO, AggregateTransactionExtendedDTO, EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO, HashLockTransactionDTO, MosaicAddressRestrictionTransactionDTO, MosaicAliasTransactionDTO, MosaicDefinitionTransactionDTO, MosaicGlobalRestrictionTransactionDTO, MosaicMetadataTransactionDTO, MosaicSupplyChangeTransactionDTO, MosaicSupplyRevocationTransactionDTO, MultisigAccountModificationTransactionDTO, NamespaceMetadataTransactionDTO, NamespaceRegistrationTransactionDTO, NodeKeyLinkTransactionDTO, SecretLockTransactionDTO, SecretProofTransactionDTO, TransferTransactionDTO, VotingKeyLinkTransactionDTO, VrfKeyLinkTransactionDTO");
                }

                @Override
                public TransactionInfoDTOTransaction read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AccountKeyLinkTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AccountKeyLinkTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterAccountKeyLinkTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AccountKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AccountKeyLinkTransactionDTO'", e);
                    }
                    // deserialize EmbeddedAccountKeyLinkTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedAccountKeyLinkTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedAccountKeyLinkTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedAccountKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedAccountKeyLinkTransactionDTO'", e);
                    }
                    // deserialize NodeKeyLinkTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      NodeKeyLinkTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterNodeKeyLinkTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for NodeKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'NodeKeyLinkTransactionDTO'", e);
                    }
                    // deserialize EmbeddedNodeKeyLinkTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedNodeKeyLinkTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedNodeKeyLinkTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedNodeKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedNodeKeyLinkTransactionDTO'", e);
                    }
                    // deserialize VrfKeyLinkTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      VrfKeyLinkTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterVrfKeyLinkTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for VrfKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'VrfKeyLinkTransactionDTO'", e);
                    }
                    // deserialize EmbeddedVrfKeyLinkTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedVrfKeyLinkTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedVrfKeyLinkTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedVrfKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedVrfKeyLinkTransactionDTO'", e);
                    }
                    // deserialize VotingKeyLinkTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      VotingKeyLinkTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterVotingKeyLinkTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for VotingKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'VotingKeyLinkTransactionDTO'", e);
                    }
                    // deserialize EmbeddedVotingKeyLinkTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedVotingKeyLinkTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedVotingKeyLinkTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedVotingKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedVotingKeyLinkTransactionDTO'", e);
                    }
                    // deserialize AggregateTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AggregateTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterAggregateTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AggregateTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AggregateTransactionDTO'", e);
                    }
                    // deserialize AggregateTransactionExtendedDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AggregateTransactionExtendedDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterAggregateTransactionExtendedDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AggregateTransactionExtendedDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AggregateTransactionExtendedDTO'", e);
                    }
                    // deserialize HashLockTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      HashLockTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterHashLockTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for HashLockTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'HashLockTransactionDTO'", e);
                    }
                    // deserialize EmbeddedHashLockTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedHashLockTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedHashLockTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedHashLockTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedHashLockTransactionDTO'", e);
                    }
                    // deserialize SecretLockTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      SecretLockTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterSecretLockTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for SecretLockTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'SecretLockTransactionDTO'", e);
                    }
                    // deserialize EmbeddedSecretLockTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedSecretLockTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedSecretLockTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedSecretLockTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedSecretLockTransactionDTO'", e);
                    }
                    // deserialize SecretProofTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      SecretProofTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterSecretProofTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for SecretProofTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'SecretProofTransactionDTO'", e);
                    }
                    // deserialize EmbeddedSecretProofTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedSecretProofTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedSecretProofTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedSecretProofTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedSecretProofTransactionDTO'", e);
                    }
                    // deserialize AccountMetadataTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AccountMetadataTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterAccountMetadataTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AccountMetadataTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AccountMetadataTransactionDTO'", e);
                    }
                    // deserialize EmbeddedAccountMetadataTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedAccountMetadataTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedAccountMetadataTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedAccountMetadataTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedAccountMetadataTransactionDTO'", e);
                    }
                    // deserialize MosaicMetadataTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MosaicMetadataTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMosaicMetadataTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MosaicMetadataTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MosaicMetadataTransactionDTO'", e);
                    }
                    // deserialize EmbeddedMosaicMetadataTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedMosaicMetadataTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedMosaicMetadataTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedMosaicMetadataTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedMosaicMetadataTransactionDTO'", e);
                    }
                    // deserialize NamespaceMetadataTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      NamespaceMetadataTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterNamespaceMetadataTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for NamespaceMetadataTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'NamespaceMetadataTransactionDTO'", e);
                    }
                    // deserialize EmbeddedNamespaceMetadataTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedNamespaceMetadataTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedNamespaceMetadataTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedNamespaceMetadataTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedNamespaceMetadataTransactionDTO'", e);
                    }
                    // deserialize MosaicDefinitionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MosaicDefinitionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMosaicDefinitionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MosaicDefinitionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MosaicDefinitionTransactionDTO'", e);
                    }
                    // deserialize EmbeddedMosaicDefinitionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedMosaicDefinitionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedMosaicDefinitionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedMosaicDefinitionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedMosaicDefinitionTransactionDTO'", e);
                    }
                    // deserialize MosaicSupplyChangeTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MosaicSupplyChangeTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMosaicSupplyChangeTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MosaicSupplyChangeTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MosaicSupplyChangeTransactionDTO'", e);
                    }
                    // deserialize EmbeddedMosaicSupplyChangeTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedMosaicSupplyChangeTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedMosaicSupplyChangeTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedMosaicSupplyChangeTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedMosaicSupplyChangeTransactionDTO'", e);
                    }
                    // deserialize MosaicSupplyRevocationTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MosaicSupplyRevocationTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMosaicSupplyRevocationTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MosaicSupplyRevocationTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MosaicSupplyRevocationTransactionDTO'", e);
                    }
                    // deserialize EmbeddedMosaicSupplyRevocationTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedMosaicSupplyRevocationTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedMosaicSupplyRevocationTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedMosaicSupplyRevocationTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedMosaicSupplyRevocationTransactionDTO'", e);
                    }
                    // deserialize NamespaceRegistrationTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      NamespaceRegistrationTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterNamespaceRegistrationTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for NamespaceRegistrationTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'NamespaceRegistrationTransactionDTO'", e);
                    }
                    // deserialize EmbeddedNamespaceRegistrationTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedNamespaceRegistrationTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedNamespaceRegistrationTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedNamespaceRegistrationTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedNamespaceRegistrationTransactionDTO'", e);
                    }
                    // deserialize AddressAliasTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AddressAliasTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterAddressAliasTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AddressAliasTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AddressAliasTransactionDTO'", e);
                    }
                    // deserialize EmbeddedAddressAliasTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedAddressAliasTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedAddressAliasTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedAddressAliasTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedAddressAliasTransactionDTO'", e);
                    }
                    // deserialize MosaicAliasTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MosaicAliasTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMosaicAliasTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MosaicAliasTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MosaicAliasTransactionDTO'", e);
                    }
                    // deserialize EmbeddedMosaicAliasTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedMosaicAliasTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedMosaicAliasTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedMosaicAliasTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedMosaicAliasTransactionDTO'", e);
                    }
                    // deserialize MultisigAccountModificationTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MultisigAccountModificationTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMultisigAccountModificationTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MultisigAccountModificationTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MultisigAccountModificationTransactionDTO'", e);
                    }
                    // deserialize EmbeddedMultisigAccountModificationTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedMultisigAccountModificationTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedMultisigAccountModificationTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedMultisigAccountModificationTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedMultisigAccountModificationTransactionDTO'", e);
                    }
                    // deserialize AccountAddressRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AccountAddressRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterAccountAddressRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AccountAddressRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AccountAddressRestrictionTransactionDTO'", e);
                    }
                    // deserialize EmbeddedAccountAddressRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedAccountAddressRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedAccountAddressRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedAccountAddressRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedAccountAddressRestrictionTransactionDTO'", e);
                    }
                    // deserialize AccountMosaicRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AccountMosaicRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterAccountMosaicRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AccountMosaicRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AccountMosaicRestrictionTransactionDTO'", e);
                    }
                    // deserialize EmbeddedAccountMosaicRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedAccountMosaicRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedAccountMosaicRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedAccountMosaicRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedAccountMosaicRestrictionTransactionDTO'", e);
                    }
                    // deserialize AccountOperationRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AccountOperationRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterAccountOperationRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AccountOperationRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AccountOperationRestrictionTransactionDTO'", e);
                    }
                    // deserialize EmbeddedAccountOperationRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedAccountOperationRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedAccountOperationRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedAccountOperationRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedAccountOperationRestrictionTransactionDTO'", e);
                    }
                    // deserialize MosaicGlobalRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MosaicGlobalRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMosaicGlobalRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MosaicGlobalRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MosaicGlobalRestrictionTransactionDTO'", e);
                    }
                    // deserialize EmbeddedMosaicGlobalRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedMosaicGlobalRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedMosaicGlobalRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedMosaicGlobalRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedMosaicGlobalRestrictionTransactionDTO'", e);
                    }
                    // deserialize MosaicAddressRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      MosaicAddressRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterMosaicAddressRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for MosaicAddressRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'MosaicAddressRestrictionTransactionDTO'", e);
                    }
                    // deserialize EmbeddedMosaicAddressRestrictionTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedMosaicAddressRestrictionTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedMosaicAddressRestrictionTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedMosaicAddressRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedMosaicAddressRestrictionTransactionDTO'", e);
                    }
                    // deserialize TransferTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      TransferTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterTransferTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for TransferTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'TransferTransactionDTO'", e);
                    }
                    // deserialize EmbeddedTransferTransactionDTO
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmbeddedTransferTransactionDTO.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmbeddedTransferTransactionDTO;
                      TransactionInfoDTOTransaction ret = new TransactionInfoDTOTransaction();
                      ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                      return ret;
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmbeddedTransferTransactionDTO failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmbeddedTransferTransactionDTO'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for TransactionInfoDTOTransaction: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TransactionInfoDTOTransaction() {
        super("anyOf", Boolean.FALSE);
    }

    public TransactionInfoDTOTransaction(AccountAddressRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(AccountKeyLinkTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(AccountMetadataTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(AccountMosaicRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(AccountOperationRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(AddressAliasTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(AggregateTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(AggregateTransactionExtendedDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedAccountAddressRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedAccountKeyLinkTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedAccountMetadataTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedAccountMosaicRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedAccountOperationRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedAddressAliasTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedHashLockTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedMosaicAddressRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedMosaicAliasTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedMosaicDefinitionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedMosaicGlobalRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedMosaicMetadataTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedMosaicSupplyChangeTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedMosaicSupplyRevocationTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedMultisigAccountModificationTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedNamespaceMetadataTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedNamespaceRegistrationTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedNodeKeyLinkTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedSecretLockTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedSecretProofTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedTransferTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedVotingKeyLinkTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(EmbeddedVrfKeyLinkTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(HashLockTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(MosaicAddressRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(MosaicAliasTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(MosaicDefinitionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(MosaicGlobalRestrictionTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(MosaicMetadataTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(MosaicSupplyChangeTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(MosaicSupplyRevocationTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(MultisigAccountModificationTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(NamespaceMetadataTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(NamespaceRegistrationTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(NodeKeyLinkTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(SecretLockTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(SecretProofTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(TransferTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(VotingKeyLinkTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public TransactionInfoDTOTransaction(VrfKeyLinkTransactionDTO o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AccountKeyLinkTransactionDTO", AccountKeyLinkTransactionDTO.class);
        schemas.put("EmbeddedAccountKeyLinkTransactionDTO", EmbeddedAccountKeyLinkTransactionDTO.class);
        schemas.put("NodeKeyLinkTransactionDTO", NodeKeyLinkTransactionDTO.class);
        schemas.put("EmbeddedNodeKeyLinkTransactionDTO", EmbeddedNodeKeyLinkTransactionDTO.class);
        schemas.put("VrfKeyLinkTransactionDTO", VrfKeyLinkTransactionDTO.class);
        schemas.put("EmbeddedVrfKeyLinkTransactionDTO", EmbeddedVrfKeyLinkTransactionDTO.class);
        schemas.put("VotingKeyLinkTransactionDTO", VotingKeyLinkTransactionDTO.class);
        schemas.put("EmbeddedVotingKeyLinkTransactionDTO", EmbeddedVotingKeyLinkTransactionDTO.class);
        schemas.put("AggregateTransactionDTO", AggregateTransactionDTO.class);
        schemas.put("AggregateTransactionExtendedDTO", AggregateTransactionExtendedDTO.class);
        schemas.put("HashLockTransactionDTO", HashLockTransactionDTO.class);
        schemas.put("EmbeddedHashLockTransactionDTO", EmbeddedHashLockTransactionDTO.class);
        schemas.put("SecretLockTransactionDTO", SecretLockTransactionDTO.class);
        schemas.put("EmbeddedSecretLockTransactionDTO", EmbeddedSecretLockTransactionDTO.class);
        schemas.put("SecretProofTransactionDTO", SecretProofTransactionDTO.class);
        schemas.put("EmbeddedSecretProofTransactionDTO", EmbeddedSecretProofTransactionDTO.class);
        schemas.put("AccountMetadataTransactionDTO", AccountMetadataTransactionDTO.class);
        schemas.put("EmbeddedAccountMetadataTransactionDTO", EmbeddedAccountMetadataTransactionDTO.class);
        schemas.put("MosaicMetadataTransactionDTO", MosaicMetadataTransactionDTO.class);
        schemas.put("EmbeddedMosaicMetadataTransactionDTO", EmbeddedMosaicMetadataTransactionDTO.class);
        schemas.put("NamespaceMetadataTransactionDTO", NamespaceMetadataTransactionDTO.class);
        schemas.put("EmbeddedNamespaceMetadataTransactionDTO", EmbeddedNamespaceMetadataTransactionDTO.class);
        schemas.put("MosaicDefinitionTransactionDTO", MosaicDefinitionTransactionDTO.class);
        schemas.put("EmbeddedMosaicDefinitionTransactionDTO", EmbeddedMosaicDefinitionTransactionDTO.class);
        schemas.put("MosaicSupplyChangeTransactionDTO", MosaicSupplyChangeTransactionDTO.class);
        schemas.put("EmbeddedMosaicSupplyChangeTransactionDTO", EmbeddedMosaicSupplyChangeTransactionDTO.class);
        schemas.put("MosaicSupplyRevocationTransactionDTO", MosaicSupplyRevocationTransactionDTO.class);
        schemas.put("EmbeddedMosaicSupplyRevocationTransactionDTO", EmbeddedMosaicSupplyRevocationTransactionDTO.class);
        schemas.put("NamespaceRegistrationTransactionDTO", NamespaceRegistrationTransactionDTO.class);
        schemas.put("EmbeddedNamespaceRegistrationTransactionDTO", EmbeddedNamespaceRegistrationTransactionDTO.class);
        schemas.put("AddressAliasTransactionDTO", AddressAliasTransactionDTO.class);
        schemas.put("EmbeddedAddressAliasTransactionDTO", EmbeddedAddressAliasTransactionDTO.class);
        schemas.put("MosaicAliasTransactionDTO", MosaicAliasTransactionDTO.class);
        schemas.put("EmbeddedMosaicAliasTransactionDTO", EmbeddedMosaicAliasTransactionDTO.class);
        schemas.put("MultisigAccountModificationTransactionDTO", MultisigAccountModificationTransactionDTO.class);
        schemas.put("EmbeddedMultisigAccountModificationTransactionDTO", EmbeddedMultisigAccountModificationTransactionDTO.class);
        schemas.put("AccountAddressRestrictionTransactionDTO", AccountAddressRestrictionTransactionDTO.class);
        schemas.put("EmbeddedAccountAddressRestrictionTransactionDTO", EmbeddedAccountAddressRestrictionTransactionDTO.class);
        schemas.put("AccountMosaicRestrictionTransactionDTO", AccountMosaicRestrictionTransactionDTO.class);
        schemas.put("EmbeddedAccountMosaicRestrictionTransactionDTO", EmbeddedAccountMosaicRestrictionTransactionDTO.class);
        schemas.put("AccountOperationRestrictionTransactionDTO", AccountOperationRestrictionTransactionDTO.class);
        schemas.put("EmbeddedAccountOperationRestrictionTransactionDTO", EmbeddedAccountOperationRestrictionTransactionDTO.class);
        schemas.put("MosaicGlobalRestrictionTransactionDTO", MosaicGlobalRestrictionTransactionDTO.class);
        schemas.put("EmbeddedMosaicGlobalRestrictionTransactionDTO", EmbeddedMosaicGlobalRestrictionTransactionDTO.class);
        schemas.put("MosaicAddressRestrictionTransactionDTO", MosaicAddressRestrictionTransactionDTO.class);
        schemas.put("EmbeddedMosaicAddressRestrictionTransactionDTO", EmbeddedMosaicAddressRestrictionTransactionDTO.class);
        schemas.put("TransferTransactionDTO", TransferTransactionDTO.class);
        schemas.put("EmbeddedTransferTransactionDTO", EmbeddedTransferTransactionDTO.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TransactionInfoDTOTransaction.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AccountAddressRestrictionTransactionDTO, AccountKeyLinkTransactionDTO, AccountMetadataTransactionDTO, AccountMosaicRestrictionTransactionDTO, AccountOperationRestrictionTransactionDTO, AddressAliasTransactionDTO, AggregateTransactionDTO, AggregateTransactionExtendedDTO, EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO, HashLockTransactionDTO, MosaicAddressRestrictionTransactionDTO, MosaicAliasTransactionDTO, MosaicDefinitionTransactionDTO, MosaicGlobalRestrictionTransactionDTO, MosaicMetadataTransactionDTO, MosaicSupplyChangeTransactionDTO, MosaicSupplyRevocationTransactionDTO, MultisigAccountModificationTransactionDTO, NamespaceMetadataTransactionDTO, NamespaceRegistrationTransactionDTO, NodeKeyLinkTransactionDTO, SecretLockTransactionDTO, SecretProofTransactionDTO, TransferTransactionDTO, VotingKeyLinkTransactionDTO, VrfKeyLinkTransactionDTO
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AccountKeyLinkTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedAccountKeyLinkTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NodeKeyLinkTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedNodeKeyLinkTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VrfKeyLinkTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedVrfKeyLinkTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VotingKeyLinkTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedVotingKeyLinkTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AggregateTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AggregateTransactionExtendedDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HashLockTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedHashLockTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SecretLockTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedSecretLockTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SecretProofTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedSecretProofTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccountMetadataTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedAccountMetadataTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicMetadataTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedMosaicMetadataTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NamespaceMetadataTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedNamespaceMetadataTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicDefinitionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedMosaicDefinitionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicSupplyChangeTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedMosaicSupplyChangeTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicSupplyRevocationTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedMosaicSupplyRevocationTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NamespaceRegistrationTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedNamespaceRegistrationTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddressAliasTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedAddressAliasTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicAliasTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedMosaicAliasTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MultisigAccountModificationTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedMultisigAccountModificationTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccountAddressRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedAccountAddressRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccountMosaicRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedAccountMosaicRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AccountOperationRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedAccountOperationRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicGlobalRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedMosaicGlobalRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MosaicAddressRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedMosaicAddressRestrictionTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TransferTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmbeddedTransferTransactionDTO) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AccountAddressRestrictionTransactionDTO, AccountKeyLinkTransactionDTO, AccountMetadataTransactionDTO, AccountMosaicRestrictionTransactionDTO, AccountOperationRestrictionTransactionDTO, AddressAliasTransactionDTO, AggregateTransactionDTO, AggregateTransactionExtendedDTO, EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO, HashLockTransactionDTO, MosaicAddressRestrictionTransactionDTO, MosaicAliasTransactionDTO, MosaicDefinitionTransactionDTO, MosaicGlobalRestrictionTransactionDTO, MosaicMetadataTransactionDTO, MosaicSupplyChangeTransactionDTO, MosaicSupplyRevocationTransactionDTO, MultisigAccountModificationTransactionDTO, NamespaceMetadataTransactionDTO, NamespaceRegistrationTransactionDTO, NodeKeyLinkTransactionDTO, SecretLockTransactionDTO, SecretProofTransactionDTO, TransferTransactionDTO, VotingKeyLinkTransactionDTO, VrfKeyLinkTransactionDTO");
    }

    /**
     * Get the actual instance, which can be the following:
     * AccountAddressRestrictionTransactionDTO, AccountKeyLinkTransactionDTO, AccountMetadataTransactionDTO, AccountMosaicRestrictionTransactionDTO, AccountOperationRestrictionTransactionDTO, AddressAliasTransactionDTO, AggregateTransactionDTO, AggregateTransactionExtendedDTO, EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO, HashLockTransactionDTO, MosaicAddressRestrictionTransactionDTO, MosaicAliasTransactionDTO, MosaicDefinitionTransactionDTO, MosaicGlobalRestrictionTransactionDTO, MosaicMetadataTransactionDTO, MosaicSupplyChangeTransactionDTO, MosaicSupplyRevocationTransactionDTO, MultisigAccountModificationTransactionDTO, NamespaceMetadataTransactionDTO, NamespaceRegistrationTransactionDTO, NodeKeyLinkTransactionDTO, SecretLockTransactionDTO, SecretProofTransactionDTO, TransferTransactionDTO, VotingKeyLinkTransactionDTO, VrfKeyLinkTransactionDTO
     *
     * @return The actual instance (AccountAddressRestrictionTransactionDTO, AccountKeyLinkTransactionDTO, AccountMetadataTransactionDTO, AccountMosaicRestrictionTransactionDTO, AccountOperationRestrictionTransactionDTO, AddressAliasTransactionDTO, AggregateTransactionDTO, AggregateTransactionExtendedDTO, EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO, HashLockTransactionDTO, MosaicAddressRestrictionTransactionDTO, MosaicAliasTransactionDTO, MosaicDefinitionTransactionDTO, MosaicGlobalRestrictionTransactionDTO, MosaicMetadataTransactionDTO, MosaicSupplyChangeTransactionDTO, MosaicSupplyRevocationTransactionDTO, MultisigAccountModificationTransactionDTO, NamespaceMetadataTransactionDTO, NamespaceRegistrationTransactionDTO, NodeKeyLinkTransactionDTO, SecretLockTransactionDTO, SecretProofTransactionDTO, TransferTransactionDTO, VotingKeyLinkTransactionDTO, VrfKeyLinkTransactionDTO)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AccountKeyLinkTransactionDTO`. If the actual instance is not `AccountKeyLinkTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountKeyLinkTransactionDTO`
     * @throws ClassCastException if the instance is not `AccountKeyLinkTransactionDTO`
     */
    public AccountKeyLinkTransactionDTO getAccountKeyLinkTransactionDTO() throws ClassCastException {
        return (AccountKeyLinkTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedAccountKeyLinkTransactionDTO`. If the actual instance is not `EmbeddedAccountKeyLinkTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedAccountKeyLinkTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedAccountKeyLinkTransactionDTO`
     */
    public EmbeddedAccountKeyLinkTransactionDTO getEmbeddedAccountKeyLinkTransactionDTO() throws ClassCastException {
        return (EmbeddedAccountKeyLinkTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NodeKeyLinkTransactionDTO`. If the actual instance is not `NodeKeyLinkTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NodeKeyLinkTransactionDTO`
     * @throws ClassCastException if the instance is not `NodeKeyLinkTransactionDTO`
     */
    public NodeKeyLinkTransactionDTO getNodeKeyLinkTransactionDTO() throws ClassCastException {
        return (NodeKeyLinkTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedNodeKeyLinkTransactionDTO`. If the actual instance is not `EmbeddedNodeKeyLinkTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedNodeKeyLinkTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedNodeKeyLinkTransactionDTO`
     */
    public EmbeddedNodeKeyLinkTransactionDTO getEmbeddedNodeKeyLinkTransactionDTO() throws ClassCastException {
        return (EmbeddedNodeKeyLinkTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VrfKeyLinkTransactionDTO`. If the actual instance is not `VrfKeyLinkTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VrfKeyLinkTransactionDTO`
     * @throws ClassCastException if the instance is not `VrfKeyLinkTransactionDTO`
     */
    public VrfKeyLinkTransactionDTO getVrfKeyLinkTransactionDTO() throws ClassCastException {
        return (VrfKeyLinkTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedVrfKeyLinkTransactionDTO`. If the actual instance is not `EmbeddedVrfKeyLinkTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedVrfKeyLinkTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedVrfKeyLinkTransactionDTO`
     */
    public EmbeddedVrfKeyLinkTransactionDTO getEmbeddedVrfKeyLinkTransactionDTO() throws ClassCastException {
        return (EmbeddedVrfKeyLinkTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `VotingKeyLinkTransactionDTO`. If the actual instance is not `VotingKeyLinkTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VotingKeyLinkTransactionDTO`
     * @throws ClassCastException if the instance is not `VotingKeyLinkTransactionDTO`
     */
    public VotingKeyLinkTransactionDTO getVotingKeyLinkTransactionDTO() throws ClassCastException {
        return (VotingKeyLinkTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedVotingKeyLinkTransactionDTO`. If the actual instance is not `EmbeddedVotingKeyLinkTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedVotingKeyLinkTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedVotingKeyLinkTransactionDTO`
     */
    public EmbeddedVotingKeyLinkTransactionDTO getEmbeddedVotingKeyLinkTransactionDTO() throws ClassCastException {
        return (EmbeddedVotingKeyLinkTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AggregateTransactionDTO`. If the actual instance is not `AggregateTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AggregateTransactionDTO`
     * @throws ClassCastException if the instance is not `AggregateTransactionDTO`
     */
    public AggregateTransactionDTO getAggregateTransactionDTO() throws ClassCastException {
        return (AggregateTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AggregateTransactionExtendedDTO`. If the actual instance is not `AggregateTransactionExtendedDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AggregateTransactionExtendedDTO`
     * @throws ClassCastException if the instance is not `AggregateTransactionExtendedDTO`
     */
    public AggregateTransactionExtendedDTO getAggregateTransactionExtendedDTO() throws ClassCastException {
        return (AggregateTransactionExtendedDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `HashLockTransactionDTO`. If the actual instance is not `HashLockTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HashLockTransactionDTO`
     * @throws ClassCastException if the instance is not `HashLockTransactionDTO`
     */
    public HashLockTransactionDTO getHashLockTransactionDTO() throws ClassCastException {
        return (HashLockTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedHashLockTransactionDTO`. If the actual instance is not `EmbeddedHashLockTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedHashLockTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedHashLockTransactionDTO`
     */
    public EmbeddedHashLockTransactionDTO getEmbeddedHashLockTransactionDTO() throws ClassCastException {
        return (EmbeddedHashLockTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SecretLockTransactionDTO`. If the actual instance is not `SecretLockTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecretLockTransactionDTO`
     * @throws ClassCastException if the instance is not `SecretLockTransactionDTO`
     */
    public SecretLockTransactionDTO getSecretLockTransactionDTO() throws ClassCastException {
        return (SecretLockTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedSecretLockTransactionDTO`. If the actual instance is not `EmbeddedSecretLockTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedSecretLockTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedSecretLockTransactionDTO`
     */
    public EmbeddedSecretLockTransactionDTO getEmbeddedSecretLockTransactionDTO() throws ClassCastException {
        return (EmbeddedSecretLockTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SecretProofTransactionDTO`. If the actual instance is not `SecretProofTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecretProofTransactionDTO`
     * @throws ClassCastException if the instance is not `SecretProofTransactionDTO`
     */
    public SecretProofTransactionDTO getSecretProofTransactionDTO() throws ClassCastException {
        return (SecretProofTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedSecretProofTransactionDTO`. If the actual instance is not `EmbeddedSecretProofTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedSecretProofTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedSecretProofTransactionDTO`
     */
    public EmbeddedSecretProofTransactionDTO getEmbeddedSecretProofTransactionDTO() throws ClassCastException {
        return (EmbeddedSecretProofTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccountMetadataTransactionDTO`. If the actual instance is not `AccountMetadataTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountMetadataTransactionDTO`
     * @throws ClassCastException if the instance is not `AccountMetadataTransactionDTO`
     */
    public AccountMetadataTransactionDTO getAccountMetadataTransactionDTO() throws ClassCastException {
        return (AccountMetadataTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedAccountMetadataTransactionDTO`. If the actual instance is not `EmbeddedAccountMetadataTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedAccountMetadataTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedAccountMetadataTransactionDTO`
     */
    public EmbeddedAccountMetadataTransactionDTO getEmbeddedAccountMetadataTransactionDTO() throws ClassCastException {
        return (EmbeddedAccountMetadataTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicMetadataTransactionDTO`. If the actual instance is not `MosaicMetadataTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicMetadataTransactionDTO`
     * @throws ClassCastException if the instance is not `MosaicMetadataTransactionDTO`
     */
    public MosaicMetadataTransactionDTO getMosaicMetadataTransactionDTO() throws ClassCastException {
        return (MosaicMetadataTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedMosaicMetadataTransactionDTO`. If the actual instance is not `EmbeddedMosaicMetadataTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedMosaicMetadataTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedMosaicMetadataTransactionDTO`
     */
    public EmbeddedMosaicMetadataTransactionDTO getEmbeddedMosaicMetadataTransactionDTO() throws ClassCastException {
        return (EmbeddedMosaicMetadataTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NamespaceMetadataTransactionDTO`. If the actual instance is not `NamespaceMetadataTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NamespaceMetadataTransactionDTO`
     * @throws ClassCastException if the instance is not `NamespaceMetadataTransactionDTO`
     */
    public NamespaceMetadataTransactionDTO getNamespaceMetadataTransactionDTO() throws ClassCastException {
        return (NamespaceMetadataTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedNamespaceMetadataTransactionDTO`. If the actual instance is not `EmbeddedNamespaceMetadataTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedNamespaceMetadataTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedNamespaceMetadataTransactionDTO`
     */
    public EmbeddedNamespaceMetadataTransactionDTO getEmbeddedNamespaceMetadataTransactionDTO() throws ClassCastException {
        return (EmbeddedNamespaceMetadataTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicDefinitionTransactionDTO`. If the actual instance is not `MosaicDefinitionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicDefinitionTransactionDTO`
     * @throws ClassCastException if the instance is not `MosaicDefinitionTransactionDTO`
     */
    public MosaicDefinitionTransactionDTO getMosaicDefinitionTransactionDTO() throws ClassCastException {
        return (MosaicDefinitionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedMosaicDefinitionTransactionDTO`. If the actual instance is not `EmbeddedMosaicDefinitionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedMosaicDefinitionTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedMosaicDefinitionTransactionDTO`
     */
    public EmbeddedMosaicDefinitionTransactionDTO getEmbeddedMosaicDefinitionTransactionDTO() throws ClassCastException {
        return (EmbeddedMosaicDefinitionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicSupplyChangeTransactionDTO`. If the actual instance is not `MosaicSupplyChangeTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicSupplyChangeTransactionDTO`
     * @throws ClassCastException if the instance is not `MosaicSupplyChangeTransactionDTO`
     */
    public MosaicSupplyChangeTransactionDTO getMosaicSupplyChangeTransactionDTO() throws ClassCastException {
        return (MosaicSupplyChangeTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedMosaicSupplyChangeTransactionDTO`. If the actual instance is not `EmbeddedMosaicSupplyChangeTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedMosaicSupplyChangeTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedMosaicSupplyChangeTransactionDTO`
     */
    public EmbeddedMosaicSupplyChangeTransactionDTO getEmbeddedMosaicSupplyChangeTransactionDTO() throws ClassCastException {
        return (EmbeddedMosaicSupplyChangeTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicSupplyRevocationTransactionDTO`. If the actual instance is not `MosaicSupplyRevocationTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicSupplyRevocationTransactionDTO`
     * @throws ClassCastException if the instance is not `MosaicSupplyRevocationTransactionDTO`
     */
    public MosaicSupplyRevocationTransactionDTO getMosaicSupplyRevocationTransactionDTO() throws ClassCastException {
        return (MosaicSupplyRevocationTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedMosaicSupplyRevocationTransactionDTO`. If the actual instance is not `EmbeddedMosaicSupplyRevocationTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedMosaicSupplyRevocationTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedMosaicSupplyRevocationTransactionDTO`
     */
    public EmbeddedMosaicSupplyRevocationTransactionDTO getEmbeddedMosaicSupplyRevocationTransactionDTO() throws ClassCastException {
        return (EmbeddedMosaicSupplyRevocationTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NamespaceRegistrationTransactionDTO`. If the actual instance is not `NamespaceRegistrationTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NamespaceRegistrationTransactionDTO`
     * @throws ClassCastException if the instance is not `NamespaceRegistrationTransactionDTO`
     */
    public NamespaceRegistrationTransactionDTO getNamespaceRegistrationTransactionDTO() throws ClassCastException {
        return (NamespaceRegistrationTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedNamespaceRegistrationTransactionDTO`. If the actual instance is not `EmbeddedNamespaceRegistrationTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedNamespaceRegistrationTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedNamespaceRegistrationTransactionDTO`
     */
    public EmbeddedNamespaceRegistrationTransactionDTO getEmbeddedNamespaceRegistrationTransactionDTO() throws ClassCastException {
        return (EmbeddedNamespaceRegistrationTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddressAliasTransactionDTO`. If the actual instance is not `AddressAliasTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddressAliasTransactionDTO`
     * @throws ClassCastException if the instance is not `AddressAliasTransactionDTO`
     */
    public AddressAliasTransactionDTO getAddressAliasTransactionDTO() throws ClassCastException {
        return (AddressAliasTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedAddressAliasTransactionDTO`. If the actual instance is not `EmbeddedAddressAliasTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedAddressAliasTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedAddressAliasTransactionDTO`
     */
    public EmbeddedAddressAliasTransactionDTO getEmbeddedAddressAliasTransactionDTO() throws ClassCastException {
        return (EmbeddedAddressAliasTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicAliasTransactionDTO`. If the actual instance is not `MosaicAliasTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicAliasTransactionDTO`
     * @throws ClassCastException if the instance is not `MosaicAliasTransactionDTO`
     */
    public MosaicAliasTransactionDTO getMosaicAliasTransactionDTO() throws ClassCastException {
        return (MosaicAliasTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedMosaicAliasTransactionDTO`. If the actual instance is not `EmbeddedMosaicAliasTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedMosaicAliasTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedMosaicAliasTransactionDTO`
     */
    public EmbeddedMosaicAliasTransactionDTO getEmbeddedMosaicAliasTransactionDTO() throws ClassCastException {
        return (EmbeddedMosaicAliasTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MultisigAccountModificationTransactionDTO`. If the actual instance is not `MultisigAccountModificationTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MultisigAccountModificationTransactionDTO`
     * @throws ClassCastException if the instance is not `MultisigAccountModificationTransactionDTO`
     */
    public MultisigAccountModificationTransactionDTO getMultisigAccountModificationTransactionDTO() throws ClassCastException {
        return (MultisigAccountModificationTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedMultisigAccountModificationTransactionDTO`. If the actual instance is not `EmbeddedMultisigAccountModificationTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedMultisigAccountModificationTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedMultisigAccountModificationTransactionDTO`
     */
    public EmbeddedMultisigAccountModificationTransactionDTO getEmbeddedMultisigAccountModificationTransactionDTO() throws ClassCastException {
        return (EmbeddedMultisigAccountModificationTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccountAddressRestrictionTransactionDTO`. If the actual instance is not `AccountAddressRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountAddressRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `AccountAddressRestrictionTransactionDTO`
     */
    public AccountAddressRestrictionTransactionDTO getAccountAddressRestrictionTransactionDTO() throws ClassCastException {
        return (AccountAddressRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedAccountAddressRestrictionTransactionDTO`. If the actual instance is not `EmbeddedAccountAddressRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedAccountAddressRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedAccountAddressRestrictionTransactionDTO`
     */
    public EmbeddedAccountAddressRestrictionTransactionDTO getEmbeddedAccountAddressRestrictionTransactionDTO() throws ClassCastException {
        return (EmbeddedAccountAddressRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccountMosaicRestrictionTransactionDTO`. If the actual instance is not `AccountMosaicRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountMosaicRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `AccountMosaicRestrictionTransactionDTO`
     */
    public AccountMosaicRestrictionTransactionDTO getAccountMosaicRestrictionTransactionDTO() throws ClassCastException {
        return (AccountMosaicRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedAccountMosaicRestrictionTransactionDTO`. If the actual instance is not `EmbeddedAccountMosaicRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedAccountMosaicRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedAccountMosaicRestrictionTransactionDTO`
     */
    public EmbeddedAccountMosaicRestrictionTransactionDTO getEmbeddedAccountMosaicRestrictionTransactionDTO() throws ClassCastException {
        return (EmbeddedAccountMosaicRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AccountOperationRestrictionTransactionDTO`. If the actual instance is not `AccountOperationRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AccountOperationRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `AccountOperationRestrictionTransactionDTO`
     */
    public AccountOperationRestrictionTransactionDTO getAccountOperationRestrictionTransactionDTO() throws ClassCastException {
        return (AccountOperationRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedAccountOperationRestrictionTransactionDTO`. If the actual instance is not `EmbeddedAccountOperationRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedAccountOperationRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedAccountOperationRestrictionTransactionDTO`
     */
    public EmbeddedAccountOperationRestrictionTransactionDTO getEmbeddedAccountOperationRestrictionTransactionDTO() throws ClassCastException {
        return (EmbeddedAccountOperationRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicGlobalRestrictionTransactionDTO`. If the actual instance is not `MosaicGlobalRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicGlobalRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `MosaicGlobalRestrictionTransactionDTO`
     */
    public MosaicGlobalRestrictionTransactionDTO getMosaicGlobalRestrictionTransactionDTO() throws ClassCastException {
        return (MosaicGlobalRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedMosaicGlobalRestrictionTransactionDTO`. If the actual instance is not `EmbeddedMosaicGlobalRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedMosaicGlobalRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedMosaicGlobalRestrictionTransactionDTO`
     */
    public EmbeddedMosaicGlobalRestrictionTransactionDTO getEmbeddedMosaicGlobalRestrictionTransactionDTO() throws ClassCastException {
        return (EmbeddedMosaicGlobalRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MosaicAddressRestrictionTransactionDTO`. If the actual instance is not `MosaicAddressRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MosaicAddressRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `MosaicAddressRestrictionTransactionDTO`
     */
    public MosaicAddressRestrictionTransactionDTO getMosaicAddressRestrictionTransactionDTO() throws ClassCastException {
        return (MosaicAddressRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedMosaicAddressRestrictionTransactionDTO`. If the actual instance is not `EmbeddedMosaicAddressRestrictionTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedMosaicAddressRestrictionTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedMosaicAddressRestrictionTransactionDTO`
     */
    public EmbeddedMosaicAddressRestrictionTransactionDTO getEmbeddedMosaicAddressRestrictionTransactionDTO() throws ClassCastException {
        return (EmbeddedMosaicAddressRestrictionTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TransferTransactionDTO`. If the actual instance is not `TransferTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TransferTransactionDTO`
     * @throws ClassCastException if the instance is not `TransferTransactionDTO`
     */
    public TransferTransactionDTO getTransferTransactionDTO() throws ClassCastException {
        return (TransferTransactionDTO)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmbeddedTransferTransactionDTO`. If the actual instance is not `EmbeddedTransferTransactionDTO`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmbeddedTransferTransactionDTO`
     * @throws ClassCastException if the instance is not `EmbeddedTransferTransactionDTO`
     */
    public EmbeddedTransferTransactionDTO getEmbeddedTransferTransactionDTO() throws ClassCastException {
        return (EmbeddedTransferTransactionDTO)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionInfoDTOTransaction
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate anyOf schemas one by one
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with AccountKeyLinkTransactionDTO
    try {
      AccountKeyLinkTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AccountKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedAccountKeyLinkTransactionDTO
    try {
      EmbeddedAccountKeyLinkTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedAccountKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with NodeKeyLinkTransactionDTO
    try {
      NodeKeyLinkTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for NodeKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedNodeKeyLinkTransactionDTO
    try {
      EmbeddedNodeKeyLinkTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedNodeKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VrfKeyLinkTransactionDTO
    try {
      VrfKeyLinkTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VrfKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedVrfKeyLinkTransactionDTO
    try {
      EmbeddedVrfKeyLinkTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedVrfKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with VotingKeyLinkTransactionDTO
    try {
      VotingKeyLinkTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for VotingKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedVotingKeyLinkTransactionDTO
    try {
      EmbeddedVotingKeyLinkTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedVotingKeyLinkTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AggregateTransactionDTO
    try {
      AggregateTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AggregateTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AggregateTransactionExtendedDTO
    try {
      AggregateTransactionExtendedDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AggregateTransactionExtendedDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with HashLockTransactionDTO
    try {
      HashLockTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for HashLockTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedHashLockTransactionDTO
    try {
      EmbeddedHashLockTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedHashLockTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SecretLockTransactionDTO
    try {
      SecretLockTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SecretLockTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedSecretLockTransactionDTO
    try {
      EmbeddedSecretLockTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedSecretLockTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SecretProofTransactionDTO
    try {
      SecretProofTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SecretProofTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedSecretProofTransactionDTO
    try {
      EmbeddedSecretProofTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedSecretProofTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AccountMetadataTransactionDTO
    try {
      AccountMetadataTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AccountMetadataTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedAccountMetadataTransactionDTO
    try {
      EmbeddedAccountMetadataTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedAccountMetadataTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MosaicMetadataTransactionDTO
    try {
      MosaicMetadataTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MosaicMetadataTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedMosaicMetadataTransactionDTO
    try {
      EmbeddedMosaicMetadataTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedMosaicMetadataTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with NamespaceMetadataTransactionDTO
    try {
      NamespaceMetadataTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for NamespaceMetadataTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedNamespaceMetadataTransactionDTO
    try {
      EmbeddedNamespaceMetadataTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedNamespaceMetadataTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MosaicDefinitionTransactionDTO
    try {
      MosaicDefinitionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MosaicDefinitionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedMosaicDefinitionTransactionDTO
    try {
      EmbeddedMosaicDefinitionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedMosaicDefinitionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MosaicSupplyChangeTransactionDTO
    try {
      MosaicSupplyChangeTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MosaicSupplyChangeTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedMosaicSupplyChangeTransactionDTO
    try {
      EmbeddedMosaicSupplyChangeTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedMosaicSupplyChangeTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MosaicSupplyRevocationTransactionDTO
    try {
      MosaicSupplyRevocationTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MosaicSupplyRevocationTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedMosaicSupplyRevocationTransactionDTO
    try {
      EmbeddedMosaicSupplyRevocationTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedMosaicSupplyRevocationTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with NamespaceRegistrationTransactionDTO
    try {
      NamespaceRegistrationTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for NamespaceRegistrationTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedNamespaceRegistrationTransactionDTO
    try {
      EmbeddedNamespaceRegistrationTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedNamespaceRegistrationTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AddressAliasTransactionDTO
    try {
      AddressAliasTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AddressAliasTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedAddressAliasTransactionDTO
    try {
      EmbeddedAddressAliasTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedAddressAliasTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MosaicAliasTransactionDTO
    try {
      MosaicAliasTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MosaicAliasTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedMosaicAliasTransactionDTO
    try {
      EmbeddedMosaicAliasTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedMosaicAliasTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MultisigAccountModificationTransactionDTO
    try {
      MultisigAccountModificationTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MultisigAccountModificationTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedMultisigAccountModificationTransactionDTO
    try {
      EmbeddedMultisigAccountModificationTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedMultisigAccountModificationTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AccountAddressRestrictionTransactionDTO
    try {
      AccountAddressRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AccountAddressRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedAccountAddressRestrictionTransactionDTO
    try {
      EmbeddedAccountAddressRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedAccountAddressRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AccountMosaicRestrictionTransactionDTO
    try {
      AccountMosaicRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AccountMosaicRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedAccountMosaicRestrictionTransactionDTO
    try {
      EmbeddedAccountMosaicRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedAccountMosaicRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AccountOperationRestrictionTransactionDTO
    try {
      AccountOperationRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AccountOperationRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedAccountOperationRestrictionTransactionDTO
    try {
      EmbeddedAccountOperationRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedAccountOperationRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MosaicGlobalRestrictionTransactionDTO
    try {
      MosaicGlobalRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MosaicGlobalRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedMosaicGlobalRestrictionTransactionDTO
    try {
      EmbeddedMosaicGlobalRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedMosaicGlobalRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MosaicAddressRestrictionTransactionDTO
    try {
      MosaicAddressRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for MosaicAddressRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedMosaicAddressRestrictionTransactionDTO
    try {
      EmbeddedMosaicAddressRestrictionTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedMosaicAddressRestrictionTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TransferTransactionDTO
    try {
      TransferTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for TransferTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmbeddedTransferTransactionDTO
    try {
      EmbeddedTransferTransactionDTO.validateJsonElement(jsonElement);
      return;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmbeddedTransferTransactionDTO failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    throw new IOException(String.format("The JSON string is invalid for TransactionInfoDTOTransaction with anyOf schemas: AccountAddressRestrictionTransactionDTO, AccountKeyLinkTransactionDTO, AccountMetadataTransactionDTO, AccountMosaicRestrictionTransactionDTO, AccountOperationRestrictionTransactionDTO, AddressAliasTransactionDTO, AggregateTransactionDTO, AggregateTransactionExtendedDTO, EmbeddedAccountAddressRestrictionTransactionDTO, EmbeddedAccountKeyLinkTransactionDTO, EmbeddedAccountMetadataTransactionDTO, EmbeddedAccountMosaicRestrictionTransactionDTO, EmbeddedAccountOperationRestrictionTransactionDTO, EmbeddedAddressAliasTransactionDTO, EmbeddedHashLockTransactionDTO, EmbeddedMosaicAddressRestrictionTransactionDTO, EmbeddedMosaicAliasTransactionDTO, EmbeddedMosaicDefinitionTransactionDTO, EmbeddedMosaicGlobalRestrictionTransactionDTO, EmbeddedMosaicMetadataTransactionDTO, EmbeddedMosaicSupplyChangeTransactionDTO, EmbeddedMosaicSupplyRevocationTransactionDTO, EmbeddedMultisigAccountModificationTransactionDTO, EmbeddedNamespaceMetadataTransactionDTO, EmbeddedNamespaceRegistrationTransactionDTO, EmbeddedNodeKeyLinkTransactionDTO, EmbeddedSecretLockTransactionDTO, EmbeddedSecretProofTransactionDTO, EmbeddedTransferTransactionDTO, EmbeddedVotingKeyLinkTransactionDTO, EmbeddedVrfKeyLinkTransactionDTO, HashLockTransactionDTO, MosaicAddressRestrictionTransactionDTO, MosaicAliasTransactionDTO, MosaicDefinitionTransactionDTO, MosaicGlobalRestrictionTransactionDTO, MosaicMetadataTransactionDTO, MosaicSupplyChangeTransactionDTO, MosaicSupplyRevocationTransactionDTO, MultisigAccountModificationTransactionDTO, NamespaceMetadataTransactionDTO, NamespaceRegistrationTransactionDTO, NodeKeyLinkTransactionDTO, SecretLockTransactionDTO, SecretProofTransactionDTO, TransferTransactionDTO, VotingKeyLinkTransactionDTO, VrfKeyLinkTransactionDTO. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    
  }

 /**
  * Create an instance of TransactionInfoDTOTransaction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionInfoDTOTransaction
  * @throws IOException if the JSON string is invalid with respect to TransactionInfoDTOTransaction
  */
  public static TransactionInfoDTOTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionInfoDTOTransaction.class);
  }

 /**
  * Convert an instance of TransactionInfoDTOTransaction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

