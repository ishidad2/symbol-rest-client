/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MosaicNetworkPropertiesDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class MosaicNetworkPropertiesDTO {
  public static final String SERIALIZED_NAME_MAX_MOSAICS_PER_ACCOUNT = "maxMosaicsPerAccount";
  @SerializedName(SERIALIZED_NAME_MAX_MOSAICS_PER_ACCOUNT)
  private String maxMosaicsPerAccount;

  public static final String SERIALIZED_NAME_MAX_MOSAIC_DURATION = "maxMosaicDuration";
  @SerializedName(SERIALIZED_NAME_MAX_MOSAIC_DURATION)
  private String maxMosaicDuration;

  public static final String SERIALIZED_NAME_MAX_MOSAIC_DIVISIBILITY = "maxMosaicDivisibility";
  @SerializedName(SERIALIZED_NAME_MAX_MOSAIC_DIVISIBILITY)
  private String maxMosaicDivisibility;

  public static final String SERIALIZED_NAME_MOSAIC_RENTAL_FEE_SINK_ADDRESS = "mosaicRentalFeeSinkAddress";
  @SerializedName(SERIALIZED_NAME_MOSAIC_RENTAL_FEE_SINK_ADDRESS)
  private String mosaicRentalFeeSinkAddress;

  public static final String SERIALIZED_NAME_MOSAIC_RENTAL_FEE = "mosaicRentalFee";
  @SerializedName(SERIALIZED_NAME_MOSAIC_RENTAL_FEE)
  private String mosaicRentalFee;

  public MosaicNetworkPropertiesDTO() {
  }

  public MosaicNetworkPropertiesDTO maxMosaicsPerAccount(String maxMosaicsPerAccount) {
    this.maxMosaicsPerAccount = maxMosaicsPerAccount;
    return this;
  }

   /**
   * Maximum number of mosaics that an account can own.
   * @return maxMosaicsPerAccount
  **/
  @javax.annotation.Nullable
  public String getMaxMosaicsPerAccount() {
    return maxMosaicsPerAccount;
  }

  public void setMaxMosaicsPerAccount(String maxMosaicsPerAccount) {
    this.maxMosaicsPerAccount = maxMosaicsPerAccount;
  }


  public MosaicNetworkPropertiesDTO maxMosaicDuration(String maxMosaicDuration) {
    this.maxMosaicDuration = maxMosaicDuration;
    return this;
  }

   /**
   * Maximum mosaic duration.
   * @return maxMosaicDuration
  **/
  @javax.annotation.Nullable
  public String getMaxMosaicDuration() {
    return maxMosaicDuration;
  }

  public void setMaxMosaicDuration(String maxMosaicDuration) {
    this.maxMosaicDuration = maxMosaicDuration;
  }


  public MosaicNetworkPropertiesDTO maxMosaicDivisibility(String maxMosaicDivisibility) {
    this.maxMosaicDivisibility = maxMosaicDivisibility;
    return this;
  }

   /**
   * Maximum mosaic divisibility.
   * @return maxMosaicDivisibility
  **/
  @javax.annotation.Nullable
  public String getMaxMosaicDivisibility() {
    return maxMosaicDivisibility;
  }

  public void setMaxMosaicDivisibility(String maxMosaicDivisibility) {
    this.maxMosaicDivisibility = maxMosaicDivisibility;
  }


  public MosaicNetworkPropertiesDTO mosaicRentalFeeSinkAddress(String mosaicRentalFeeSinkAddress) {
    this.mosaicRentalFeeSinkAddress = mosaicRentalFeeSinkAddress;
    return this;
  }

   /**
   * Address encoded using a 32-character set.
   * @return mosaicRentalFeeSinkAddress
  **/
  @javax.annotation.Nullable
  public String getMosaicRentalFeeSinkAddress() {
    return mosaicRentalFeeSinkAddress;
  }

  public void setMosaicRentalFeeSinkAddress(String mosaicRentalFeeSinkAddress) {
    this.mosaicRentalFeeSinkAddress = mosaicRentalFeeSinkAddress;
  }


  public MosaicNetworkPropertiesDTO mosaicRentalFee(String mosaicRentalFee) {
    this.mosaicRentalFee = mosaicRentalFee;
    return this;
  }

   /**
   * Mosaic rental fee.
   * @return mosaicRentalFee
  **/
  @javax.annotation.Nullable
  public String getMosaicRentalFee() {
    return mosaicRentalFee;
  }

  public void setMosaicRentalFee(String mosaicRentalFee) {
    this.mosaicRentalFee = mosaicRentalFee;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MosaicNetworkPropertiesDTO mosaicNetworkPropertiesDTO = (MosaicNetworkPropertiesDTO) o;
    return Objects.equals(this.maxMosaicsPerAccount, mosaicNetworkPropertiesDTO.maxMosaicsPerAccount) &&
        Objects.equals(this.maxMosaicDuration, mosaicNetworkPropertiesDTO.maxMosaicDuration) &&
        Objects.equals(this.maxMosaicDivisibility, mosaicNetworkPropertiesDTO.maxMosaicDivisibility) &&
        Objects.equals(this.mosaicRentalFeeSinkAddress, mosaicNetworkPropertiesDTO.mosaicRentalFeeSinkAddress) &&
        Objects.equals(this.mosaicRentalFee, mosaicNetworkPropertiesDTO.mosaicRentalFee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxMosaicsPerAccount, maxMosaicDuration, maxMosaicDivisibility, mosaicRentalFeeSinkAddress, mosaicRentalFee);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MosaicNetworkPropertiesDTO {\n");
    sb.append("    maxMosaicsPerAccount: ").append(toIndentedString(maxMosaicsPerAccount)).append("\n");
    sb.append("    maxMosaicDuration: ").append(toIndentedString(maxMosaicDuration)).append("\n");
    sb.append("    maxMosaicDivisibility: ").append(toIndentedString(maxMosaicDivisibility)).append("\n");
    sb.append("    mosaicRentalFeeSinkAddress: ").append(toIndentedString(mosaicRentalFeeSinkAddress)).append("\n");
    sb.append("    mosaicRentalFee: ").append(toIndentedString(mosaicRentalFee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxMosaicsPerAccount");
    openapiFields.add("maxMosaicDuration");
    openapiFields.add("maxMosaicDivisibility");
    openapiFields.add("mosaicRentalFeeSinkAddress");
    openapiFields.add("mosaicRentalFee");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MosaicNetworkPropertiesDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MosaicNetworkPropertiesDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MosaicNetworkPropertiesDTO is not found in the empty JSON string", MosaicNetworkPropertiesDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MosaicNetworkPropertiesDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MosaicNetworkPropertiesDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxMosaicsPerAccount") != null && !jsonObj.get("maxMosaicsPerAccount").isJsonNull()) && !jsonObj.get("maxMosaicsPerAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxMosaicsPerAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxMosaicsPerAccount").toString()));
      }
      if ((jsonObj.get("maxMosaicDuration") != null && !jsonObj.get("maxMosaicDuration").isJsonNull()) && !jsonObj.get("maxMosaicDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxMosaicDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxMosaicDuration").toString()));
      }
      if ((jsonObj.get("maxMosaicDivisibility") != null && !jsonObj.get("maxMosaicDivisibility").isJsonNull()) && !jsonObj.get("maxMosaicDivisibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxMosaicDivisibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxMosaicDivisibility").toString()));
      }
      if ((jsonObj.get("mosaicRentalFeeSinkAddress") != null && !jsonObj.get("mosaicRentalFeeSinkAddress").isJsonNull()) && !jsonObj.get("mosaicRentalFeeSinkAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mosaicRentalFeeSinkAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mosaicRentalFeeSinkAddress").toString()));
      }
      if ((jsonObj.get("mosaicRentalFee") != null && !jsonObj.get("mosaicRentalFee").isJsonNull()) && !jsonObj.get("mosaicRentalFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mosaicRentalFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mosaicRentalFee").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MosaicNetworkPropertiesDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MosaicNetworkPropertiesDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MosaicNetworkPropertiesDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MosaicNetworkPropertiesDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<MosaicNetworkPropertiesDTO>() {
           @Override
           public void write(JsonWriter out, MosaicNetworkPropertiesDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MosaicNetworkPropertiesDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MosaicNetworkPropertiesDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MosaicNetworkPropertiesDTO
  * @throws IOException if the JSON string is invalid with respect to MosaicNetworkPropertiesDTO
  */
  public static MosaicNetworkPropertiesDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MosaicNetworkPropertiesDTO.class);
  }

 /**
  * Convert an instance of MosaicNetworkPropertiesDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

