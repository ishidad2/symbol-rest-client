/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NodeIdentityEqualityStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Network related configuration properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class NetworkPropertiesDTO {
  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_NODE_EQUALITY_STRATEGY = "nodeEqualityStrategy";
  @SerializedName(SERIALIZED_NAME_NODE_EQUALITY_STRATEGY)
  private NodeIdentityEqualityStrategy nodeEqualityStrategy;

  public static final String SERIALIZED_NAME_NEMESIS_SIGNER_PUBLIC_KEY = "nemesisSignerPublicKey";
  @SerializedName(SERIALIZED_NAME_NEMESIS_SIGNER_PUBLIC_KEY)
  private String nemesisSignerPublicKey;

  public static final String SERIALIZED_NAME_GENERATION_HASH_SEED = "generationHashSeed";
  @SerializedName(SERIALIZED_NAME_GENERATION_HASH_SEED)
  private String generationHashSeed;

  public static final String SERIALIZED_NAME_EPOCH_ADJUSTMENT = "epochAdjustment";
  @SerializedName(SERIALIZED_NAME_EPOCH_ADJUSTMENT)
  private String epochAdjustment;

  public NetworkPropertiesDTO() {
  }

  public NetworkPropertiesDTO identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Network identifier.
   * @return identifier
  **/
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public NetworkPropertiesDTO nodeEqualityStrategy(NodeIdentityEqualityStrategy nodeEqualityStrategy) {
    this.nodeEqualityStrategy = nodeEqualityStrategy;
    return this;
  }

   /**
   * Get nodeEqualityStrategy
   * @return nodeEqualityStrategy
  **/
  @javax.annotation.Nullable
  public NodeIdentityEqualityStrategy getNodeEqualityStrategy() {
    return nodeEqualityStrategy;
  }

  public void setNodeEqualityStrategy(NodeIdentityEqualityStrategy nodeEqualityStrategy) {
    this.nodeEqualityStrategy = nodeEqualityStrategy;
  }


  public NetworkPropertiesDTO nemesisSignerPublicKey(String nemesisSignerPublicKey) {
    this.nemesisSignerPublicKey = nemesisSignerPublicKey;
    return this;
  }

   /**
   * Public key.
   * @return nemesisSignerPublicKey
  **/
  @javax.annotation.Nullable
  public String getNemesisSignerPublicKey() {
    return nemesisSignerPublicKey;
  }

  public void setNemesisSignerPublicKey(String nemesisSignerPublicKey) {
    this.nemesisSignerPublicKey = nemesisSignerPublicKey;
  }


  public NetworkPropertiesDTO generationHashSeed(String generationHashSeed) {
    this.generationHashSeed = generationHashSeed;
    return this;
  }

   /**
   * Get generationHashSeed
   * @return generationHashSeed
  **/
  @javax.annotation.Nullable
  public String getGenerationHashSeed() {
    return generationHashSeed;
  }

  public void setGenerationHashSeed(String generationHashSeed) {
    this.generationHashSeed = generationHashSeed;
  }


  public NetworkPropertiesDTO epochAdjustment(String epochAdjustment) {
    this.epochAdjustment = epochAdjustment;
    return this;
  }

   /**
   * Nemesis epoch time adjustment.
   * @return epochAdjustment
  **/
  @javax.annotation.Nullable
  public String getEpochAdjustment() {
    return epochAdjustment;
  }

  public void setEpochAdjustment(String epochAdjustment) {
    this.epochAdjustment = epochAdjustment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkPropertiesDTO networkPropertiesDTO = (NetworkPropertiesDTO) o;
    return Objects.equals(this.identifier, networkPropertiesDTO.identifier) &&
        Objects.equals(this.nodeEqualityStrategy, networkPropertiesDTO.nodeEqualityStrategy) &&
        Objects.equals(this.nemesisSignerPublicKey, networkPropertiesDTO.nemesisSignerPublicKey) &&
        Objects.equals(this.generationHashSeed, networkPropertiesDTO.generationHashSeed) &&
        Objects.equals(this.epochAdjustment, networkPropertiesDTO.epochAdjustment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, nodeEqualityStrategy, nemesisSignerPublicKey, generationHashSeed, epochAdjustment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkPropertiesDTO {\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    nodeEqualityStrategy: ").append(toIndentedString(nodeEqualityStrategy)).append("\n");
    sb.append("    nemesisSignerPublicKey: ").append(toIndentedString(nemesisSignerPublicKey)).append("\n");
    sb.append("    generationHashSeed: ").append(toIndentedString(generationHashSeed)).append("\n");
    sb.append("    epochAdjustment: ").append(toIndentedString(epochAdjustment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identifier");
    openapiFields.add("nodeEqualityStrategy");
    openapiFields.add("nemesisSignerPublicKey");
    openapiFields.add("generationHashSeed");
    openapiFields.add("epochAdjustment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NetworkPropertiesDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkPropertiesDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkPropertiesDTO is not found in the empty JSON string", NetworkPropertiesDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkPropertiesDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkPropertiesDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      // validate the optional field `nodeEqualityStrategy`
      if (jsonObj.get("nodeEqualityStrategy") != null && !jsonObj.get("nodeEqualityStrategy").isJsonNull()) {
        NodeIdentityEqualityStrategy.validateJsonElement(jsonObj.get("nodeEqualityStrategy"));
      }
      if ((jsonObj.get("nemesisSignerPublicKey") != null && !jsonObj.get("nemesisSignerPublicKey").isJsonNull()) && !jsonObj.get("nemesisSignerPublicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nemesisSignerPublicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nemesisSignerPublicKey").toString()));
      }
      if ((jsonObj.get("generationHashSeed") != null && !jsonObj.get("generationHashSeed").isJsonNull()) && !jsonObj.get("generationHashSeed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generationHashSeed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generationHashSeed").toString()));
      }
      if ((jsonObj.get("epochAdjustment") != null && !jsonObj.get("epochAdjustment").isJsonNull()) && !jsonObj.get("epochAdjustment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `epochAdjustment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("epochAdjustment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkPropertiesDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkPropertiesDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkPropertiesDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkPropertiesDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkPropertiesDTO>() {
           @Override
           public void write(JsonWriter out, NetworkPropertiesDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkPropertiesDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NetworkPropertiesDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NetworkPropertiesDTO
  * @throws IOException if the JSON string is invalid with respect to NetworkPropertiesDTO
  */
  public static NetworkPropertiesDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkPropertiesDTO.class);
  }

 /**
  * Convert an instance of NetworkPropertiesDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

