/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LinkActionEnum;
import org.openapitools.client.model.NetworkTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction to associate a BLS public key with an account. Required for node operators willing to vote finalized blocks. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class VotingKeyLinkTransactionDTO {
  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SIGNER_PUBLIC_KEY = "signerPublicKey";
  @SerializedName(SERIALIZED_NAME_SIGNER_PUBLIC_KEY)
  private String signerPublicKey;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkTypeEnum network;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_MAX_FEE = "maxFee";
  @SerializedName(SERIALIZED_NAME_MAX_FEE)
  private String maxFee;

  public static final String SERIALIZED_NAME_DEADLINE = "deadline";
  @SerializedName(SERIALIZED_NAME_DEADLINE)
  private String deadline;

  public static final String SERIALIZED_NAME_LINKED_PUBLIC_KEY = "linkedPublicKey";
  @SerializedName(SERIALIZED_NAME_LINKED_PUBLIC_KEY)
  private String linkedPublicKey;

  public static final String SERIALIZED_NAME_START_EPOCH = "startEpoch";
  @SerializedName(SERIALIZED_NAME_START_EPOCH)
  private Long startEpoch;

  public static final String SERIALIZED_NAME_END_EPOCH = "endEpoch";
  @SerializedName(SERIALIZED_NAME_END_EPOCH)
  private Long endEpoch;

  public static final String SERIALIZED_NAME_LINK_ACTION = "linkAction";
  @SerializedName(SERIALIZED_NAME_LINK_ACTION)
  private LinkActionEnum linkAction;

  public VotingKeyLinkTransactionDTO() {
  }

  public VotingKeyLinkTransactionDTO size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * A number that allows uint 32 values.
   * @return size
  **/
  @javax.annotation.Nonnull
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public VotingKeyLinkTransactionDTO signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Entity&#39;s signature generated by the signer.
   * @return signature
  **/
  @javax.annotation.Nonnull
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public VotingKeyLinkTransactionDTO signerPublicKey(String signerPublicKey) {
    this.signerPublicKey = signerPublicKey;
    return this;
  }

   /**
   * Public key.
   * @return signerPublicKey
  **/
  @javax.annotation.Nonnull
  public String getSignerPublicKey() {
    return signerPublicKey;
  }

  public void setSignerPublicKey(String signerPublicKey) {
    this.signerPublicKey = signerPublicKey;
  }


  public VotingKeyLinkTransactionDTO version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Entity version.
   * @return version
  **/
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public VotingKeyLinkTransactionDTO network(NetworkTypeEnum network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @javax.annotation.Nonnull
  public NetworkTypeEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkTypeEnum network) {
    this.network = network;
  }


  public VotingKeyLinkTransactionDTO type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }


  public VotingKeyLinkTransactionDTO maxFee(String maxFee) {
    this.maxFee = maxFee;
    return this;
  }

   /**
   * Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
   * @return maxFee
  **/
  @javax.annotation.Nonnull
  public String getMaxFee() {
    return maxFee;
  }

  public void setMaxFee(String maxFee) {
    this.maxFee = maxFee;
  }


  public VotingKeyLinkTransactionDTO deadline(String deadline) {
    this.deadline = deadline;
    return this;
  }

   /**
   * Duration expressed in number of blocks.
   * @return deadline
  **/
  @javax.annotation.Nonnull
  public String getDeadline() {
    return deadline;
  }

  public void setDeadline(String deadline) {
    this.deadline = deadline;
  }


  public VotingKeyLinkTransactionDTO linkedPublicKey(String linkedPublicKey) {
    this.linkedPublicKey = linkedPublicKey;
    return this;
  }

   /**
   * 32 bytes voting public key.
   * @return linkedPublicKey
  **/
  @javax.annotation.Nonnull
  public String getLinkedPublicKey() {
    return linkedPublicKey;
  }

  public void setLinkedPublicKey(String linkedPublicKey) {
    this.linkedPublicKey = linkedPublicKey;
  }


  public VotingKeyLinkTransactionDTO startEpoch(Long startEpoch) {
    this.startEpoch = startEpoch;
    return this;
  }

   /**
   * Finalization Epoch
   * @return startEpoch
  **/
  @javax.annotation.Nonnull
  public Long getStartEpoch() {
    return startEpoch;
  }

  public void setStartEpoch(Long startEpoch) {
    this.startEpoch = startEpoch;
  }


  public VotingKeyLinkTransactionDTO endEpoch(Long endEpoch) {
    this.endEpoch = endEpoch;
    return this;
  }

   /**
   * Finalization Epoch
   * @return endEpoch
  **/
  @javax.annotation.Nonnull
  public Long getEndEpoch() {
    return endEpoch;
  }

  public void setEndEpoch(Long endEpoch) {
    this.endEpoch = endEpoch;
  }


  public VotingKeyLinkTransactionDTO linkAction(LinkActionEnum linkAction) {
    this.linkAction = linkAction;
    return this;
  }

   /**
   * Get linkAction
   * @return linkAction
  **/
  @javax.annotation.Nonnull
  public LinkActionEnum getLinkAction() {
    return linkAction;
  }

  public void setLinkAction(LinkActionEnum linkAction) {
    this.linkAction = linkAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VotingKeyLinkTransactionDTO votingKeyLinkTransactionDTO = (VotingKeyLinkTransactionDTO) o;
    return Objects.equals(this.size, votingKeyLinkTransactionDTO.size) &&
        Objects.equals(this.signature, votingKeyLinkTransactionDTO.signature) &&
        Objects.equals(this.signerPublicKey, votingKeyLinkTransactionDTO.signerPublicKey) &&
        Objects.equals(this.version, votingKeyLinkTransactionDTO.version) &&
        Objects.equals(this.network, votingKeyLinkTransactionDTO.network) &&
        Objects.equals(this.type, votingKeyLinkTransactionDTO.type) &&
        Objects.equals(this.maxFee, votingKeyLinkTransactionDTO.maxFee) &&
        Objects.equals(this.deadline, votingKeyLinkTransactionDTO.deadline) &&
        Objects.equals(this.linkedPublicKey, votingKeyLinkTransactionDTO.linkedPublicKey) &&
        Objects.equals(this.startEpoch, votingKeyLinkTransactionDTO.startEpoch) &&
        Objects.equals(this.endEpoch, votingKeyLinkTransactionDTO.endEpoch) &&
        Objects.equals(this.linkAction, votingKeyLinkTransactionDTO.linkAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(size, signature, signerPublicKey, version, network, type, maxFee, deadline, linkedPublicKey, startEpoch, endEpoch, linkAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VotingKeyLinkTransactionDTO {\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    signerPublicKey: ").append(toIndentedString(signerPublicKey)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    maxFee: ").append(toIndentedString(maxFee)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    linkedPublicKey: ").append(toIndentedString(linkedPublicKey)).append("\n");
    sb.append("    startEpoch: ").append(toIndentedString(startEpoch)).append("\n");
    sb.append("    endEpoch: ").append(toIndentedString(endEpoch)).append("\n");
    sb.append("    linkAction: ").append(toIndentedString(linkAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("size");
    openapiFields.add("signature");
    openapiFields.add("signerPublicKey");
    openapiFields.add("version");
    openapiFields.add("network");
    openapiFields.add("type");
    openapiFields.add("maxFee");
    openapiFields.add("deadline");
    openapiFields.add("linkedPublicKey");
    openapiFields.add("startEpoch");
    openapiFields.add("endEpoch");
    openapiFields.add("linkAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("signature");
    openapiRequiredFields.add("signerPublicKey");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("maxFee");
    openapiRequiredFields.add("deadline");
    openapiRequiredFields.add("linkedPublicKey");
    openapiRequiredFields.add("startEpoch");
    openapiRequiredFields.add("endEpoch");
    openapiRequiredFields.add("linkAction");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VotingKeyLinkTransactionDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VotingKeyLinkTransactionDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VotingKeyLinkTransactionDTO is not found in the empty JSON string", VotingKeyLinkTransactionDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VotingKeyLinkTransactionDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VotingKeyLinkTransactionDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VotingKeyLinkTransactionDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if (!jsonObj.get("signerPublicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerPublicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerPublicKey").toString()));
      }
      // validate the required field `network`
      NetworkTypeEnum.validateJsonElement(jsonObj.get("network"));
      if (!jsonObj.get("maxFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxFee").toString()));
      }
      if (!jsonObj.get("deadline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deadline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deadline").toString()));
      }
      if (!jsonObj.get("linkedPublicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedPublicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedPublicKey").toString()));
      }
      // validate the required field `linkAction`
      LinkActionEnum.validateJsonElement(jsonObj.get("linkAction"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VotingKeyLinkTransactionDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VotingKeyLinkTransactionDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VotingKeyLinkTransactionDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VotingKeyLinkTransactionDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<VotingKeyLinkTransactionDTO>() {
           @Override
           public void write(JsonWriter out, VotingKeyLinkTransactionDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VotingKeyLinkTransactionDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VotingKeyLinkTransactionDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VotingKeyLinkTransactionDTO
  * @throws IOException if the JSON string is invalid with respect to VotingKeyLinkTransactionDTO
  */
  public static VotingKeyLinkTransactionDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VotingKeyLinkTransactionDTO.class);
  }

 /**
  * Convert an instance of VotingKeyLinkTransactionDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

