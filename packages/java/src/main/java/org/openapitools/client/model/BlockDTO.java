/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NetworkTypeEnum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BlockDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class BlockDTO {
  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SIGNER_PUBLIC_KEY = "signerPublicKey";
  @SerializedName(SERIALIZED_NAME_SIGNER_PUBLIC_KEY)
  private String signerPublicKey;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkTypeEnum network;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Integer type;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private String height;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_DIFFICULTY = "difficulty";
  @SerializedName(SERIALIZED_NAME_DIFFICULTY)
  private String difficulty;

  public static final String SERIALIZED_NAME_PROOF_GAMMA = "proofGamma";
  @SerializedName(SERIALIZED_NAME_PROOF_GAMMA)
  private String proofGamma;

  public static final String SERIALIZED_NAME_PROOF_VERIFICATION_HASH = "proofVerificationHash";
  @SerializedName(SERIALIZED_NAME_PROOF_VERIFICATION_HASH)
  private String proofVerificationHash;

  public static final String SERIALIZED_NAME_PROOF_SCALAR = "proofScalar";
  @SerializedName(SERIALIZED_NAME_PROOF_SCALAR)
  private String proofScalar;

  public static final String SERIALIZED_NAME_PREVIOUS_BLOCK_HASH = "previousBlockHash";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_BLOCK_HASH)
  private String previousBlockHash;

  public static final String SERIALIZED_NAME_TRANSACTIONS_HASH = "transactionsHash";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_HASH)
  private String transactionsHash;

  public static final String SERIALIZED_NAME_RECEIPTS_HASH = "receiptsHash";
  @SerializedName(SERIALIZED_NAME_RECEIPTS_HASH)
  private String receiptsHash;

  public static final String SERIALIZED_NAME_STATE_HASH = "stateHash";
  @SerializedName(SERIALIZED_NAME_STATE_HASH)
  private String stateHash;

  public static final String SERIALIZED_NAME_BENEFICIARY_ADDRESS = "beneficiaryAddress";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_ADDRESS)
  private String beneficiaryAddress;

  public static final String SERIALIZED_NAME_FEE_MULTIPLIER = "feeMultiplier";
  @SerializedName(SERIALIZED_NAME_FEE_MULTIPLIER)
  private Long feeMultiplier;

  public BlockDTO() {
  }

  public BlockDTO size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * A number that allows uint 32 values.
   * @return size
  **/
  @javax.annotation.Nonnull
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }


  public BlockDTO signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Entity&#39;s signature generated by the signer.
   * @return signature
  **/
  @javax.annotation.Nonnull
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public BlockDTO signerPublicKey(String signerPublicKey) {
    this.signerPublicKey = signerPublicKey;
    return this;
  }

   /**
   * Public key.
   * @return signerPublicKey
  **/
  @javax.annotation.Nonnull
  public String getSignerPublicKey() {
    return signerPublicKey;
  }

  public void setSignerPublicKey(String signerPublicKey) {
    this.signerPublicKey = signerPublicKey;
  }


  public BlockDTO version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Entity version.
   * @return version
  **/
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }


  public BlockDTO network(NetworkTypeEnum network) {
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @javax.annotation.Nonnull
  public NetworkTypeEnum getNetwork() {
    return network;
  }

  public void setNetwork(NetworkTypeEnum network) {
    this.network = network;
  }


  public BlockDTO type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }


  public BlockDTO height(String height) {
    this.height = height;
    return this;
  }

   /**
   * Height of the blockchain.
   * @return height
  **/
  @javax.annotation.Nonnull
  public String getHeight() {
    return height;
  }

  public void setHeight(String height) {
    this.height = height;
  }


  public BlockDTO timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network&#39;s &#39;epochAdjustment&#39;.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public BlockDTO difficulty(String difficulty) {
    this.difficulty = difficulty;
    return this;
  }

   /**
   * Determines how hard is to harvest a new block, based on previous blocks.
   * @return difficulty
  **/
  @javax.annotation.Nonnull
  public String getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(String difficulty) {
    this.difficulty = difficulty;
  }


  public BlockDTO proofGamma(String proofGamma) {
    this.proofGamma = proofGamma;
    return this;
  }

   /**
   * 32-bytes VRF proof gamma.
   * @return proofGamma
  **/
  @javax.annotation.Nonnull
  public String getProofGamma() {
    return proofGamma;
  }

  public void setProofGamma(String proofGamma) {
    this.proofGamma = proofGamma;
  }


  public BlockDTO proofVerificationHash(String proofVerificationHash) {
    this.proofVerificationHash = proofVerificationHash;
    return this;
  }

   /**
   * 16-bytes VRF proof verification hash.
   * @return proofVerificationHash
  **/
  @javax.annotation.Nonnull
  public String getProofVerificationHash() {
    return proofVerificationHash;
  }

  public void setProofVerificationHash(String proofVerificationHash) {
    this.proofVerificationHash = proofVerificationHash;
  }


  public BlockDTO proofScalar(String proofScalar) {
    this.proofScalar = proofScalar;
    return this;
  }

   /**
   * 32-bytes VRF proof scalar.
   * @return proofScalar
  **/
  @javax.annotation.Nonnull
  public String getProofScalar() {
    return proofScalar;
  }

  public void setProofScalar(String proofScalar) {
    this.proofScalar = proofScalar;
  }


  public BlockDTO previousBlockHash(String previousBlockHash) {
    this.previousBlockHash = previousBlockHash;
    return this;
  }

   /**
   * Get previousBlockHash
   * @return previousBlockHash
  **/
  @javax.annotation.Nonnull
  public String getPreviousBlockHash() {
    return previousBlockHash;
  }

  public void setPreviousBlockHash(String previousBlockHash) {
    this.previousBlockHash = previousBlockHash;
  }


  public BlockDTO transactionsHash(String transactionsHash) {
    this.transactionsHash = transactionsHash;
    return this;
  }

   /**
   * Get transactionsHash
   * @return transactionsHash
  **/
  @javax.annotation.Nonnull
  public String getTransactionsHash() {
    return transactionsHash;
  }

  public void setTransactionsHash(String transactionsHash) {
    this.transactionsHash = transactionsHash;
  }


  public BlockDTO receiptsHash(String receiptsHash) {
    this.receiptsHash = receiptsHash;
    return this;
  }

   /**
   * Get receiptsHash
   * @return receiptsHash
  **/
  @javax.annotation.Nonnull
  public String getReceiptsHash() {
    return receiptsHash;
  }

  public void setReceiptsHash(String receiptsHash) {
    this.receiptsHash = receiptsHash;
  }


  public BlockDTO stateHash(String stateHash) {
    this.stateHash = stateHash;
    return this;
  }

   /**
   * Get stateHash
   * @return stateHash
  **/
  @javax.annotation.Nonnull
  public String getStateHash() {
    return stateHash;
  }

  public void setStateHash(String stateHash) {
    this.stateHash = stateHash;
  }


  public BlockDTO beneficiaryAddress(String beneficiaryAddress) {
    this.beneficiaryAddress = beneficiaryAddress;
    return this;
  }

   /**
   * Address encoded using a 32-character set.
   * @return beneficiaryAddress
  **/
  @javax.annotation.Nonnull
  public String getBeneficiaryAddress() {
    return beneficiaryAddress;
  }

  public void setBeneficiaryAddress(String beneficiaryAddress) {
    this.beneficiaryAddress = beneficiaryAddress;
  }


  public BlockDTO feeMultiplier(Long feeMultiplier) {
    this.feeMultiplier = feeMultiplier;
    return this;
  }

   /**
   * Fee multiplier applied to transactions contained in block.
   * @return feeMultiplier
  **/
  @javax.annotation.Nonnull
  public Long getFeeMultiplier() {
    return feeMultiplier;
  }

  public void setFeeMultiplier(Long feeMultiplier) {
    this.feeMultiplier = feeMultiplier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BlockDTO blockDTO = (BlockDTO) o;
    return Objects.equals(this.size, blockDTO.size) &&
        Objects.equals(this.signature, blockDTO.signature) &&
        Objects.equals(this.signerPublicKey, blockDTO.signerPublicKey) &&
        Objects.equals(this.version, blockDTO.version) &&
        Objects.equals(this.network, blockDTO.network) &&
        Objects.equals(this.type, blockDTO.type) &&
        Objects.equals(this.height, blockDTO.height) &&
        Objects.equals(this.timestamp, blockDTO.timestamp) &&
        Objects.equals(this.difficulty, blockDTO.difficulty) &&
        Objects.equals(this.proofGamma, blockDTO.proofGamma) &&
        Objects.equals(this.proofVerificationHash, blockDTO.proofVerificationHash) &&
        Objects.equals(this.proofScalar, blockDTO.proofScalar) &&
        Objects.equals(this.previousBlockHash, blockDTO.previousBlockHash) &&
        Objects.equals(this.transactionsHash, blockDTO.transactionsHash) &&
        Objects.equals(this.receiptsHash, blockDTO.receiptsHash) &&
        Objects.equals(this.stateHash, blockDTO.stateHash) &&
        Objects.equals(this.beneficiaryAddress, blockDTO.beneficiaryAddress) &&
        Objects.equals(this.feeMultiplier, blockDTO.feeMultiplier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(size, signature, signerPublicKey, version, network, type, height, timestamp, difficulty, proofGamma, proofVerificationHash, proofScalar, previousBlockHash, transactionsHash, receiptsHash, stateHash, beneficiaryAddress, feeMultiplier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BlockDTO {\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    signerPublicKey: ").append(toIndentedString(signerPublicKey)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    proofGamma: ").append(toIndentedString(proofGamma)).append("\n");
    sb.append("    proofVerificationHash: ").append(toIndentedString(proofVerificationHash)).append("\n");
    sb.append("    proofScalar: ").append(toIndentedString(proofScalar)).append("\n");
    sb.append("    previousBlockHash: ").append(toIndentedString(previousBlockHash)).append("\n");
    sb.append("    transactionsHash: ").append(toIndentedString(transactionsHash)).append("\n");
    sb.append("    receiptsHash: ").append(toIndentedString(receiptsHash)).append("\n");
    sb.append("    stateHash: ").append(toIndentedString(stateHash)).append("\n");
    sb.append("    beneficiaryAddress: ").append(toIndentedString(beneficiaryAddress)).append("\n");
    sb.append("    feeMultiplier: ").append(toIndentedString(feeMultiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("size");
    openapiFields.add("signature");
    openapiFields.add("signerPublicKey");
    openapiFields.add("version");
    openapiFields.add("network");
    openapiFields.add("type");
    openapiFields.add("height");
    openapiFields.add("timestamp");
    openapiFields.add("difficulty");
    openapiFields.add("proofGamma");
    openapiFields.add("proofVerificationHash");
    openapiFields.add("proofScalar");
    openapiFields.add("previousBlockHash");
    openapiFields.add("transactionsHash");
    openapiFields.add("receiptsHash");
    openapiFields.add("stateHash");
    openapiFields.add("beneficiaryAddress");
    openapiFields.add("feeMultiplier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("signature");
    openapiRequiredFields.add("signerPublicKey");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("difficulty");
    openapiRequiredFields.add("proofGamma");
    openapiRequiredFields.add("proofVerificationHash");
    openapiRequiredFields.add("proofScalar");
    openapiRequiredFields.add("previousBlockHash");
    openapiRequiredFields.add("transactionsHash");
    openapiRequiredFields.add("receiptsHash");
    openapiRequiredFields.add("stateHash");
    openapiRequiredFields.add("beneficiaryAddress");
    openapiRequiredFields.add("feeMultiplier");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BlockDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BlockDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BlockDTO is not found in the empty JSON string", BlockDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BlockDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BlockDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BlockDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if (!jsonObj.get("signerPublicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerPublicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerPublicKey").toString()));
      }
      // validate the required field `network`
      NetworkTypeEnum.validateJsonElement(jsonObj.get("network"));
      if (!jsonObj.get("height").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `height` to be a primitive type in the JSON string but got `%s`", jsonObj.get("height").toString()));
      }
      if (!jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if (!jsonObj.get("difficulty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `difficulty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("difficulty").toString()));
      }
      if (!jsonObj.get("proofGamma").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proofGamma` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proofGamma").toString()));
      }
      if (!jsonObj.get("proofVerificationHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proofVerificationHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proofVerificationHash").toString()));
      }
      if (!jsonObj.get("proofScalar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proofScalar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proofScalar").toString()));
      }
      if (!jsonObj.get("previousBlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousBlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousBlockHash").toString()));
      }
      if (!jsonObj.get("transactionsHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionsHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionsHash").toString()));
      }
      if (!jsonObj.get("receiptsHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiptsHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiptsHash").toString()));
      }
      if (!jsonObj.get("stateHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateHash").toString()));
      }
      if (!jsonObj.get("beneficiaryAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BlockDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BlockDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BlockDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BlockDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<BlockDTO>() {
           @Override
           public void write(JsonWriter out, BlockDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BlockDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BlockDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BlockDTO
  * @throws IOException if the JSON string is invalid with respect to BlockDTO
  */
  public static BlockDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BlockDTO.class);
  }

 /**
  * Convert an instance of BlockDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

