/*
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Chain related configuration properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-02T22:49:20.273938+09:00[Asia/Tokyo]")
public class ChainPropertiesDTO {
  public static final String SERIALIZED_NAME_ENABLE_VERIFIABLE_STATE = "enableVerifiableState";
  @SerializedName(SERIALIZED_NAME_ENABLE_VERIFIABLE_STATE)
  private Boolean enableVerifiableState;

  public static final String SERIALIZED_NAME_ENABLE_VERIFIABLE_RECEIPTS = "enableVerifiableReceipts";
  @SerializedName(SERIALIZED_NAME_ENABLE_VERIFIABLE_RECEIPTS)
  private Boolean enableVerifiableReceipts;

  public static final String SERIALIZED_NAME_CURRENCY_MOSAIC_ID = "currencyMosaicId";
  @SerializedName(SERIALIZED_NAME_CURRENCY_MOSAIC_ID)
  private String currencyMosaicId;

  public static final String SERIALIZED_NAME_HARVESTING_MOSAIC_ID = "harvestingMosaicId";
  @SerializedName(SERIALIZED_NAME_HARVESTING_MOSAIC_ID)
  private String harvestingMosaicId;

  public static final String SERIALIZED_NAME_BLOCK_GENERATION_TARGET_TIME = "blockGenerationTargetTime";
  @SerializedName(SERIALIZED_NAME_BLOCK_GENERATION_TARGET_TIME)
  private String blockGenerationTargetTime;

  public static final String SERIALIZED_NAME_BLOCK_TIME_SMOOTHING_FACTOR = "blockTimeSmoothingFactor";
  @SerializedName(SERIALIZED_NAME_BLOCK_TIME_SMOOTHING_FACTOR)
  private String blockTimeSmoothingFactor;

  public static final String SERIALIZED_NAME_BLOCK_FINALIZATION_INTERVAL = "blockFinalizationInterval";
  @SerializedName(SERIALIZED_NAME_BLOCK_FINALIZATION_INTERVAL)
  private String blockFinalizationInterval;

  public static final String SERIALIZED_NAME_IMPORTANCE_GROUPING = "importanceGrouping";
  @SerializedName(SERIALIZED_NAME_IMPORTANCE_GROUPING)
  private String importanceGrouping;

  public static final String SERIALIZED_NAME_IMPORTANCE_ACTIVITY_PERCENTAGE = "importanceActivityPercentage";
  @SerializedName(SERIALIZED_NAME_IMPORTANCE_ACTIVITY_PERCENTAGE)
  private String importanceActivityPercentage;

  public static final String SERIALIZED_NAME_MAX_ROLLBACK_BLOCKS = "maxRollbackBlocks";
  @SerializedName(SERIALIZED_NAME_MAX_ROLLBACK_BLOCKS)
  private String maxRollbackBlocks;

  public static final String SERIALIZED_NAME_MAX_DIFFICULTY_BLOCKS = "maxDifficultyBlocks";
  @SerializedName(SERIALIZED_NAME_MAX_DIFFICULTY_BLOCKS)
  private String maxDifficultyBlocks;

  public static final String SERIALIZED_NAME_DEFAULT_DYNAMIC_FEE_MULTIPLIER = "defaultDynamicFeeMultiplier";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DYNAMIC_FEE_MULTIPLIER)
  private String defaultDynamicFeeMultiplier;

  public static final String SERIALIZED_NAME_MAX_TRANSACTION_LIFETIME = "maxTransactionLifetime";
  @SerializedName(SERIALIZED_NAME_MAX_TRANSACTION_LIFETIME)
  private String maxTransactionLifetime;

  public static final String SERIALIZED_NAME_MAX_BLOCK_FUTURE_TIME = "maxBlockFutureTime";
  @SerializedName(SERIALIZED_NAME_MAX_BLOCK_FUTURE_TIME)
  private String maxBlockFutureTime;

  public static final String SERIALIZED_NAME_INITIAL_CURRENCY_ATOMIC_UNITS = "initialCurrencyAtomicUnits";
  @SerializedName(SERIALIZED_NAME_INITIAL_CURRENCY_ATOMIC_UNITS)
  private String initialCurrencyAtomicUnits;

  public static final String SERIALIZED_NAME_MAX_MOSAIC_ATOMIC_UNITS = "maxMosaicAtomicUnits";
  @SerializedName(SERIALIZED_NAME_MAX_MOSAIC_ATOMIC_UNITS)
  private String maxMosaicAtomicUnits;

  public static final String SERIALIZED_NAME_TOTAL_CHAIN_IMPORTANCE = "totalChainImportance";
  @SerializedName(SERIALIZED_NAME_TOTAL_CHAIN_IMPORTANCE)
  private String totalChainImportance;

  public static final String SERIALIZED_NAME_MIN_HARVESTER_BALANCE = "minHarvesterBalance";
  @SerializedName(SERIALIZED_NAME_MIN_HARVESTER_BALANCE)
  private String minHarvesterBalance;

  public static final String SERIALIZED_NAME_MAX_HARVESTER_BALANCE = "maxHarvesterBalance";
  @SerializedName(SERIALIZED_NAME_MAX_HARVESTER_BALANCE)
  private String maxHarvesterBalance;

  public static final String SERIALIZED_NAME_MIN_VOTER_BALANCE = "minVoterBalance";
  @SerializedName(SERIALIZED_NAME_MIN_VOTER_BALANCE)
  private String minVoterBalance;

  public static final String SERIALIZED_NAME_MAX_VOTING_KEYS_PER_ACCOUNT = "maxVotingKeysPerAccount";
  @SerializedName(SERIALIZED_NAME_MAX_VOTING_KEYS_PER_ACCOUNT)
  private String maxVotingKeysPerAccount;

  public static final String SERIALIZED_NAME_MIN_VOTING_KEY_LIFETIME = "minVotingKeyLifetime";
  @SerializedName(SERIALIZED_NAME_MIN_VOTING_KEY_LIFETIME)
  private String minVotingKeyLifetime;

  public static final String SERIALIZED_NAME_MAX_VOTING_KEY_LIFETIME = "maxVotingKeyLifetime";
  @SerializedName(SERIALIZED_NAME_MAX_VOTING_KEY_LIFETIME)
  private String maxVotingKeyLifetime;

  public static final String SERIALIZED_NAME_HARVEST_BENEFICIARY_PERCENTAGE = "harvestBeneficiaryPercentage";
  @SerializedName(SERIALIZED_NAME_HARVEST_BENEFICIARY_PERCENTAGE)
  private String harvestBeneficiaryPercentage;

  public static final String SERIALIZED_NAME_HARVEST_NETWORK_PERCENTAGE = "harvestNetworkPercentage";
  @SerializedName(SERIALIZED_NAME_HARVEST_NETWORK_PERCENTAGE)
  private String harvestNetworkPercentage;

  public static final String SERIALIZED_NAME_HARVEST_NETWORK_FEE_SINK_ADDRESS = "harvestNetworkFeeSinkAddress";
  @SerializedName(SERIALIZED_NAME_HARVEST_NETWORK_FEE_SINK_ADDRESS)
  private String harvestNetworkFeeSinkAddress;

  public static final String SERIALIZED_NAME_BLOCK_PRUNE_INTERVAL = "blockPruneInterval";
  @SerializedName(SERIALIZED_NAME_BLOCK_PRUNE_INTERVAL)
  private String blockPruneInterval;

  public static final String SERIALIZED_NAME_MAX_TRANSACTIONS_PER_BLOCK = "maxTransactionsPerBlock";
  @SerializedName(SERIALIZED_NAME_MAX_TRANSACTIONS_PER_BLOCK)
  private String maxTransactionsPerBlock;

  public ChainPropertiesDTO() {
  }

  public ChainPropertiesDTO enableVerifiableState(Boolean enableVerifiableState) {
    this.enableVerifiableState = enableVerifiableState;
    return this;
  }

   /**
   * Set to true if block chain should calculate state hashes so that state is fully verifiable at each block.
   * @return enableVerifiableState
  **/
  @javax.annotation.Nullable
  public Boolean getEnableVerifiableState() {
    return enableVerifiableState;
  }

  public void setEnableVerifiableState(Boolean enableVerifiableState) {
    this.enableVerifiableState = enableVerifiableState;
  }


  public ChainPropertiesDTO enableVerifiableReceipts(Boolean enableVerifiableReceipts) {
    this.enableVerifiableReceipts = enableVerifiableReceipts;
    return this;
  }

   /**
   * Set to true if block chain should calculate receipts so that state changes are fully verifiable at each block.
   * @return enableVerifiableReceipts
  **/
  @javax.annotation.Nullable
  public Boolean getEnableVerifiableReceipts() {
    return enableVerifiableReceipts;
  }

  public void setEnableVerifiableReceipts(Boolean enableVerifiableReceipts) {
    this.enableVerifiableReceipts = enableVerifiableReceipts;
  }


  public ChainPropertiesDTO currencyMosaicId(String currencyMosaicId) {
    this.currencyMosaicId = currencyMosaicId;
    return this;
  }

   /**
   * Mosaic id used as primary chain currency.
   * @return currencyMosaicId
  **/
  @javax.annotation.Nullable
  public String getCurrencyMosaicId() {
    return currencyMosaicId;
  }

  public void setCurrencyMosaicId(String currencyMosaicId) {
    this.currencyMosaicId = currencyMosaicId;
  }


  public ChainPropertiesDTO harvestingMosaicId(String harvestingMosaicId) {
    this.harvestingMosaicId = harvestingMosaicId;
    return this;
  }

   /**
   * Mosaic id used to provide harvesting ability.
   * @return harvestingMosaicId
  **/
  @javax.annotation.Nullable
  public String getHarvestingMosaicId() {
    return harvestingMosaicId;
  }

  public void setHarvestingMosaicId(String harvestingMosaicId) {
    this.harvestingMosaicId = harvestingMosaicId;
  }


  public ChainPropertiesDTO blockGenerationTargetTime(String blockGenerationTargetTime) {
    this.blockGenerationTargetTime = blockGenerationTargetTime;
    return this;
  }

   /**
   * Targeted time between blocks.
   * @return blockGenerationTargetTime
  **/
  @javax.annotation.Nullable
  public String getBlockGenerationTargetTime() {
    return blockGenerationTargetTime;
  }

  public void setBlockGenerationTargetTime(String blockGenerationTargetTime) {
    this.blockGenerationTargetTime = blockGenerationTargetTime;
  }


  public ChainPropertiesDTO blockTimeSmoothingFactor(String blockTimeSmoothingFactor) {
    this.blockTimeSmoothingFactor = blockTimeSmoothingFactor;
    return this;
  }

   /**
   * A higher value makes the network more biased.
   * @return blockTimeSmoothingFactor
  **/
  @javax.annotation.Nullable
  public String getBlockTimeSmoothingFactor() {
    return blockTimeSmoothingFactor;
  }

  public void setBlockTimeSmoothingFactor(String blockTimeSmoothingFactor) {
    this.blockTimeSmoothingFactor = blockTimeSmoothingFactor;
  }


  public ChainPropertiesDTO blockFinalizationInterval(String blockFinalizationInterval) {
    this.blockFinalizationInterval = blockFinalizationInterval;
    return this;
  }

   /**
   * Number of blocks between successive finalization attempts.
   * @return blockFinalizationInterval
  **/
  @javax.annotation.Nullable
  public String getBlockFinalizationInterval() {
    return blockFinalizationInterval;
  }

  public void setBlockFinalizationInterval(String blockFinalizationInterval) {
    this.blockFinalizationInterval = blockFinalizationInterval;
  }


  public ChainPropertiesDTO importanceGrouping(String importanceGrouping) {
    this.importanceGrouping = importanceGrouping;
    return this;
  }

   /**
   * Number of blocks that should be treated as a group for importance purposes.
   * @return importanceGrouping
  **/
  @javax.annotation.Nullable
  public String getImportanceGrouping() {
    return importanceGrouping;
  }

  public void setImportanceGrouping(String importanceGrouping) {
    this.importanceGrouping = importanceGrouping;
  }


  public ChainPropertiesDTO importanceActivityPercentage(String importanceActivityPercentage) {
    this.importanceActivityPercentage = importanceActivityPercentage;
    return this;
  }

   /**
   * Percentage of importance resulting from fee generation and beneficiary usage.
   * @return importanceActivityPercentage
  **/
  @javax.annotation.Nullable
  public String getImportanceActivityPercentage() {
    return importanceActivityPercentage;
  }

  public void setImportanceActivityPercentage(String importanceActivityPercentage) {
    this.importanceActivityPercentage = importanceActivityPercentage;
  }


  public ChainPropertiesDTO maxRollbackBlocks(String maxRollbackBlocks) {
    this.maxRollbackBlocks = maxRollbackBlocks;
    return this;
  }

   /**
   * Maximum number of blocks that can be rolled back.
   * @return maxRollbackBlocks
  **/
  @javax.annotation.Nullable
  public String getMaxRollbackBlocks() {
    return maxRollbackBlocks;
  }

  public void setMaxRollbackBlocks(String maxRollbackBlocks) {
    this.maxRollbackBlocks = maxRollbackBlocks;
  }


  public ChainPropertiesDTO maxDifficultyBlocks(String maxDifficultyBlocks) {
    this.maxDifficultyBlocks = maxDifficultyBlocks;
    return this;
  }

   /**
   * Maximum number of blocks to use in a difficulty calculation.
   * @return maxDifficultyBlocks
  **/
  @javax.annotation.Nullable
  public String getMaxDifficultyBlocks() {
    return maxDifficultyBlocks;
  }

  public void setMaxDifficultyBlocks(String maxDifficultyBlocks) {
    this.maxDifficultyBlocks = maxDifficultyBlocks;
  }


  public ChainPropertiesDTO defaultDynamicFeeMultiplier(String defaultDynamicFeeMultiplier) {
    this.defaultDynamicFeeMultiplier = defaultDynamicFeeMultiplier;
    return this;
  }

   /**
   * Default multiplier to use for dynamic fees.
   * @return defaultDynamicFeeMultiplier
  **/
  @javax.annotation.Nullable
  public String getDefaultDynamicFeeMultiplier() {
    return defaultDynamicFeeMultiplier;
  }

  public void setDefaultDynamicFeeMultiplier(String defaultDynamicFeeMultiplier) {
    this.defaultDynamicFeeMultiplier = defaultDynamicFeeMultiplier;
  }


  public ChainPropertiesDTO maxTransactionLifetime(String maxTransactionLifetime) {
    this.maxTransactionLifetime = maxTransactionLifetime;
    return this;
  }

   /**
   * Maximum lifetime a transaction can have before it expires.
   * @return maxTransactionLifetime
  **/
  @javax.annotation.Nullable
  public String getMaxTransactionLifetime() {
    return maxTransactionLifetime;
  }

  public void setMaxTransactionLifetime(String maxTransactionLifetime) {
    this.maxTransactionLifetime = maxTransactionLifetime;
  }


  public ChainPropertiesDTO maxBlockFutureTime(String maxBlockFutureTime) {
    this.maxBlockFutureTime = maxBlockFutureTime;
    return this;
  }

   /**
   * Maximum future time of a block that can be accepted.
   * @return maxBlockFutureTime
  **/
  @javax.annotation.Nullable
  public String getMaxBlockFutureTime() {
    return maxBlockFutureTime;
  }

  public void setMaxBlockFutureTime(String maxBlockFutureTime) {
    this.maxBlockFutureTime = maxBlockFutureTime;
  }


  public ChainPropertiesDTO initialCurrencyAtomicUnits(String initialCurrencyAtomicUnits) {
    this.initialCurrencyAtomicUnits = initialCurrencyAtomicUnits;
    return this;
  }

   /**
   * Initial currency atomic units available in the network.
   * @return initialCurrencyAtomicUnits
  **/
  @javax.annotation.Nullable
  public String getInitialCurrencyAtomicUnits() {
    return initialCurrencyAtomicUnits;
  }

  public void setInitialCurrencyAtomicUnits(String initialCurrencyAtomicUnits) {
    this.initialCurrencyAtomicUnits = initialCurrencyAtomicUnits;
  }


  public ChainPropertiesDTO maxMosaicAtomicUnits(String maxMosaicAtomicUnits) {
    this.maxMosaicAtomicUnits = maxMosaicAtomicUnits;
    return this;
  }

   /**
   * Maximum atomic units (total-supply * 10 ^ divisibility) of a mosaic allowed in the network.
   * @return maxMosaicAtomicUnits
  **/
  @javax.annotation.Nullable
  public String getMaxMosaicAtomicUnits() {
    return maxMosaicAtomicUnits;
  }

  public void setMaxMosaicAtomicUnits(String maxMosaicAtomicUnits) {
    this.maxMosaicAtomicUnits = maxMosaicAtomicUnits;
  }


  public ChainPropertiesDTO totalChainImportance(String totalChainImportance) {
    this.totalChainImportance = totalChainImportance;
    return this;
  }

   /**
   * Total whole importance units available in the network.
   * @return totalChainImportance
  **/
  @javax.annotation.Nullable
  public String getTotalChainImportance() {
    return totalChainImportance;
  }

  public void setTotalChainImportance(String totalChainImportance) {
    this.totalChainImportance = totalChainImportance;
  }


  public ChainPropertiesDTO minHarvesterBalance(String minHarvesterBalance) {
    this.minHarvesterBalance = minHarvesterBalance;
    return this;
  }

   /**
   * Minimum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
   * @return minHarvesterBalance
  **/
  @javax.annotation.Nullable
  public String getMinHarvesterBalance() {
    return minHarvesterBalance;
  }

  public void setMinHarvesterBalance(String minHarvesterBalance) {
    this.minHarvesterBalance = minHarvesterBalance;
  }


  public ChainPropertiesDTO maxHarvesterBalance(String maxHarvesterBalance) {
    this.maxHarvesterBalance = maxHarvesterBalance;
    return this;
  }

   /**
   * Maximum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
   * @return maxHarvesterBalance
  **/
  @javax.annotation.Nullable
  public String getMaxHarvesterBalance() {
    return maxHarvesterBalance;
  }

  public void setMaxHarvesterBalance(String maxHarvesterBalance) {
    this.maxHarvesterBalance = maxHarvesterBalance;
  }


  public ChainPropertiesDTO minVoterBalance(String minVoterBalance) {
    this.minVoterBalance = minVoterBalance;
    return this;
  }

   /**
   * Minimum number of harvesting mosaic atomic units needed for an account to be eligible for voting.
   * @return minVoterBalance
  **/
  @javax.annotation.Nullable
  public String getMinVoterBalance() {
    return minVoterBalance;
  }

  public void setMinVoterBalance(String minVoterBalance) {
    this.minVoterBalance = minVoterBalance;
  }


  public ChainPropertiesDTO maxVotingKeysPerAccount(String maxVotingKeysPerAccount) {
    this.maxVotingKeysPerAccount = maxVotingKeysPerAccount;
    return this;
  }

   /**
   * Maximum number of voting keys that can be registered at once per account.
   * @return maxVotingKeysPerAccount
  **/
  @javax.annotation.Nullable
  public String getMaxVotingKeysPerAccount() {
    return maxVotingKeysPerAccount;
  }

  public void setMaxVotingKeysPerAccount(String maxVotingKeysPerAccount) {
    this.maxVotingKeysPerAccount = maxVotingKeysPerAccount;
  }


  public ChainPropertiesDTO minVotingKeyLifetime(String minVotingKeyLifetime) {
    this.minVotingKeyLifetime = minVotingKeyLifetime;
    return this;
  }

   /**
   * Minimum number of finalization rounds for which voting key can be registered.
   * @return minVotingKeyLifetime
  **/
  @javax.annotation.Nullable
  public String getMinVotingKeyLifetime() {
    return minVotingKeyLifetime;
  }

  public void setMinVotingKeyLifetime(String minVotingKeyLifetime) {
    this.minVotingKeyLifetime = minVotingKeyLifetime;
  }


  public ChainPropertiesDTO maxVotingKeyLifetime(String maxVotingKeyLifetime) {
    this.maxVotingKeyLifetime = maxVotingKeyLifetime;
    return this;
  }

   /**
   * Maximum number of finalization rounds for which voting key can be registered.
   * @return maxVotingKeyLifetime
  **/
  @javax.annotation.Nullable
  public String getMaxVotingKeyLifetime() {
    return maxVotingKeyLifetime;
  }

  public void setMaxVotingKeyLifetime(String maxVotingKeyLifetime) {
    this.maxVotingKeyLifetime = maxVotingKeyLifetime;
  }


  public ChainPropertiesDTO harvestBeneficiaryPercentage(String harvestBeneficiaryPercentage) {
    this.harvestBeneficiaryPercentage = harvestBeneficiaryPercentage;
    return this;
  }

   /**
   * Percentage of the harvested fee that is collected by the beneficiary account.
   * @return harvestBeneficiaryPercentage
  **/
  @javax.annotation.Nullable
  public String getHarvestBeneficiaryPercentage() {
    return harvestBeneficiaryPercentage;
  }

  public void setHarvestBeneficiaryPercentage(String harvestBeneficiaryPercentage) {
    this.harvestBeneficiaryPercentage = harvestBeneficiaryPercentage;
  }


  public ChainPropertiesDTO harvestNetworkPercentage(String harvestNetworkPercentage) {
    this.harvestNetworkPercentage = harvestNetworkPercentage;
    return this;
  }

   /**
   * Percentage of the harvested fee that is collected by the network.
   * @return harvestNetworkPercentage
  **/
  @javax.annotation.Nullable
  public String getHarvestNetworkPercentage() {
    return harvestNetworkPercentage;
  }

  public void setHarvestNetworkPercentage(String harvestNetworkPercentage) {
    this.harvestNetworkPercentage = harvestNetworkPercentage;
  }


  public ChainPropertiesDTO harvestNetworkFeeSinkAddress(String harvestNetworkFeeSinkAddress) {
    this.harvestNetworkFeeSinkAddress = harvestNetworkFeeSinkAddress;
    return this;
  }

   /**
   * Address encoded using a 32-character set.
   * @return harvestNetworkFeeSinkAddress
  **/
  @javax.annotation.Nullable
  public String getHarvestNetworkFeeSinkAddress() {
    return harvestNetworkFeeSinkAddress;
  }

  public void setHarvestNetworkFeeSinkAddress(String harvestNetworkFeeSinkAddress) {
    this.harvestNetworkFeeSinkAddress = harvestNetworkFeeSinkAddress;
  }


  public ChainPropertiesDTO blockPruneInterval(String blockPruneInterval) {
    this.blockPruneInterval = blockPruneInterval;
    return this;
  }

   /**
   * Number of blocks between cache pruning.
   * @return blockPruneInterval
  **/
  @javax.annotation.Nullable
  public String getBlockPruneInterval() {
    return blockPruneInterval;
  }

  public void setBlockPruneInterval(String blockPruneInterval) {
    this.blockPruneInterval = blockPruneInterval;
  }


  public ChainPropertiesDTO maxTransactionsPerBlock(String maxTransactionsPerBlock) {
    this.maxTransactionsPerBlock = maxTransactionsPerBlock;
    return this;
  }

   /**
   * Maximum number of transactions per block.
   * @return maxTransactionsPerBlock
  **/
  @javax.annotation.Nullable
  public String getMaxTransactionsPerBlock() {
    return maxTransactionsPerBlock;
  }

  public void setMaxTransactionsPerBlock(String maxTransactionsPerBlock) {
    this.maxTransactionsPerBlock = maxTransactionsPerBlock;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChainPropertiesDTO chainPropertiesDTO = (ChainPropertiesDTO) o;
    return Objects.equals(this.enableVerifiableState, chainPropertiesDTO.enableVerifiableState) &&
        Objects.equals(this.enableVerifiableReceipts, chainPropertiesDTO.enableVerifiableReceipts) &&
        Objects.equals(this.currencyMosaicId, chainPropertiesDTO.currencyMosaicId) &&
        Objects.equals(this.harvestingMosaicId, chainPropertiesDTO.harvestingMosaicId) &&
        Objects.equals(this.blockGenerationTargetTime, chainPropertiesDTO.blockGenerationTargetTime) &&
        Objects.equals(this.blockTimeSmoothingFactor, chainPropertiesDTO.blockTimeSmoothingFactor) &&
        Objects.equals(this.blockFinalizationInterval, chainPropertiesDTO.blockFinalizationInterval) &&
        Objects.equals(this.importanceGrouping, chainPropertiesDTO.importanceGrouping) &&
        Objects.equals(this.importanceActivityPercentage, chainPropertiesDTO.importanceActivityPercentage) &&
        Objects.equals(this.maxRollbackBlocks, chainPropertiesDTO.maxRollbackBlocks) &&
        Objects.equals(this.maxDifficultyBlocks, chainPropertiesDTO.maxDifficultyBlocks) &&
        Objects.equals(this.defaultDynamicFeeMultiplier, chainPropertiesDTO.defaultDynamicFeeMultiplier) &&
        Objects.equals(this.maxTransactionLifetime, chainPropertiesDTO.maxTransactionLifetime) &&
        Objects.equals(this.maxBlockFutureTime, chainPropertiesDTO.maxBlockFutureTime) &&
        Objects.equals(this.initialCurrencyAtomicUnits, chainPropertiesDTO.initialCurrencyAtomicUnits) &&
        Objects.equals(this.maxMosaicAtomicUnits, chainPropertiesDTO.maxMosaicAtomicUnits) &&
        Objects.equals(this.totalChainImportance, chainPropertiesDTO.totalChainImportance) &&
        Objects.equals(this.minHarvesterBalance, chainPropertiesDTO.minHarvesterBalance) &&
        Objects.equals(this.maxHarvesterBalance, chainPropertiesDTO.maxHarvesterBalance) &&
        Objects.equals(this.minVoterBalance, chainPropertiesDTO.minVoterBalance) &&
        Objects.equals(this.maxVotingKeysPerAccount, chainPropertiesDTO.maxVotingKeysPerAccount) &&
        Objects.equals(this.minVotingKeyLifetime, chainPropertiesDTO.minVotingKeyLifetime) &&
        Objects.equals(this.maxVotingKeyLifetime, chainPropertiesDTO.maxVotingKeyLifetime) &&
        Objects.equals(this.harvestBeneficiaryPercentage, chainPropertiesDTO.harvestBeneficiaryPercentage) &&
        Objects.equals(this.harvestNetworkPercentage, chainPropertiesDTO.harvestNetworkPercentage) &&
        Objects.equals(this.harvestNetworkFeeSinkAddress, chainPropertiesDTO.harvestNetworkFeeSinkAddress) &&
        Objects.equals(this.blockPruneInterval, chainPropertiesDTO.blockPruneInterval) &&
        Objects.equals(this.maxTransactionsPerBlock, chainPropertiesDTO.maxTransactionsPerBlock);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableVerifiableState, enableVerifiableReceipts, currencyMosaicId, harvestingMosaicId, blockGenerationTargetTime, blockTimeSmoothingFactor, blockFinalizationInterval, importanceGrouping, importanceActivityPercentage, maxRollbackBlocks, maxDifficultyBlocks, defaultDynamicFeeMultiplier, maxTransactionLifetime, maxBlockFutureTime, initialCurrencyAtomicUnits, maxMosaicAtomicUnits, totalChainImportance, minHarvesterBalance, maxHarvesterBalance, minVoterBalance, maxVotingKeysPerAccount, minVotingKeyLifetime, maxVotingKeyLifetime, harvestBeneficiaryPercentage, harvestNetworkPercentage, harvestNetworkFeeSinkAddress, blockPruneInterval, maxTransactionsPerBlock);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChainPropertiesDTO {\n");
    sb.append("    enableVerifiableState: ").append(toIndentedString(enableVerifiableState)).append("\n");
    sb.append("    enableVerifiableReceipts: ").append(toIndentedString(enableVerifiableReceipts)).append("\n");
    sb.append("    currencyMosaicId: ").append(toIndentedString(currencyMosaicId)).append("\n");
    sb.append("    harvestingMosaicId: ").append(toIndentedString(harvestingMosaicId)).append("\n");
    sb.append("    blockGenerationTargetTime: ").append(toIndentedString(blockGenerationTargetTime)).append("\n");
    sb.append("    blockTimeSmoothingFactor: ").append(toIndentedString(blockTimeSmoothingFactor)).append("\n");
    sb.append("    blockFinalizationInterval: ").append(toIndentedString(blockFinalizationInterval)).append("\n");
    sb.append("    importanceGrouping: ").append(toIndentedString(importanceGrouping)).append("\n");
    sb.append("    importanceActivityPercentage: ").append(toIndentedString(importanceActivityPercentage)).append("\n");
    sb.append("    maxRollbackBlocks: ").append(toIndentedString(maxRollbackBlocks)).append("\n");
    sb.append("    maxDifficultyBlocks: ").append(toIndentedString(maxDifficultyBlocks)).append("\n");
    sb.append("    defaultDynamicFeeMultiplier: ").append(toIndentedString(defaultDynamicFeeMultiplier)).append("\n");
    sb.append("    maxTransactionLifetime: ").append(toIndentedString(maxTransactionLifetime)).append("\n");
    sb.append("    maxBlockFutureTime: ").append(toIndentedString(maxBlockFutureTime)).append("\n");
    sb.append("    initialCurrencyAtomicUnits: ").append(toIndentedString(initialCurrencyAtomicUnits)).append("\n");
    sb.append("    maxMosaicAtomicUnits: ").append(toIndentedString(maxMosaicAtomicUnits)).append("\n");
    sb.append("    totalChainImportance: ").append(toIndentedString(totalChainImportance)).append("\n");
    sb.append("    minHarvesterBalance: ").append(toIndentedString(minHarvesterBalance)).append("\n");
    sb.append("    maxHarvesterBalance: ").append(toIndentedString(maxHarvesterBalance)).append("\n");
    sb.append("    minVoterBalance: ").append(toIndentedString(minVoterBalance)).append("\n");
    sb.append("    maxVotingKeysPerAccount: ").append(toIndentedString(maxVotingKeysPerAccount)).append("\n");
    sb.append("    minVotingKeyLifetime: ").append(toIndentedString(minVotingKeyLifetime)).append("\n");
    sb.append("    maxVotingKeyLifetime: ").append(toIndentedString(maxVotingKeyLifetime)).append("\n");
    sb.append("    harvestBeneficiaryPercentage: ").append(toIndentedString(harvestBeneficiaryPercentage)).append("\n");
    sb.append("    harvestNetworkPercentage: ").append(toIndentedString(harvestNetworkPercentage)).append("\n");
    sb.append("    harvestNetworkFeeSinkAddress: ").append(toIndentedString(harvestNetworkFeeSinkAddress)).append("\n");
    sb.append("    blockPruneInterval: ").append(toIndentedString(blockPruneInterval)).append("\n");
    sb.append("    maxTransactionsPerBlock: ").append(toIndentedString(maxTransactionsPerBlock)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableVerifiableState");
    openapiFields.add("enableVerifiableReceipts");
    openapiFields.add("currencyMosaicId");
    openapiFields.add("harvestingMosaicId");
    openapiFields.add("blockGenerationTargetTime");
    openapiFields.add("blockTimeSmoothingFactor");
    openapiFields.add("blockFinalizationInterval");
    openapiFields.add("importanceGrouping");
    openapiFields.add("importanceActivityPercentage");
    openapiFields.add("maxRollbackBlocks");
    openapiFields.add("maxDifficultyBlocks");
    openapiFields.add("defaultDynamicFeeMultiplier");
    openapiFields.add("maxTransactionLifetime");
    openapiFields.add("maxBlockFutureTime");
    openapiFields.add("initialCurrencyAtomicUnits");
    openapiFields.add("maxMosaicAtomicUnits");
    openapiFields.add("totalChainImportance");
    openapiFields.add("minHarvesterBalance");
    openapiFields.add("maxHarvesterBalance");
    openapiFields.add("minVoterBalance");
    openapiFields.add("maxVotingKeysPerAccount");
    openapiFields.add("minVotingKeyLifetime");
    openapiFields.add("maxVotingKeyLifetime");
    openapiFields.add("harvestBeneficiaryPercentage");
    openapiFields.add("harvestNetworkPercentage");
    openapiFields.add("harvestNetworkFeeSinkAddress");
    openapiFields.add("blockPruneInterval");
    openapiFields.add("maxTransactionsPerBlock");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ChainPropertiesDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChainPropertiesDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChainPropertiesDTO is not found in the empty JSON string", ChainPropertiesDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChainPropertiesDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChainPropertiesDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currencyMosaicId") != null && !jsonObj.get("currencyMosaicId").isJsonNull()) && !jsonObj.get("currencyMosaicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyMosaicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyMosaicId").toString()));
      }
      if ((jsonObj.get("harvestingMosaicId") != null && !jsonObj.get("harvestingMosaicId").isJsonNull()) && !jsonObj.get("harvestingMosaicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `harvestingMosaicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("harvestingMosaicId").toString()));
      }
      if ((jsonObj.get("blockGenerationTargetTime") != null && !jsonObj.get("blockGenerationTargetTime").isJsonNull()) && !jsonObj.get("blockGenerationTargetTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockGenerationTargetTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockGenerationTargetTime").toString()));
      }
      if ((jsonObj.get("blockTimeSmoothingFactor") != null && !jsonObj.get("blockTimeSmoothingFactor").isJsonNull()) && !jsonObj.get("blockTimeSmoothingFactor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockTimeSmoothingFactor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockTimeSmoothingFactor").toString()));
      }
      if ((jsonObj.get("blockFinalizationInterval") != null && !jsonObj.get("blockFinalizationInterval").isJsonNull()) && !jsonObj.get("blockFinalizationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockFinalizationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockFinalizationInterval").toString()));
      }
      if ((jsonObj.get("importanceGrouping") != null && !jsonObj.get("importanceGrouping").isJsonNull()) && !jsonObj.get("importanceGrouping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importanceGrouping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importanceGrouping").toString()));
      }
      if ((jsonObj.get("importanceActivityPercentage") != null && !jsonObj.get("importanceActivityPercentage").isJsonNull()) && !jsonObj.get("importanceActivityPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importanceActivityPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importanceActivityPercentage").toString()));
      }
      if ((jsonObj.get("maxRollbackBlocks") != null && !jsonObj.get("maxRollbackBlocks").isJsonNull()) && !jsonObj.get("maxRollbackBlocks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxRollbackBlocks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxRollbackBlocks").toString()));
      }
      if ((jsonObj.get("maxDifficultyBlocks") != null && !jsonObj.get("maxDifficultyBlocks").isJsonNull()) && !jsonObj.get("maxDifficultyBlocks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxDifficultyBlocks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxDifficultyBlocks").toString()));
      }
      if ((jsonObj.get("defaultDynamicFeeMultiplier") != null && !jsonObj.get("defaultDynamicFeeMultiplier").isJsonNull()) && !jsonObj.get("defaultDynamicFeeMultiplier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultDynamicFeeMultiplier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultDynamicFeeMultiplier").toString()));
      }
      if ((jsonObj.get("maxTransactionLifetime") != null && !jsonObj.get("maxTransactionLifetime").isJsonNull()) && !jsonObj.get("maxTransactionLifetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxTransactionLifetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxTransactionLifetime").toString()));
      }
      if ((jsonObj.get("maxBlockFutureTime") != null && !jsonObj.get("maxBlockFutureTime").isJsonNull()) && !jsonObj.get("maxBlockFutureTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxBlockFutureTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxBlockFutureTime").toString()));
      }
      if ((jsonObj.get("initialCurrencyAtomicUnits") != null && !jsonObj.get("initialCurrencyAtomicUnits").isJsonNull()) && !jsonObj.get("initialCurrencyAtomicUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialCurrencyAtomicUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialCurrencyAtomicUnits").toString()));
      }
      if ((jsonObj.get("maxMosaicAtomicUnits") != null && !jsonObj.get("maxMosaicAtomicUnits").isJsonNull()) && !jsonObj.get("maxMosaicAtomicUnits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxMosaicAtomicUnits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxMosaicAtomicUnits").toString()));
      }
      if ((jsonObj.get("totalChainImportance") != null && !jsonObj.get("totalChainImportance").isJsonNull()) && !jsonObj.get("totalChainImportance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalChainImportance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalChainImportance").toString()));
      }
      if ((jsonObj.get("minHarvesterBalance") != null && !jsonObj.get("minHarvesterBalance").isJsonNull()) && !jsonObj.get("minHarvesterBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minHarvesterBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minHarvesterBalance").toString()));
      }
      if ((jsonObj.get("maxHarvesterBalance") != null && !jsonObj.get("maxHarvesterBalance").isJsonNull()) && !jsonObj.get("maxHarvesterBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxHarvesterBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxHarvesterBalance").toString()));
      }
      if ((jsonObj.get("minVoterBalance") != null && !jsonObj.get("minVoterBalance").isJsonNull()) && !jsonObj.get("minVoterBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minVoterBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minVoterBalance").toString()));
      }
      if ((jsonObj.get("maxVotingKeysPerAccount") != null && !jsonObj.get("maxVotingKeysPerAccount").isJsonNull()) && !jsonObj.get("maxVotingKeysPerAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxVotingKeysPerAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxVotingKeysPerAccount").toString()));
      }
      if ((jsonObj.get("minVotingKeyLifetime") != null && !jsonObj.get("minVotingKeyLifetime").isJsonNull()) && !jsonObj.get("minVotingKeyLifetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minVotingKeyLifetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minVotingKeyLifetime").toString()));
      }
      if ((jsonObj.get("maxVotingKeyLifetime") != null && !jsonObj.get("maxVotingKeyLifetime").isJsonNull()) && !jsonObj.get("maxVotingKeyLifetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxVotingKeyLifetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxVotingKeyLifetime").toString()));
      }
      if ((jsonObj.get("harvestBeneficiaryPercentage") != null && !jsonObj.get("harvestBeneficiaryPercentage").isJsonNull()) && !jsonObj.get("harvestBeneficiaryPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `harvestBeneficiaryPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("harvestBeneficiaryPercentage").toString()));
      }
      if ((jsonObj.get("harvestNetworkPercentage") != null && !jsonObj.get("harvestNetworkPercentage").isJsonNull()) && !jsonObj.get("harvestNetworkPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `harvestNetworkPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("harvestNetworkPercentage").toString()));
      }
      if ((jsonObj.get("harvestNetworkFeeSinkAddress") != null && !jsonObj.get("harvestNetworkFeeSinkAddress").isJsonNull()) && !jsonObj.get("harvestNetworkFeeSinkAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `harvestNetworkFeeSinkAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("harvestNetworkFeeSinkAddress").toString()));
      }
      if ((jsonObj.get("blockPruneInterval") != null && !jsonObj.get("blockPruneInterval").isJsonNull()) && !jsonObj.get("blockPruneInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockPruneInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockPruneInterval").toString()));
      }
      if ((jsonObj.get("maxTransactionsPerBlock") != null && !jsonObj.get("maxTransactionsPerBlock").isJsonNull()) && !jsonObj.get("maxTransactionsPerBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxTransactionsPerBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxTransactionsPerBlock").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChainPropertiesDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChainPropertiesDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChainPropertiesDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChainPropertiesDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ChainPropertiesDTO>() {
           @Override
           public void write(JsonWriter out, ChainPropertiesDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChainPropertiesDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChainPropertiesDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChainPropertiesDTO
  * @throws IOException if the JSON string is invalid with respect to ChainPropertiesDTO
  */
  public static ChainPropertiesDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChainPropertiesDTO.class);
  }

 /**
  * Convert an instance of ChainPropertiesDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

