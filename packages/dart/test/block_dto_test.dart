//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:openapi/api.dart';
import 'package:test/test.dart';

// tests for BlockDTO
void main() {
  // final instance = BlockDTO();

  group('test BlockDTO', () {
    // A number that allows uint 32 values.
    // int size
    test('to test the property `size`', () async {
      // TODO
    });

    // Entity's signature generated by the signer.
    // String signature
    test('to test the property `signature`', () async {
      // TODO
    });

    // Public key.
    // String signerPublicKey
    test('to test the property `signerPublicKey`', () async {
      // TODO
    });

    // Entity version.
    // int version
    test('to test the property `version`', () async {
      // TODO
    });

    // NetworkTypeEnum network
    test('to test the property `network`', () async {
      // TODO
    });

    // int type
    test('to test the property `type`', () async {
      // TODO
    });

    // Height of the blockchain.
    // String height
    test('to test the property `height`', () async {
      // TODO
    });

    // Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
    // String timestamp
    test('to test the property `timestamp`', () async {
      // TODO
    });

    // Determines how hard is to harvest a new block, based on previous blocks.
    // String difficulty
    test('to test the property `difficulty`', () async {
      // TODO
    });

    // 32-bytes VRF proof gamma.
    // String proofGamma
    test('to test the property `proofGamma`', () async {
      // TODO
    });

    // 16-bytes VRF proof verification hash.
    // String proofVerificationHash
    test('to test the property `proofVerificationHash`', () async {
      // TODO
    });

    // 32-bytes VRF proof scalar.
    // String proofScalar
    test('to test the property `proofScalar`', () async {
      // TODO
    });

    // String previousBlockHash
    test('to test the property `previousBlockHash`', () async {
      // TODO
    });

    // String transactionsHash
    test('to test the property `transactionsHash`', () async {
      // TODO
    });

    // String receiptsHash
    test('to test the property `receiptsHash`', () async {
      // TODO
    });

    // String stateHash
    test('to test the property `stateHash`', () async {
      // TODO
    });

    // Address encoded using a 32-character set.
    // String beneficiaryAddress
    test('to test the property `beneficiaryAddress`', () async {
      // TODO
    });

    // Fee multiplier applied to transactions contained in block.
    // int feeMultiplier
    test('to test the property `feeMultiplier`', () async {
      // TODO
    });


  });

}
