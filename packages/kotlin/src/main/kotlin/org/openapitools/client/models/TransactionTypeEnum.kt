/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Type of transaction: * 0x414C (16716 decimal) - AccountKeyLinkTransaction. * 0x4243 (16963 decimal) - VrfKeyLinkTransaction. * 0x4143 (16707 decimal) - VotingKeyLinkTransaction. * 0x424C (16972 decimal) - NodeKeyLinkTransaction. * 0x4141 (16705 decimal) - AggregateCompleteTransaction. * 0x4241 (16961 decimal) - AggregateBondedTransaction. * 0x414D (16717 decimal) - MosaicDefinitionTransaction. * 0x424D (16973 decimal) - MosaicSupplyChangeTransaction. * 0x434D (17229 decimal) - MosaicSupplyRevocationTransaction. * 0x414E (16718 decimal) - NamespaceRegistrationTransaction. * 0x424E (16974 decimal) - AddressAliasTransaction. * 0x434E (17230 decimal) - MosaicAliasTransaction. * 0x4144 (16708 decimal) - AccountMetadataTransaction. * 0x4244 (16964 decimal) - MosaicMetadataTransaction. * 0x4344 (17220 decimal) - NamespaceMetadataTransaction. * 0x4155 (16725 decimal) - MultisigAccountModificationTransaction. * 0x4148 (16712 decimal) - HashLockTransaction. * 0x4152 (16722 decimal) - SecretLockTransaction. * 0x4252 (16978 decimal) - SecretProofTransaction. * 0x4150 (16720 decimal) - AccountAddressRestrictionTransaction. * 0x4250 (16976 decimal) - AccountMosaicRestrictionTransaction. * 0x4350 (17232 decimal) - AccountOperationRestrictionTransaction. * 0x4151 (16721 decimal) - MosaicGlobalRestrictionTransaction. * 0x4251 (16977 decimal) - MosaicAddressRestrictionTransaction. * 0x4154 (16724 decimal) - TransferTransaction. 
 *
 * Values: _16716,_16963,_16707,_16972,_16705,_16961,_16717,_16973,_17229,_16718,_16974,_17230,_16708,_16964,_17220,_16725,_16712,_16722,_16978,_16720,_16976,_17232,_16721,_16977,_16724
 */

@JsonClass(generateAdapter = false)
enum class TransactionTypeEnum(val value: kotlin.Int) {

    @Json(name = "16716")
    _16716(16716),

    @Json(name = "16963")
    _16963(16963),

    @Json(name = "16707")
    _16707(16707),

    @Json(name = "16972")
    _16972(16972),

    @Json(name = "16705")
    _16705(16705),

    @Json(name = "16961")
    _16961(16961),

    @Json(name = "16717")
    _16717(16717),

    @Json(name = "16973")
    _16973(16973),

    @Json(name = "17229")
    _17229(17229),

    @Json(name = "16718")
    _16718(16718),

    @Json(name = "16974")
    _16974(16974),

    @Json(name = "17230")
    _17230(17230),

    @Json(name = "16708")
    _16708(16708),

    @Json(name = "16964")
    _16964(16964),

    @Json(name = "17220")
    _17220(17220),

    @Json(name = "16725")
    _16725(16725),

    @Json(name = "16712")
    _16712(16712),

    @Json(name = "16722")
    _16722(16722),

    @Json(name = "16978")
    _16978(16978),

    @Json(name = "16720")
    _16720(16720),

    @Json(name = "16976")
    _16976(16976),

    @Json(name = "17232")
    _17232(17232),

    @Json(name = "16721")
    _16721(16721),

    @Json(name = "16977")
    _16977(16977),

    @Json(name = "16724")
    _16724(16724);

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value.toString()

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TransactionTypeEnum) "$data" else null

        /**
         * Returns a valid [TransactionTypeEnum] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TransactionTypeEnum? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

