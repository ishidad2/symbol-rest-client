/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the TransactionHashes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionHashes{}

// TransactionHashes struct for TransactionHashes
type TransactionHashes struct {
	// Array of transaction hashes.
	Hashes []string `json:"hashes,omitempty"`
}

// NewTransactionHashes instantiates a new TransactionHashes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionHashes() *TransactionHashes {
	this := TransactionHashes{}
	return &this
}

// NewTransactionHashesWithDefaults instantiates a new TransactionHashes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionHashesWithDefaults() *TransactionHashes {
	this := TransactionHashes{}
	return &this
}

// GetHashes returns the Hashes field value if set, zero value otherwise.
func (o *TransactionHashes) GetHashes() []string {
	if o == nil || IsNil(o.Hashes) {
		var ret []string
		return ret
	}
	return o.Hashes
}

// GetHashesOk returns a tuple with the Hashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionHashes) GetHashesOk() ([]string, bool) {
	if o == nil || IsNil(o.Hashes) {
		return nil, false
	}
	return o.Hashes, true
}

// HasHashes returns a boolean if a field has been set.
func (o *TransactionHashes) HasHashes() bool {
	if o != nil && !IsNil(o.Hashes) {
		return true
	}

	return false
}

// SetHashes gets a reference to the given []string and assigns it to the Hashes field.
func (o *TransactionHashes) SetHashes(v []string) {
	o.Hashes = v
}

func (o TransactionHashes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionHashes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hashes) {
		toSerialize["hashes"] = o.Hashes
	}
	return toSerialize, nil
}

type NullableTransactionHashes struct {
	value *TransactionHashes
	isSet bool
}

func (v NullableTransactionHashes) Get() *TransactionHashes {
	return v.value
}

func (v *NullableTransactionHashes) Set(val *TransactionHashes) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionHashes) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionHashes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionHashes(val *TransactionHashes) *NullableTransactionHashes {
	return &NullableTransactionHashes{value: val, isSet: true}
}

func (v NullableTransactionHashes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionHashes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


