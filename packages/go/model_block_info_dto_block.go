/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
	"bytes"
)

// BlockInfoDTOBlock struct for BlockInfoDTOBlock
type BlockInfoDTOBlock struct {
	BlockDTO *BlockDTO
	ImportanceBlockDTO *ImportanceBlockDTO
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *BlockInfoDTOBlock) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into BlockDTO
	err = json.Unmarshal(data, &dst.BlockDTO);
	if err == nil {
		jsonBlockDTO, _ := json.Marshal(dst.BlockDTO)
		if string(jsonBlockDTO) == "{}" { // empty struct
			dst.BlockDTO = nil
		} else {
			return nil // data stored in dst.BlockDTO, return on the first match
		}
	} else {
		dst.BlockDTO = nil
	}

	// try to unmarshal JSON data into ImportanceBlockDTO
	err = json.Unmarshal(data, &dst.ImportanceBlockDTO);
	if err == nil {
		jsonImportanceBlockDTO, _ := json.Marshal(dst.ImportanceBlockDTO)
		if string(jsonImportanceBlockDTO) == "{}" { // empty struct
			dst.ImportanceBlockDTO = nil
		} else {
			return nil // data stored in dst.ImportanceBlockDTO, return on the first match
		}
	} else {
		dst.ImportanceBlockDTO = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(BlockInfoDTOBlock)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *BlockInfoDTOBlock) MarshalJSON() ([]byte, error) {
	if src.BlockDTO != nil {
		return json.Marshal(&src.BlockDTO)
	}

	if src.ImportanceBlockDTO != nil {
		return json.Marshal(&src.ImportanceBlockDTO)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableBlockInfoDTOBlock struct {
	value *BlockInfoDTOBlock
	isSet bool
}

func (v NullableBlockInfoDTOBlock) Get() *BlockInfoDTOBlock {
	return v.value
}

func (v *NullableBlockInfoDTOBlock) Set(val *BlockInfoDTOBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockInfoDTOBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockInfoDTOBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockInfoDTOBlock(val *BlockInfoDTOBlock) *NullableBlockInfoDTOBlock {
	return &NullableBlockInfoDTOBlock{value: val, isSet: true}
}

func (v NullableBlockInfoDTOBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockInfoDTOBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


