/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MultisigAccountInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultisigAccountInfoDTO{}

// MultisigAccountInfoDTO struct for MultisigAccountInfoDTO
type MultisigAccountInfoDTO struct {
	Multisig MultisigDTO `json:"multisig"`
}

type _MultisigAccountInfoDTO MultisigAccountInfoDTO

// NewMultisigAccountInfoDTO instantiates a new MultisigAccountInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultisigAccountInfoDTO(multisig MultisigDTO) *MultisigAccountInfoDTO {
	this := MultisigAccountInfoDTO{}
	this.Multisig = multisig
	return &this
}

// NewMultisigAccountInfoDTOWithDefaults instantiates a new MultisigAccountInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultisigAccountInfoDTOWithDefaults() *MultisigAccountInfoDTO {
	this := MultisigAccountInfoDTO{}
	return &this
}

// GetMultisig returns the Multisig field value
func (o *MultisigAccountInfoDTO) GetMultisig() MultisigDTO {
	if o == nil {
		var ret MultisigDTO
		return ret
	}

	return o.Multisig
}

// GetMultisigOk returns a tuple with the Multisig field value
// and a boolean to check if the value has been set.
func (o *MultisigAccountInfoDTO) GetMultisigOk() (*MultisigDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Multisig, true
}

// SetMultisig sets field value
func (o *MultisigAccountInfoDTO) SetMultisig(v MultisigDTO) {
	o.Multisig = v
}

func (o MultisigAccountInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultisigAccountInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["multisig"] = o.Multisig
	return toSerialize, nil
}

func (o *MultisigAccountInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"multisig",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMultisigAccountInfoDTO := _MultisigAccountInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMultisigAccountInfoDTO)

	if err != nil {
		return err
	}

	*o = MultisigAccountInfoDTO(varMultisigAccountInfoDTO)

	return err
}

type NullableMultisigAccountInfoDTO struct {
	value *MultisigAccountInfoDTO
	isSet bool
}

func (v NullableMultisigAccountInfoDTO) Get() *MultisigAccountInfoDTO {
	return v.value
}

func (v *NullableMultisigAccountInfoDTO) Set(val *MultisigAccountInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMultisigAccountInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMultisigAccountInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultisigAccountInfoDTO(val *MultisigAccountInfoDTO) *NullableMultisigAccountInfoDTO {
	return &NullableMultisigAccountInfoDTO{value: val, isSet: true}
}

func (v NullableMultisigAccountInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultisigAccountInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


