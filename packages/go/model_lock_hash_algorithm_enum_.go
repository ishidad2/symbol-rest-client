/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// LockHashAlgorithmEnum Algorithm used to hash the proof: * 0 (Op_Sha3_256) - Proof is hashed using SHA3-256. * 1 (Op_Hash_160) - Proof is hashed twice: first with SHA-256 and then with RIPEMD-160 (bitcoin's OP_HASH160). * 2 (Op_Hash_256) - Proof is hashed twice with SHA3-256 (bitcoin's OP_HASH256). 
type LockHashAlgorithmEnum int32

// List of LockHashAlgorithmEnum.
const (
	_0 LockHashAlgorithmEnum = 0
	_1 LockHashAlgorithmEnum = 1
	_2 LockHashAlgorithmEnum = 2
)

// All allowed values of LockHashAlgorithmEnum enum
var AllowedLockHashAlgorithmEnumEnumValues = []LockHashAlgorithmEnum{
	0,
	1,
	2,
}

func (v *LockHashAlgorithmEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LockHashAlgorithmEnum(value)
	for _, existing := range AllowedLockHashAlgorithmEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LockHashAlgorithmEnum", value)
}

// NewLockHashAlgorithmEnumFromValue returns a pointer to a valid LockHashAlgorithmEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLockHashAlgorithmEnumFromValue(v int32) (*LockHashAlgorithmEnum, error) {
	ev := LockHashAlgorithmEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LockHashAlgorithmEnum: valid values are %v", v, AllowedLockHashAlgorithmEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LockHashAlgorithmEnum) IsValid() bool {
	for _, existing := range AllowedLockHashAlgorithmEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LockHashAlgorithmEnum. value
func (v LockHashAlgorithmEnum) Ptr() *LockHashAlgorithmEnum {
	return &v
}

type NullableLockHashAlgorithmEnum struct {
	value *LockHashAlgorithmEnum
	isSet bool
}

func (v NullableLockHashAlgorithmEnum) Get() *LockHashAlgorithmEnum {
	return v.value
}

func (v *NullableLockHashAlgorithmEnum) Set(val *LockHashAlgorithmEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLockHashAlgorithmEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLockHashAlgorithmEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockHashAlgorithmEnum(val *LockHashAlgorithmEnum) *NullableLockHashAlgorithmEnum {
	return &NullableLockHashAlgorithmEnum{value: val, isSet: true}
}

func (v NullableLockHashAlgorithmEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockHashAlgorithmEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

