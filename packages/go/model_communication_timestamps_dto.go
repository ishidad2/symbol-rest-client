/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the CommunicationTimestampsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommunicationTimestampsDTO{}

// CommunicationTimestampsDTO struct for CommunicationTimestampsDTO
type CommunicationTimestampsDTO struct {
	// Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
	SendTimestamp *string `json:"sendTimestamp,omitempty"`
	// Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
	ReceiveTimestamp *string `json:"receiveTimestamp,omitempty"`
}

// NewCommunicationTimestampsDTO instantiates a new CommunicationTimestampsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommunicationTimestampsDTO() *CommunicationTimestampsDTO {
	this := CommunicationTimestampsDTO{}
	return &this
}

// NewCommunicationTimestampsDTOWithDefaults instantiates a new CommunicationTimestampsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommunicationTimestampsDTOWithDefaults() *CommunicationTimestampsDTO {
	this := CommunicationTimestampsDTO{}
	return &this
}

// GetSendTimestamp returns the SendTimestamp field value if set, zero value otherwise.
func (o *CommunicationTimestampsDTO) GetSendTimestamp() string {
	if o == nil || IsNil(o.SendTimestamp) {
		var ret string
		return ret
	}
	return *o.SendTimestamp
}

// GetSendTimestampOk returns a tuple with the SendTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationTimestampsDTO) GetSendTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.SendTimestamp) {
		return nil, false
	}
	return o.SendTimestamp, true
}

// HasSendTimestamp returns a boolean if a field has been set.
func (o *CommunicationTimestampsDTO) HasSendTimestamp() bool {
	if o != nil && !IsNil(o.SendTimestamp) {
		return true
	}

	return false
}

// SetSendTimestamp gets a reference to the given string and assigns it to the SendTimestamp field.
func (o *CommunicationTimestampsDTO) SetSendTimestamp(v string) {
	o.SendTimestamp = &v
}

// GetReceiveTimestamp returns the ReceiveTimestamp field value if set, zero value otherwise.
func (o *CommunicationTimestampsDTO) GetReceiveTimestamp() string {
	if o == nil || IsNil(o.ReceiveTimestamp) {
		var ret string
		return ret
	}
	return *o.ReceiveTimestamp
}

// GetReceiveTimestampOk returns a tuple with the ReceiveTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunicationTimestampsDTO) GetReceiveTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.ReceiveTimestamp) {
		return nil, false
	}
	return o.ReceiveTimestamp, true
}

// HasReceiveTimestamp returns a boolean if a field has been set.
func (o *CommunicationTimestampsDTO) HasReceiveTimestamp() bool {
	if o != nil && !IsNil(o.ReceiveTimestamp) {
		return true
	}

	return false
}

// SetReceiveTimestamp gets a reference to the given string and assigns it to the ReceiveTimestamp field.
func (o *CommunicationTimestampsDTO) SetReceiveTimestamp(v string) {
	o.ReceiveTimestamp = &v
}

func (o CommunicationTimestampsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommunicationTimestampsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SendTimestamp) {
		toSerialize["sendTimestamp"] = o.SendTimestamp
	}
	if !IsNil(o.ReceiveTimestamp) {
		toSerialize["receiveTimestamp"] = o.ReceiveTimestamp
	}
	return toSerialize, nil
}

type NullableCommunicationTimestampsDTO struct {
	value *CommunicationTimestampsDTO
	isSet bool
}

func (v NullableCommunicationTimestampsDTO) Get() *CommunicationTimestampsDTO {
	return v.value
}

func (v *NullableCommunicationTimestampsDTO) Set(val *CommunicationTimestampsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunicationTimestampsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunicationTimestampsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunicationTimestampsDTO(val *CommunicationTimestampsDTO) *NullableCommunicationTimestampsDTO {
	return &NullableCommunicationTimestampsDTO{value: val, isSet: true}
}

func (v NullableCommunicationTimestampsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunicationTimestampsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


