/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetadataEntryDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataEntryDTO{}

// MetadataEntryDTO struct for MetadataEntryDTO
type MetadataEntryDTO struct {
	// The version of the state
	Version int32 `json:"version"`
	CompositeHash string `json:"compositeHash"`
	// Address encoded using a 32-character set.
	SourceAddress string `json:"sourceAddress"`
	// Address encoded using a 32-character set.
	TargetAddress string `json:"targetAddress"`
	// Metadata key scoped to source, target and type expressed.
	ScopedMetadataKey string `json:"scopedMetadataKey"`
	TargetId *MetadataEntryDTOTargetId `json:"targetId,omitempty"`
	MetadataType MetadataTypeEnum `json:"metadataType"`
	// Metadata value.
	Value string `json:"value"`
}

type _MetadataEntryDTO MetadataEntryDTO

// NewMetadataEntryDTO instantiates a new MetadataEntryDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataEntryDTO(version int32, compositeHash string, sourceAddress string, targetAddress string, scopedMetadataKey string, metadataType MetadataTypeEnum, value string) *MetadataEntryDTO {
	this := MetadataEntryDTO{}
	this.Version = version
	this.CompositeHash = compositeHash
	this.SourceAddress = sourceAddress
	this.TargetAddress = targetAddress
	this.ScopedMetadataKey = scopedMetadataKey
	this.MetadataType = metadataType
	this.Value = value
	return &this
}

// NewMetadataEntryDTOWithDefaults instantiates a new MetadataEntryDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataEntryDTOWithDefaults() *MetadataEntryDTO {
	this := MetadataEntryDTO{}
	return &this
}

// GetVersion returns the Version field value
func (o *MetadataEntryDTO) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *MetadataEntryDTO) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *MetadataEntryDTO) SetVersion(v int32) {
	o.Version = v
}

// GetCompositeHash returns the CompositeHash field value
func (o *MetadataEntryDTO) GetCompositeHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompositeHash
}

// GetCompositeHashOk returns a tuple with the CompositeHash field value
// and a boolean to check if the value has been set.
func (o *MetadataEntryDTO) GetCompositeHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompositeHash, true
}

// SetCompositeHash sets field value
func (o *MetadataEntryDTO) SetCompositeHash(v string) {
	o.CompositeHash = v
}

// GetSourceAddress returns the SourceAddress field value
func (o *MetadataEntryDTO) GetSourceAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceAddress
}

// GetSourceAddressOk returns a tuple with the SourceAddress field value
// and a boolean to check if the value has been set.
func (o *MetadataEntryDTO) GetSourceAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceAddress, true
}

// SetSourceAddress sets field value
func (o *MetadataEntryDTO) SetSourceAddress(v string) {
	o.SourceAddress = v
}

// GetTargetAddress returns the TargetAddress field value
func (o *MetadataEntryDTO) GetTargetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetAddress
}

// GetTargetAddressOk returns a tuple with the TargetAddress field value
// and a boolean to check if the value has been set.
func (o *MetadataEntryDTO) GetTargetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetAddress, true
}

// SetTargetAddress sets field value
func (o *MetadataEntryDTO) SetTargetAddress(v string) {
	o.TargetAddress = v
}

// GetScopedMetadataKey returns the ScopedMetadataKey field value
func (o *MetadataEntryDTO) GetScopedMetadataKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScopedMetadataKey
}

// GetScopedMetadataKeyOk returns a tuple with the ScopedMetadataKey field value
// and a boolean to check if the value has been set.
func (o *MetadataEntryDTO) GetScopedMetadataKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScopedMetadataKey, true
}

// SetScopedMetadataKey sets field value
func (o *MetadataEntryDTO) SetScopedMetadataKey(v string) {
	o.ScopedMetadataKey = v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *MetadataEntryDTO) GetTargetId() MetadataEntryDTOTargetId {
	if o == nil || IsNil(o.TargetId) {
		var ret MetadataEntryDTOTargetId
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataEntryDTO) GetTargetIdOk() (*MetadataEntryDTOTargetId, bool) {
	if o == nil || IsNil(o.TargetId) {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *MetadataEntryDTO) HasTargetId() bool {
	if o != nil && !IsNil(o.TargetId) {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given MetadataEntryDTOTargetId and assigns it to the TargetId field.
func (o *MetadataEntryDTO) SetTargetId(v MetadataEntryDTOTargetId) {
	o.TargetId = &v
}

// GetMetadataType returns the MetadataType field value
func (o *MetadataEntryDTO) GetMetadataType() MetadataTypeEnum {
	if o == nil {
		var ret MetadataTypeEnum
		return ret
	}

	return o.MetadataType
}

// GetMetadataTypeOk returns a tuple with the MetadataType field value
// and a boolean to check if the value has been set.
func (o *MetadataEntryDTO) GetMetadataTypeOk() (*MetadataTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataType, true
}

// SetMetadataType sets field value
func (o *MetadataEntryDTO) SetMetadataType(v MetadataTypeEnum) {
	o.MetadataType = v
}

// GetValue returns the Value field value
func (o *MetadataEntryDTO) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MetadataEntryDTO) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MetadataEntryDTO) SetValue(v string) {
	o.Value = v
}

func (o MetadataEntryDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataEntryDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["compositeHash"] = o.CompositeHash
	toSerialize["sourceAddress"] = o.SourceAddress
	toSerialize["targetAddress"] = o.TargetAddress
	toSerialize["scopedMetadataKey"] = o.ScopedMetadataKey
	if !IsNil(o.TargetId) {
		toSerialize["targetId"] = o.TargetId
	}
	toSerialize["metadataType"] = o.MetadataType
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *MetadataEntryDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"compositeHash",
		"sourceAddress",
		"targetAddress",
		"scopedMetadataKey",
		"metadataType",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetadataEntryDTO := _MetadataEntryDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetadataEntryDTO)

	if err != nil {
		return err
	}

	*o = MetadataEntryDTO(varMetadataEntryDTO)

	return err
}

type NullableMetadataEntryDTO struct {
	value *MetadataEntryDTO
	isSet bool
}

func (v NullableMetadataEntryDTO) Get() *MetadataEntryDTO {
	return v.value
}

func (v *NullableMetadataEntryDTO) Set(val *MetadataEntryDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataEntryDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataEntryDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataEntryDTO(val *MetadataEntryDTO) *NullableMetadataEntryDTO {
	return &NullableMetadataEntryDTO{value: val, isSet: true}
}

func (v NullableMetadataEntryDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataEntryDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


