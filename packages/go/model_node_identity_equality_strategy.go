/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// NodeIdentityEqualityStrategy Node equality strategy. Defines if the identifier for the node must be its public key or host. 
type NodeIdentityEqualityStrategy string

// List of NodeIdentityEqualityStrategy
const (
	HOST NodeIdentityEqualityStrategy = "host"
	PUBLIC_KEY NodeIdentityEqualityStrategy = "public-key"
)

// All allowed values of NodeIdentityEqualityStrategy enum
var AllowedNodeIdentityEqualityStrategyEnumValues = []NodeIdentityEqualityStrategy{
	"host",
	"public-key",
}

func (v *NodeIdentityEqualityStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NodeIdentityEqualityStrategy(value)
	for _, existing := range AllowedNodeIdentityEqualityStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NodeIdentityEqualityStrategy", value)
}

// NewNodeIdentityEqualityStrategyFromValue returns a pointer to a valid NodeIdentityEqualityStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNodeIdentityEqualityStrategyFromValue(v string) (*NodeIdentityEqualityStrategy, error) {
	ev := NodeIdentityEqualityStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NodeIdentityEqualityStrategy: valid values are %v", v, AllowedNodeIdentityEqualityStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NodeIdentityEqualityStrategy) IsValid() bool {
	for _, existing := range AllowedNodeIdentityEqualityStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NodeIdentityEqualityStrategy value
func (v NodeIdentityEqualityStrategy) Ptr() *NodeIdentityEqualityStrategy {
	return &v
}

type NullableNodeIdentityEqualityStrategy struct {
	value *NodeIdentityEqualityStrategy
	isSet bool
}

func (v NullableNodeIdentityEqualityStrategy) Get() *NodeIdentityEqualityStrategy {
	return v.value
}

func (v *NullableNodeIdentityEqualityStrategy) Set(val *NodeIdentityEqualityStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeIdentityEqualityStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeIdentityEqualityStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeIdentityEqualityStrategy(val *NodeIdentityEqualityStrategy) *NullableNodeIdentityEqualityStrategy {
	return &NullableNodeIdentityEqualityStrategy{value: val, isSet: true}
}

func (v NullableNodeIdentityEqualityStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeIdentityEqualityStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

