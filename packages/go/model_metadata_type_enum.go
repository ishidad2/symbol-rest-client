/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// MetadataTypeEnum Metadata type: * 0 - Account. * 1 - Mosaic. * 2 - Namespace. 
type MetadataTypeEnum int32

// List of MetadataTypeEnum
const (
	_0 MetadataTypeEnum = 0
	_1 MetadataTypeEnum = 1
	_2 MetadataTypeEnum = 2
)

// All allowed values of MetadataTypeEnum enum
var AllowedMetadataTypeEnumEnumValues = []MetadataTypeEnum{
	0,
	1,
	2,
}

func (v *MetadataTypeEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetadataTypeEnum(value)
	for _, existing := range AllowedMetadataTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetadataTypeEnum", value)
}

// NewMetadataTypeEnumFromValue returns a pointer to a valid MetadataTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetadataTypeEnumFromValue(v int32) (*MetadataTypeEnum, error) {
	ev := MetadataTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetadataTypeEnum: valid values are %v", v, AllowedMetadataTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetadataTypeEnum) IsValid() bool {
	for _, existing := range AllowedMetadataTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetadataTypeEnum value
func (v MetadataTypeEnum) Ptr() *MetadataTypeEnum {
	return &v
}

type NullableMetadataTypeEnum struct {
	value *MetadataTypeEnum
	isSet bool
}

func (v NullableMetadataTypeEnum) Get() *MetadataTypeEnum {
	return v.value
}

func (v *NullableMetadataTypeEnum) Set(val *MetadataTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataTypeEnum(val *MetadataTypeEnum) *NullableMetadataTypeEnum {
	return &NullableMetadataTypeEnum{value: val, isSet: true}
}

func (v NullableMetadataTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

