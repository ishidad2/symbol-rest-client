/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbeddedTransactionMetaDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddedTransactionMetaDTO{}

// EmbeddedTransactionMetaDTO struct for EmbeddedTransactionMetaDTO
type EmbeddedTransactionMetaDTO struct {
	// Height of the blockchain.
	Height string `json:"height"`
	AggregateHash string `json:"aggregateHash"`
	// Identifier of the aggregate transaction.
	AggregateId string `json:"aggregateId"`
	// Transaction index within the aggregate.
	Index int32 `json:"index"`
	// Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
	Timestamp *string `json:"timestamp,omitempty"`
	// Fee multiplier applied to transactions contained in block.
	FeeMultiplier *int64 `json:"feeMultiplier,omitempty"`
}

type _EmbeddedTransactionMetaDTO EmbeddedTransactionMetaDTO

// NewEmbeddedTransactionMetaDTO instantiates a new EmbeddedTransactionMetaDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddedTransactionMetaDTO(height string, aggregateHash string, aggregateId string, index int32) *EmbeddedTransactionMetaDTO {
	this := EmbeddedTransactionMetaDTO{}
	this.Height = height
	this.AggregateHash = aggregateHash
	this.AggregateId = aggregateId
	this.Index = index
	return &this
}

// NewEmbeddedTransactionMetaDTOWithDefaults instantiates a new EmbeddedTransactionMetaDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddedTransactionMetaDTOWithDefaults() *EmbeddedTransactionMetaDTO {
	this := EmbeddedTransactionMetaDTO{}
	return &this
}

// GetHeight returns the Height field value
func (o *EmbeddedTransactionMetaDTO) GetHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *EmbeddedTransactionMetaDTO) GetHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *EmbeddedTransactionMetaDTO) SetHeight(v string) {
	o.Height = v
}

// GetAggregateHash returns the AggregateHash field value
func (o *EmbeddedTransactionMetaDTO) GetAggregateHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AggregateHash
}

// GetAggregateHashOk returns a tuple with the AggregateHash field value
// and a boolean to check if the value has been set.
func (o *EmbeddedTransactionMetaDTO) GetAggregateHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregateHash, true
}

// SetAggregateHash sets field value
func (o *EmbeddedTransactionMetaDTO) SetAggregateHash(v string) {
	o.AggregateHash = v
}

// GetAggregateId returns the AggregateId field value
func (o *EmbeddedTransactionMetaDTO) GetAggregateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AggregateId
}

// GetAggregateIdOk returns a tuple with the AggregateId field value
// and a boolean to check if the value has been set.
func (o *EmbeddedTransactionMetaDTO) GetAggregateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AggregateId, true
}

// SetAggregateId sets field value
func (o *EmbeddedTransactionMetaDTO) SetAggregateId(v string) {
	o.AggregateId = v
}

// GetIndex returns the Index field value
func (o *EmbeddedTransactionMetaDTO) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *EmbeddedTransactionMetaDTO) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *EmbeddedTransactionMetaDTO) SetIndex(v int32) {
	o.Index = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *EmbeddedTransactionMetaDTO) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddedTransactionMetaDTO) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *EmbeddedTransactionMetaDTO) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *EmbeddedTransactionMetaDTO) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetFeeMultiplier returns the FeeMultiplier field value if set, zero value otherwise.
func (o *EmbeddedTransactionMetaDTO) GetFeeMultiplier() int64 {
	if o == nil || IsNil(o.FeeMultiplier) {
		var ret int64
		return ret
	}
	return *o.FeeMultiplier
}

// GetFeeMultiplierOk returns a tuple with the FeeMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddedTransactionMetaDTO) GetFeeMultiplierOk() (*int64, bool) {
	if o == nil || IsNil(o.FeeMultiplier) {
		return nil, false
	}
	return o.FeeMultiplier, true
}

// HasFeeMultiplier returns a boolean if a field has been set.
func (o *EmbeddedTransactionMetaDTO) HasFeeMultiplier() bool {
	if o != nil && !IsNil(o.FeeMultiplier) {
		return true
	}

	return false
}

// SetFeeMultiplier gets a reference to the given int64 and assigns it to the FeeMultiplier field.
func (o *EmbeddedTransactionMetaDTO) SetFeeMultiplier(v int64) {
	o.FeeMultiplier = &v
}

func (o EmbeddedTransactionMetaDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddedTransactionMetaDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["height"] = o.Height
	toSerialize["aggregateHash"] = o.AggregateHash
	toSerialize["aggregateId"] = o.AggregateId
	toSerialize["index"] = o.Index
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.FeeMultiplier) {
		toSerialize["feeMultiplier"] = o.FeeMultiplier
	}
	return toSerialize, nil
}

func (o *EmbeddedTransactionMetaDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"height",
		"aggregateHash",
		"aggregateId",
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddedTransactionMetaDTO := _EmbeddedTransactionMetaDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbeddedTransactionMetaDTO)

	if err != nil {
		return err
	}

	*o = EmbeddedTransactionMetaDTO(varEmbeddedTransactionMetaDTO)

	return err
}

type NullableEmbeddedTransactionMetaDTO struct {
	value *EmbeddedTransactionMetaDTO
	isSet bool
}

func (v NullableEmbeddedTransactionMetaDTO) Get() *EmbeddedTransactionMetaDTO {
	return v.value
}

func (v *NullableEmbeddedTransactionMetaDTO) Set(val *EmbeddedTransactionMetaDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddedTransactionMetaDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddedTransactionMetaDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddedTransactionMetaDTO(val *EmbeddedTransactionMetaDTO) *NullableEmbeddedTransactionMetaDTO {
	return &NullableEmbeddedTransactionMetaDTO{value: val, isSet: true}
}

func (v NullableEmbeddedTransactionMetaDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddedTransactionMetaDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


