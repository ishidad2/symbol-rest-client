/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FinalizedBlockDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinalizedBlockDTO{}

// FinalizedBlockDTO struct for FinalizedBlockDTO
type FinalizedBlockDTO struct {
	// Finalization Epoch
	FinalizationEpoch int64 `json:"finalizationEpoch"`
	// Finalization point
	FinalizationPoint int64 `json:"finalizationPoint"`
	// Height of the blockchain.
	Height string `json:"height"`
	Hash string `json:"hash"`
}

type _FinalizedBlockDTO FinalizedBlockDTO

// NewFinalizedBlockDTO instantiates a new FinalizedBlockDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinalizedBlockDTO(finalizationEpoch int64, finalizationPoint int64, height string, hash string) *FinalizedBlockDTO {
	this := FinalizedBlockDTO{}
	this.FinalizationEpoch = finalizationEpoch
	this.FinalizationPoint = finalizationPoint
	this.Height = height
	this.Hash = hash
	return &this
}

// NewFinalizedBlockDTOWithDefaults instantiates a new FinalizedBlockDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinalizedBlockDTOWithDefaults() *FinalizedBlockDTO {
	this := FinalizedBlockDTO{}
	return &this
}

// GetFinalizationEpoch returns the FinalizationEpoch field value
func (o *FinalizedBlockDTO) GetFinalizationEpoch() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FinalizationEpoch
}

// GetFinalizationEpochOk returns a tuple with the FinalizationEpoch field value
// and a boolean to check if the value has been set.
func (o *FinalizedBlockDTO) GetFinalizationEpochOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinalizationEpoch, true
}

// SetFinalizationEpoch sets field value
func (o *FinalizedBlockDTO) SetFinalizationEpoch(v int64) {
	o.FinalizationEpoch = v
}

// GetFinalizationPoint returns the FinalizationPoint field value
func (o *FinalizedBlockDTO) GetFinalizationPoint() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FinalizationPoint
}

// GetFinalizationPointOk returns a tuple with the FinalizationPoint field value
// and a boolean to check if the value has been set.
func (o *FinalizedBlockDTO) GetFinalizationPointOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinalizationPoint, true
}

// SetFinalizationPoint sets field value
func (o *FinalizedBlockDTO) SetFinalizationPoint(v int64) {
	o.FinalizationPoint = v
}

// GetHeight returns the Height field value
func (o *FinalizedBlockDTO) GetHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *FinalizedBlockDTO) GetHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *FinalizedBlockDTO) SetHeight(v string) {
	o.Height = v
}

// GetHash returns the Hash field value
func (o *FinalizedBlockDTO) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *FinalizedBlockDTO) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *FinalizedBlockDTO) SetHash(v string) {
	o.Hash = v
}

func (o FinalizedBlockDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinalizedBlockDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["finalizationEpoch"] = o.FinalizationEpoch
	toSerialize["finalizationPoint"] = o.FinalizationPoint
	toSerialize["height"] = o.Height
	toSerialize["hash"] = o.Hash
	return toSerialize, nil
}

func (o *FinalizedBlockDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"finalizationEpoch",
		"finalizationPoint",
		"height",
		"hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFinalizedBlockDTO := _FinalizedBlockDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFinalizedBlockDTO)

	if err != nil {
		return err
	}

	*o = FinalizedBlockDTO(varFinalizedBlockDTO)

	return err
}

type NullableFinalizedBlockDTO struct {
	value *FinalizedBlockDTO
	isSet bool
}

func (v NullableFinalizedBlockDTO) Get() *FinalizedBlockDTO {
	return v.value
}

func (v *NullableFinalizedBlockDTO) Set(val *FinalizedBlockDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableFinalizedBlockDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableFinalizedBlockDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinalizedBlockDTO(val *FinalizedBlockDTO) *NullableFinalizedBlockDTO {
	return &NullableFinalizedBlockDTO{value: val, isSet: true}
}

func (v NullableFinalizedBlockDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinalizedBlockDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


