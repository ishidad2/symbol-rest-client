/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the NamespaceNetworkPropertiesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceNetworkPropertiesDTO{}

// NamespaceNetworkPropertiesDTO struct for NamespaceNetworkPropertiesDTO
type NamespaceNetworkPropertiesDTO struct {
	// Maximum namespace name size.
	MaxNameSize *string `json:"maxNameSize,omitempty"`
	// Maximum number of children for a root namespace.
	MaxChildNamespaces *string `json:"maxChildNamespaces,omitempty"`
	// Maximum namespace depth.
	MaxNamespaceDepth *string `json:"maxNamespaceDepth,omitempty"`
	// Minimum namespace duration.
	MinNamespaceDuration *string `json:"minNamespaceDuration,omitempty"`
	// Maximum namespace duration.
	MaxNamespaceDuration *string `json:"maxNamespaceDuration,omitempty"`
	// Grace period during which time only the previous owner can renew an expired namespace.
	NamespaceGracePeriodDuration *string `json:"namespaceGracePeriodDuration,omitempty"`
	// Reserved root namespaces that cannot be claimed.
	ReservedRootNamespaceNames *string `json:"reservedRootNamespaceNames,omitempty"`
	// Address encoded using a 32-character set.
	NamespaceRentalFeeSinkAddress *string `json:"namespaceRentalFeeSinkAddress,omitempty"`
	// Root namespace rental fee per block.
	RootNamespaceRentalFeePerBlock *string `json:"rootNamespaceRentalFeePerBlock,omitempty"`
	// Child namespace rental fee.
	ChildNamespaceRentalFee *string `json:"childNamespaceRentalFee,omitempty"`
}

// NewNamespaceNetworkPropertiesDTO instantiates a new NamespaceNetworkPropertiesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceNetworkPropertiesDTO() *NamespaceNetworkPropertiesDTO {
	this := NamespaceNetworkPropertiesDTO{}
	return &this
}

// NewNamespaceNetworkPropertiesDTOWithDefaults instantiates a new NamespaceNetworkPropertiesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceNetworkPropertiesDTOWithDefaults() *NamespaceNetworkPropertiesDTO {
	this := NamespaceNetworkPropertiesDTO{}
	return &this
}

// GetMaxNameSize returns the MaxNameSize field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetMaxNameSize() string {
	if o == nil || IsNil(o.MaxNameSize) {
		var ret string
		return ret
	}
	return *o.MaxNameSize
}

// GetMaxNameSizeOk returns a tuple with the MaxNameSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetMaxNameSizeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxNameSize) {
		return nil, false
	}
	return o.MaxNameSize, true
}

// HasMaxNameSize returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasMaxNameSize() bool {
	if o != nil && !IsNil(o.MaxNameSize) {
		return true
	}

	return false
}

// SetMaxNameSize gets a reference to the given string and assigns it to the MaxNameSize field.
func (o *NamespaceNetworkPropertiesDTO) SetMaxNameSize(v string) {
	o.MaxNameSize = &v
}

// GetMaxChildNamespaces returns the MaxChildNamespaces field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetMaxChildNamespaces() string {
	if o == nil || IsNil(o.MaxChildNamespaces) {
		var ret string
		return ret
	}
	return *o.MaxChildNamespaces
}

// GetMaxChildNamespacesOk returns a tuple with the MaxChildNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetMaxChildNamespacesOk() (*string, bool) {
	if o == nil || IsNil(o.MaxChildNamespaces) {
		return nil, false
	}
	return o.MaxChildNamespaces, true
}

// HasMaxChildNamespaces returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasMaxChildNamespaces() bool {
	if o != nil && !IsNil(o.MaxChildNamespaces) {
		return true
	}

	return false
}

// SetMaxChildNamespaces gets a reference to the given string and assigns it to the MaxChildNamespaces field.
func (o *NamespaceNetworkPropertiesDTO) SetMaxChildNamespaces(v string) {
	o.MaxChildNamespaces = &v
}

// GetMaxNamespaceDepth returns the MaxNamespaceDepth field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetMaxNamespaceDepth() string {
	if o == nil || IsNil(o.MaxNamespaceDepth) {
		var ret string
		return ret
	}
	return *o.MaxNamespaceDepth
}

// GetMaxNamespaceDepthOk returns a tuple with the MaxNamespaceDepth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetMaxNamespaceDepthOk() (*string, bool) {
	if o == nil || IsNil(o.MaxNamespaceDepth) {
		return nil, false
	}
	return o.MaxNamespaceDepth, true
}

// HasMaxNamespaceDepth returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasMaxNamespaceDepth() bool {
	if o != nil && !IsNil(o.MaxNamespaceDepth) {
		return true
	}

	return false
}

// SetMaxNamespaceDepth gets a reference to the given string and assigns it to the MaxNamespaceDepth field.
func (o *NamespaceNetworkPropertiesDTO) SetMaxNamespaceDepth(v string) {
	o.MaxNamespaceDepth = &v
}

// GetMinNamespaceDuration returns the MinNamespaceDuration field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetMinNamespaceDuration() string {
	if o == nil || IsNil(o.MinNamespaceDuration) {
		var ret string
		return ret
	}
	return *o.MinNamespaceDuration
}

// GetMinNamespaceDurationOk returns a tuple with the MinNamespaceDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetMinNamespaceDurationOk() (*string, bool) {
	if o == nil || IsNil(o.MinNamespaceDuration) {
		return nil, false
	}
	return o.MinNamespaceDuration, true
}

// HasMinNamespaceDuration returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasMinNamespaceDuration() bool {
	if o != nil && !IsNil(o.MinNamespaceDuration) {
		return true
	}

	return false
}

// SetMinNamespaceDuration gets a reference to the given string and assigns it to the MinNamespaceDuration field.
func (o *NamespaceNetworkPropertiesDTO) SetMinNamespaceDuration(v string) {
	o.MinNamespaceDuration = &v
}

// GetMaxNamespaceDuration returns the MaxNamespaceDuration field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetMaxNamespaceDuration() string {
	if o == nil || IsNil(o.MaxNamespaceDuration) {
		var ret string
		return ret
	}
	return *o.MaxNamespaceDuration
}

// GetMaxNamespaceDurationOk returns a tuple with the MaxNamespaceDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetMaxNamespaceDurationOk() (*string, bool) {
	if o == nil || IsNil(o.MaxNamespaceDuration) {
		return nil, false
	}
	return o.MaxNamespaceDuration, true
}

// HasMaxNamespaceDuration returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasMaxNamespaceDuration() bool {
	if o != nil && !IsNil(o.MaxNamespaceDuration) {
		return true
	}

	return false
}

// SetMaxNamespaceDuration gets a reference to the given string and assigns it to the MaxNamespaceDuration field.
func (o *NamespaceNetworkPropertiesDTO) SetMaxNamespaceDuration(v string) {
	o.MaxNamespaceDuration = &v
}

// GetNamespaceGracePeriodDuration returns the NamespaceGracePeriodDuration field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetNamespaceGracePeriodDuration() string {
	if o == nil || IsNil(o.NamespaceGracePeriodDuration) {
		var ret string
		return ret
	}
	return *o.NamespaceGracePeriodDuration
}

// GetNamespaceGracePeriodDurationOk returns a tuple with the NamespaceGracePeriodDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetNamespaceGracePeriodDurationOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceGracePeriodDuration) {
		return nil, false
	}
	return o.NamespaceGracePeriodDuration, true
}

// HasNamespaceGracePeriodDuration returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasNamespaceGracePeriodDuration() bool {
	if o != nil && !IsNil(o.NamespaceGracePeriodDuration) {
		return true
	}

	return false
}

// SetNamespaceGracePeriodDuration gets a reference to the given string and assigns it to the NamespaceGracePeriodDuration field.
func (o *NamespaceNetworkPropertiesDTO) SetNamespaceGracePeriodDuration(v string) {
	o.NamespaceGracePeriodDuration = &v
}

// GetReservedRootNamespaceNames returns the ReservedRootNamespaceNames field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetReservedRootNamespaceNames() string {
	if o == nil || IsNil(o.ReservedRootNamespaceNames) {
		var ret string
		return ret
	}
	return *o.ReservedRootNamespaceNames
}

// GetReservedRootNamespaceNamesOk returns a tuple with the ReservedRootNamespaceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetReservedRootNamespaceNamesOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedRootNamespaceNames) {
		return nil, false
	}
	return o.ReservedRootNamespaceNames, true
}

// HasReservedRootNamespaceNames returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasReservedRootNamespaceNames() bool {
	if o != nil && !IsNil(o.ReservedRootNamespaceNames) {
		return true
	}

	return false
}

// SetReservedRootNamespaceNames gets a reference to the given string and assigns it to the ReservedRootNamespaceNames field.
func (o *NamespaceNetworkPropertiesDTO) SetReservedRootNamespaceNames(v string) {
	o.ReservedRootNamespaceNames = &v
}

// GetNamespaceRentalFeeSinkAddress returns the NamespaceRentalFeeSinkAddress field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetNamespaceRentalFeeSinkAddress() string {
	if o == nil || IsNil(o.NamespaceRentalFeeSinkAddress) {
		var ret string
		return ret
	}
	return *o.NamespaceRentalFeeSinkAddress
}

// GetNamespaceRentalFeeSinkAddressOk returns a tuple with the NamespaceRentalFeeSinkAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetNamespaceRentalFeeSinkAddressOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceRentalFeeSinkAddress) {
		return nil, false
	}
	return o.NamespaceRentalFeeSinkAddress, true
}

// HasNamespaceRentalFeeSinkAddress returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasNamespaceRentalFeeSinkAddress() bool {
	if o != nil && !IsNil(o.NamespaceRentalFeeSinkAddress) {
		return true
	}

	return false
}

// SetNamespaceRentalFeeSinkAddress gets a reference to the given string and assigns it to the NamespaceRentalFeeSinkAddress field.
func (o *NamespaceNetworkPropertiesDTO) SetNamespaceRentalFeeSinkAddress(v string) {
	o.NamespaceRentalFeeSinkAddress = &v
}

// GetRootNamespaceRentalFeePerBlock returns the RootNamespaceRentalFeePerBlock field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetRootNamespaceRentalFeePerBlock() string {
	if o == nil || IsNil(o.RootNamespaceRentalFeePerBlock) {
		var ret string
		return ret
	}
	return *o.RootNamespaceRentalFeePerBlock
}

// GetRootNamespaceRentalFeePerBlockOk returns a tuple with the RootNamespaceRentalFeePerBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetRootNamespaceRentalFeePerBlockOk() (*string, bool) {
	if o == nil || IsNil(o.RootNamespaceRentalFeePerBlock) {
		return nil, false
	}
	return o.RootNamespaceRentalFeePerBlock, true
}

// HasRootNamespaceRentalFeePerBlock returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasRootNamespaceRentalFeePerBlock() bool {
	if o != nil && !IsNil(o.RootNamespaceRentalFeePerBlock) {
		return true
	}

	return false
}

// SetRootNamespaceRentalFeePerBlock gets a reference to the given string and assigns it to the RootNamespaceRentalFeePerBlock field.
func (o *NamespaceNetworkPropertiesDTO) SetRootNamespaceRentalFeePerBlock(v string) {
	o.RootNamespaceRentalFeePerBlock = &v
}

// GetChildNamespaceRentalFee returns the ChildNamespaceRentalFee field value if set, zero value otherwise.
func (o *NamespaceNetworkPropertiesDTO) GetChildNamespaceRentalFee() string {
	if o == nil || IsNil(o.ChildNamespaceRentalFee) {
		var ret string
		return ret
	}
	return *o.ChildNamespaceRentalFee
}

// GetChildNamespaceRentalFeeOk returns a tuple with the ChildNamespaceRentalFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNetworkPropertiesDTO) GetChildNamespaceRentalFeeOk() (*string, bool) {
	if o == nil || IsNil(o.ChildNamespaceRentalFee) {
		return nil, false
	}
	return o.ChildNamespaceRentalFee, true
}

// HasChildNamespaceRentalFee returns a boolean if a field has been set.
func (o *NamespaceNetworkPropertiesDTO) HasChildNamespaceRentalFee() bool {
	if o != nil && !IsNil(o.ChildNamespaceRentalFee) {
		return true
	}

	return false
}

// SetChildNamespaceRentalFee gets a reference to the given string and assigns it to the ChildNamespaceRentalFee field.
func (o *NamespaceNetworkPropertiesDTO) SetChildNamespaceRentalFee(v string) {
	o.ChildNamespaceRentalFee = &v
}

func (o NamespaceNetworkPropertiesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceNetworkPropertiesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxNameSize) {
		toSerialize["maxNameSize"] = o.MaxNameSize
	}
	if !IsNil(o.MaxChildNamespaces) {
		toSerialize["maxChildNamespaces"] = o.MaxChildNamespaces
	}
	if !IsNil(o.MaxNamespaceDepth) {
		toSerialize["maxNamespaceDepth"] = o.MaxNamespaceDepth
	}
	if !IsNil(o.MinNamespaceDuration) {
		toSerialize["minNamespaceDuration"] = o.MinNamespaceDuration
	}
	if !IsNil(o.MaxNamespaceDuration) {
		toSerialize["maxNamespaceDuration"] = o.MaxNamespaceDuration
	}
	if !IsNil(o.NamespaceGracePeriodDuration) {
		toSerialize["namespaceGracePeriodDuration"] = o.NamespaceGracePeriodDuration
	}
	if !IsNil(o.ReservedRootNamespaceNames) {
		toSerialize["reservedRootNamespaceNames"] = o.ReservedRootNamespaceNames
	}
	if !IsNil(o.NamespaceRentalFeeSinkAddress) {
		toSerialize["namespaceRentalFeeSinkAddress"] = o.NamespaceRentalFeeSinkAddress
	}
	if !IsNil(o.RootNamespaceRentalFeePerBlock) {
		toSerialize["rootNamespaceRentalFeePerBlock"] = o.RootNamespaceRentalFeePerBlock
	}
	if !IsNil(o.ChildNamespaceRentalFee) {
		toSerialize["childNamespaceRentalFee"] = o.ChildNamespaceRentalFee
	}
	return toSerialize, nil
}

type NullableNamespaceNetworkPropertiesDTO struct {
	value *NamespaceNetworkPropertiesDTO
	isSet bool
}

func (v NullableNamespaceNetworkPropertiesDTO) Get() *NamespaceNetworkPropertiesDTO {
	return v.value
}

func (v *NullableNamespaceNetworkPropertiesDTO) Set(val *NamespaceNetworkPropertiesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceNetworkPropertiesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceNetworkPropertiesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceNetworkPropertiesDTO(val *NamespaceNetworkPropertiesDTO) *NullableNamespaceNetworkPropertiesDTO {
	return &NullableNamespaceNetworkPropertiesDTO{value: val, isSet: true}
}

func (v NullableNamespaceNetworkPropertiesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceNetworkPropertiesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


