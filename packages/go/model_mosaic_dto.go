/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MosaicDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MosaicDTO{}

// MosaicDTO struct for MosaicDTO
type MosaicDTO struct {
	// The version of the state
	Version int32 `json:"version"`
	// Mosaic identifier.
	Id string `json:"id"`
	// Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
	Supply string `json:"supply"`
	// Height of the blockchain.
	StartHeight string `json:"startHeight"`
	// Address encoded using a 32-character set.
	OwnerAddress string `json:"ownerAddress"`
	// A number that allows uint 32 values.
	Revision int64 `json:"revision"`
	// - 0x00 (none) - No flags present. - 0x01 (supplyMutable) - Mosaic supports supply changes even when mosaic owner owns partial supply. - 0x02 (transferable) - Mosaic supports transfers between arbitrary accounts. When not set, mosaic can only be transferred to and from mosaic owner. - 0x04 (restrictable) - Mosaic supports custom restrictions configured by mosaic owner. - 0x08 (revokable) - Mosaic allows creator to revoke balances from another user. 
	Flags int32 `json:"flags"`
	// Determines up to what decimal place the mosaic can be divided. Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics. The divisibility must be in the range of 0 and 6. 
	Divisibility int32 `json:"divisibility"`
	// Duration expressed in number of blocks.
	Duration string `json:"duration"`
}

type _MosaicDTO MosaicDTO

// NewMosaicDTO instantiates a new MosaicDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMosaicDTO(version int32, id string, supply string, startHeight string, ownerAddress string, revision int64, flags int32, divisibility int32, duration string) *MosaicDTO {
	this := MosaicDTO{}
	this.Version = version
	this.Id = id
	this.Supply = supply
	this.StartHeight = startHeight
	this.OwnerAddress = ownerAddress
	this.Revision = revision
	this.Flags = flags
	this.Divisibility = divisibility
	this.Duration = duration
	return &this
}

// NewMosaicDTOWithDefaults instantiates a new MosaicDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMosaicDTOWithDefaults() *MosaicDTO {
	this := MosaicDTO{}
	return &this
}

// GetVersion returns the Version field value
func (o *MosaicDTO) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *MosaicDTO) SetVersion(v int32) {
	o.Version = v
}

// GetId returns the Id field value
func (o *MosaicDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MosaicDTO) SetId(v string) {
	o.Id = v
}

// GetSupply returns the Supply field value
func (o *MosaicDTO) GetSupply() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Supply
}

// GetSupplyOk returns a tuple with the Supply field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetSupplyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supply, true
}

// SetSupply sets field value
func (o *MosaicDTO) SetSupply(v string) {
	o.Supply = v
}

// GetStartHeight returns the StartHeight field value
func (o *MosaicDTO) GetStartHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartHeight
}

// GetStartHeightOk returns a tuple with the StartHeight field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetStartHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartHeight, true
}

// SetStartHeight sets field value
func (o *MosaicDTO) SetStartHeight(v string) {
	o.StartHeight = v
}

// GetOwnerAddress returns the OwnerAddress field value
func (o *MosaicDTO) GetOwnerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerAddress
}

// GetOwnerAddressOk returns a tuple with the OwnerAddress field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetOwnerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerAddress, true
}

// SetOwnerAddress sets field value
func (o *MosaicDTO) SetOwnerAddress(v string) {
	o.OwnerAddress = v
}

// GetRevision returns the Revision field value
func (o *MosaicDTO) GetRevision() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetRevisionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *MosaicDTO) SetRevision(v int64) {
	o.Revision = v
}

// GetFlags returns the Flags field value
func (o *MosaicDTO) GetFlags() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetFlagsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flags, true
}

// SetFlags sets field value
func (o *MosaicDTO) SetFlags(v int32) {
	o.Flags = v
}

// GetDivisibility returns the Divisibility field value
func (o *MosaicDTO) GetDivisibility() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Divisibility
}

// GetDivisibilityOk returns a tuple with the Divisibility field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetDivisibilityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Divisibility, true
}

// SetDivisibility sets field value
func (o *MosaicDTO) SetDivisibility(v int32) {
	o.Divisibility = v
}

// GetDuration returns the Duration field value
func (o *MosaicDTO) GetDuration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *MosaicDTO) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *MosaicDTO) SetDuration(v string) {
	o.Duration = v
}

func (o MosaicDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MosaicDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["id"] = o.Id
	toSerialize["supply"] = o.Supply
	toSerialize["startHeight"] = o.StartHeight
	toSerialize["ownerAddress"] = o.OwnerAddress
	toSerialize["revision"] = o.Revision
	toSerialize["flags"] = o.Flags
	toSerialize["divisibility"] = o.Divisibility
	toSerialize["duration"] = o.Duration
	return toSerialize, nil
}

func (o *MosaicDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"id",
		"supply",
		"startHeight",
		"ownerAddress",
		"revision",
		"flags",
		"divisibility",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMosaicDTO := _MosaicDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMosaicDTO)

	if err != nil {
		return err
	}

	*o = MosaicDTO(varMosaicDTO)

	return err
}

type NullableMosaicDTO struct {
	value *MosaicDTO
	isSet bool
}

func (v NullableMosaicDTO) Get() *MosaicDTO {
	return v.value
}

func (v *NullableMosaicDTO) Set(val *MosaicDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMosaicDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMosaicDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMosaicDTO(val *MosaicDTO) *NullableMosaicDTO {
	return &NullableMosaicDTO{value: val, isSet: true}
}

func (v NullableMosaicDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMosaicDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


