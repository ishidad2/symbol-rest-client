/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnlockedAccountDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnlockedAccountDTO{}

// UnlockedAccountDTO struct for UnlockedAccountDTO
type UnlockedAccountDTO struct {
	UnlockedAccount []string `json:"unlockedAccount"`
}

type _UnlockedAccountDTO UnlockedAccountDTO

// NewUnlockedAccountDTO instantiates a new UnlockedAccountDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnlockedAccountDTO(unlockedAccount []string) *UnlockedAccountDTO {
	this := UnlockedAccountDTO{}
	this.UnlockedAccount = unlockedAccount
	return &this
}

// NewUnlockedAccountDTOWithDefaults instantiates a new UnlockedAccountDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnlockedAccountDTOWithDefaults() *UnlockedAccountDTO {
	this := UnlockedAccountDTO{}
	return &this
}

// GetUnlockedAccount returns the UnlockedAccount field value
func (o *UnlockedAccountDTO) GetUnlockedAccount() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UnlockedAccount
}

// GetUnlockedAccountOk returns a tuple with the UnlockedAccount field value
// and a boolean to check if the value has been set.
func (o *UnlockedAccountDTO) GetUnlockedAccountOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnlockedAccount, true
}

// SetUnlockedAccount sets field value
func (o *UnlockedAccountDTO) SetUnlockedAccount(v []string) {
	o.UnlockedAccount = v
}

func (o UnlockedAccountDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnlockedAccountDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["unlockedAccount"] = o.UnlockedAccount
	return toSerialize, nil
}

func (o *UnlockedAccountDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unlockedAccount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnlockedAccountDTO := _UnlockedAccountDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnlockedAccountDTO)

	if err != nil {
		return err
	}

	*o = UnlockedAccountDTO(varUnlockedAccountDTO)

	return err
}

type NullableUnlockedAccountDTO struct {
	value *UnlockedAccountDTO
	isSet bool
}

func (v NullableUnlockedAccountDTO) Get() *UnlockedAccountDTO {
	return v.value
}

func (v *NullableUnlockedAccountDTO) Set(val *UnlockedAccountDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUnlockedAccountDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUnlockedAccountDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnlockedAccountDTO(val *UnlockedAccountDTO) *NullableUnlockedAccountDTO {
	return &NullableUnlockedAccountDTO{value: val, isSet: true}
}

func (v NullableUnlockedAccountDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnlockedAccountDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


