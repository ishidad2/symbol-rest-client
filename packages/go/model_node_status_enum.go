/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// NodeStatusEnum the model 'NodeStatusEnum'
type NodeStatusEnum string

// List of NodeStatusEnum
const (
	UP NodeStatusEnum = "up"
	DOWN NodeStatusEnum = "down"
)

// All allowed values of NodeStatusEnum enum
var AllowedNodeStatusEnumEnumValues = []NodeStatusEnum{
	"up",
	"down",
}

func (v *NodeStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NodeStatusEnum(value)
	for _, existing := range AllowedNodeStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NodeStatusEnum", value)
}

// NewNodeStatusEnumFromValue returns a pointer to a valid NodeStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNodeStatusEnumFromValue(v string) (*NodeStatusEnum, error) {
	ev := NodeStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NodeStatusEnum: valid values are %v", v, AllowedNodeStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NodeStatusEnum) IsValid() bool {
	for _, existing := range AllowedNodeStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NodeStatusEnum value
func (v NodeStatusEnum) Ptr() *NodeStatusEnum {
	return &v
}

type NullableNodeStatusEnum struct {
	value *NodeStatusEnum
	isSet bool
}

func (v NullableNodeStatusEnum) Get() *NodeStatusEnum {
	return v.value
}

func (v *NullableNodeStatusEnum) Set(val *NodeStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeStatusEnum(val *NodeStatusEnum) *NullableNodeStatusEnum {
	return &NullableNodeStatusEnum{value: val, isSet: true}
}

func (v NullableNodeStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

