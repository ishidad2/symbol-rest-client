/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChainInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChainInfoDTO{}

// ChainInfoDTO struct for ChainInfoDTO
type ChainInfoDTO struct {
	// Height of the blockchain.
	Height string `json:"height"`
	// Score of the blockchain. During synchronization, nodes try to get the blockchain with highest score in the network. 
	ScoreHigh string `json:"scoreHigh"`
	// Score of the blockchain. During synchronization, nodes try to get the blockchain with highest score in the network. 
	ScoreLow string `json:"scoreLow"`
	LatestFinalizedBlock FinalizedBlockDTO `json:"latestFinalizedBlock"`
}

type _ChainInfoDTO ChainInfoDTO

// NewChainInfoDTO instantiates a new ChainInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainInfoDTO(height string, scoreHigh string, scoreLow string, latestFinalizedBlock FinalizedBlockDTO) *ChainInfoDTO {
	this := ChainInfoDTO{}
	this.Height = height
	this.ScoreHigh = scoreHigh
	this.ScoreLow = scoreLow
	this.LatestFinalizedBlock = latestFinalizedBlock
	return &this
}

// NewChainInfoDTOWithDefaults instantiates a new ChainInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainInfoDTOWithDefaults() *ChainInfoDTO {
	this := ChainInfoDTO{}
	return &this
}

// GetHeight returns the Height field value
func (o *ChainInfoDTO) GetHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *ChainInfoDTO) GetHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *ChainInfoDTO) SetHeight(v string) {
	o.Height = v
}

// GetScoreHigh returns the ScoreHigh field value
func (o *ChainInfoDTO) GetScoreHigh() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScoreHigh
}

// GetScoreHighOk returns a tuple with the ScoreHigh field value
// and a boolean to check if the value has been set.
func (o *ChainInfoDTO) GetScoreHighOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScoreHigh, true
}

// SetScoreHigh sets field value
func (o *ChainInfoDTO) SetScoreHigh(v string) {
	o.ScoreHigh = v
}

// GetScoreLow returns the ScoreLow field value
func (o *ChainInfoDTO) GetScoreLow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScoreLow
}

// GetScoreLowOk returns a tuple with the ScoreLow field value
// and a boolean to check if the value has been set.
func (o *ChainInfoDTO) GetScoreLowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScoreLow, true
}

// SetScoreLow sets field value
func (o *ChainInfoDTO) SetScoreLow(v string) {
	o.ScoreLow = v
}

// GetLatestFinalizedBlock returns the LatestFinalizedBlock field value
func (o *ChainInfoDTO) GetLatestFinalizedBlock() FinalizedBlockDTO {
	if o == nil {
		var ret FinalizedBlockDTO
		return ret
	}

	return o.LatestFinalizedBlock
}

// GetLatestFinalizedBlockOk returns a tuple with the LatestFinalizedBlock field value
// and a boolean to check if the value has been set.
func (o *ChainInfoDTO) GetLatestFinalizedBlockOk() (*FinalizedBlockDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LatestFinalizedBlock, true
}

// SetLatestFinalizedBlock sets field value
func (o *ChainInfoDTO) SetLatestFinalizedBlock(v FinalizedBlockDTO) {
	o.LatestFinalizedBlock = v
}

func (o ChainInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChainInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["height"] = o.Height
	toSerialize["scoreHigh"] = o.ScoreHigh
	toSerialize["scoreLow"] = o.ScoreLow
	toSerialize["latestFinalizedBlock"] = o.LatestFinalizedBlock
	return toSerialize, nil
}

func (o *ChainInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"height",
		"scoreHigh",
		"scoreLow",
		"latestFinalizedBlock",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChainInfoDTO := _ChainInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChainInfoDTO)

	if err != nil {
		return err
	}

	*o = ChainInfoDTO(varChainInfoDTO)

	return err
}

type NullableChainInfoDTO struct {
	value *ChainInfoDTO
	isSet bool
}

func (v NullableChainInfoDTO) Get() *ChainInfoDTO {
	return v.value
}

func (v *NullableChainInfoDTO) Set(val *ChainInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableChainInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableChainInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainInfoDTO(val *ChainInfoDTO) *NullableChainInfoDTO {
	return &NullableChainInfoDTO{value: val, isSet: true}
}

func (v NullableChainInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


