/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// MosaicRestrictionTypeEnum Type of mosaic restriction. * 0 - Uninitialized value indicating no restriction. * 1 (EQ) - Allow if equal. * 2 (NE) - Allow if not equal. * 3 (LT) - Allow if less than. * 4 (LE) - Allow if less than or equal. * 5 (GT) - Allow if greater than. * 6 (GE) - Allow if greater than or equal. 
type MosaicRestrictionTypeEnum int32

// List of MosaicRestrictionTypeEnum
const (
	_0 MosaicRestrictionTypeEnum = 0
	_1 MosaicRestrictionTypeEnum = 1
	_2 MosaicRestrictionTypeEnum = 2
	_3 MosaicRestrictionTypeEnum = 3
	_4 MosaicRestrictionTypeEnum = 4
	_5 MosaicRestrictionTypeEnum = 5
	_6 MosaicRestrictionTypeEnum = 6
)

// All allowed values of MosaicRestrictionTypeEnum enum
var AllowedMosaicRestrictionTypeEnumEnumValues = []MosaicRestrictionTypeEnum{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
}

func (v *MosaicRestrictionTypeEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MosaicRestrictionTypeEnum(value)
	for _, existing := range AllowedMosaicRestrictionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MosaicRestrictionTypeEnum", value)
}

// NewMosaicRestrictionTypeEnumFromValue returns a pointer to a valid MosaicRestrictionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMosaicRestrictionTypeEnumFromValue(v int32) (*MosaicRestrictionTypeEnum, error) {
	ev := MosaicRestrictionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MosaicRestrictionTypeEnum: valid values are %v", v, AllowedMosaicRestrictionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MosaicRestrictionTypeEnum) IsValid() bool {
	for _, existing := range AllowedMosaicRestrictionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MosaicRestrictionTypeEnum value
func (v MosaicRestrictionTypeEnum) Ptr() *MosaicRestrictionTypeEnum {
	return &v
}

type NullableMosaicRestrictionTypeEnum struct {
	value *MosaicRestrictionTypeEnum
	isSet bool
}

func (v NullableMosaicRestrictionTypeEnum) Get() *MosaicRestrictionTypeEnum {
	return v.value
}

func (v *NullableMosaicRestrictionTypeEnum) Set(val *MosaicRestrictionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMosaicRestrictionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMosaicRestrictionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMosaicRestrictionTypeEnum(val *MosaicRestrictionTypeEnum) *NullableMosaicRestrictionTypeEnum {
	return &NullableMosaicRestrictionTypeEnum{value: val, isSet: true}
}

func (v NullableMosaicRestrictionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMosaicRestrictionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

