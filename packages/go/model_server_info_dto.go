/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServerInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInfoDTO{}

// ServerInfoDTO struct for ServerInfoDTO
type ServerInfoDTO struct {
	ServerInfo ServerDTO `json:"serverInfo"`
}

type _ServerInfoDTO ServerInfoDTO

// NewServerInfoDTO instantiates a new ServerInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInfoDTO(serverInfo ServerDTO) *ServerInfoDTO {
	this := ServerInfoDTO{}
	this.ServerInfo = serverInfo
	return &this
}

// NewServerInfoDTOWithDefaults instantiates a new ServerInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInfoDTOWithDefaults() *ServerInfoDTO {
	this := ServerInfoDTO{}
	return &this
}

// GetServerInfo returns the ServerInfo field value
func (o *ServerInfoDTO) GetServerInfo() ServerDTO {
	if o == nil {
		var ret ServerDTO
		return ret
	}

	return o.ServerInfo
}

// GetServerInfoOk returns a tuple with the ServerInfo field value
// and a boolean to check if the value has been set.
func (o *ServerInfoDTO) GetServerInfoOk() (*ServerDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerInfo, true
}

// SetServerInfo sets field value
func (o *ServerInfoDTO) SetServerInfo(v ServerDTO) {
	o.ServerInfo = v
}

func (o ServerInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverInfo"] = o.ServerInfo
	return toSerialize, nil
}

func (o *ServerInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInfoDTO := _ServerInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerInfoDTO)

	if err != nil {
		return err
	}

	*o = ServerInfoDTO(varServerInfoDTO)

	return err
}

type NullableServerInfoDTO struct {
	value *ServerInfoDTO
	isSet bool
}

func (v NullableServerInfoDTO) Get() *ServerInfoDTO {
	return v.value
}

func (v *NullableServerInfoDTO) Set(val *ServerInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInfoDTO(val *ServerInfoDTO) *NullableServerInfoDTO {
	return &NullableServerInfoDTO{value: val, isSet: true}
}

func (v NullableServerInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


