/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// LinkActionEnum Type of action: * 0 - Unlink. * 1 - Link. 
type LinkActionEnum int32

// List of LinkActionEnum
const (
	_0 LinkActionEnum = 0
	_1 LinkActionEnum = 1
)

// All allowed values of LinkActionEnum enum
var AllowedLinkActionEnumEnumValues = []LinkActionEnum{
	0,
	1,
}

func (v *LinkActionEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LinkActionEnum(value)
	for _, existing := range AllowedLinkActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LinkActionEnum", value)
}

// NewLinkActionEnumFromValue returns a pointer to a valid LinkActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkActionEnumFromValue(v int32) (*LinkActionEnum, error) {
	ev := LinkActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LinkActionEnum: valid values are %v", v, AllowedLinkActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkActionEnum) IsValid() bool {
	for _, existing := range AllowedLinkActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LinkActionEnum value
func (v LinkActionEnum) Ptr() *LinkActionEnum {
	return &v
}

type NullableLinkActionEnum struct {
	value *LinkActionEnum
	isSet bool
}

func (v NullableLinkActionEnum) Get() *LinkActionEnum {
	return v.value
}

func (v *NullableLinkActionEnum) Set(val *LinkActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkActionEnum(val *LinkActionEnum) *NullableLinkActionEnum {
	return &NullableLinkActionEnum{value: val, isSet: true}
}

func (v NullableLinkActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

