/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// PositionEnum Position relative to the proofHash being evaluated.
type PositionEnum string

// List of PositionEnum
const (
	LEFT PositionEnum = "left"
	RIGHT PositionEnum = "right"
)

// All allowed values of PositionEnum enum
var AllowedPositionEnumEnumValues = []PositionEnum{
	"left",
	"right",
}

func (v *PositionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PositionEnum(value)
	for _, existing := range AllowedPositionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PositionEnum", value)
}

// NewPositionEnumFromValue returns a pointer to a valid PositionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPositionEnumFromValue(v string) (*PositionEnum, error) {
	ev := PositionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PositionEnum: valid values are %v", v, AllowedPositionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PositionEnum) IsValid() bool {
	for _, existing := range AllowedPositionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PositionEnum value
func (v PositionEnum) Ptr() *PositionEnum {
	return &v
}

type NullablePositionEnum struct {
	value *PositionEnum
	isSet bool
}

func (v NullablePositionEnum) Get() *PositionEnum {
	return v.value
}

func (v *NullablePositionEnum) Set(val *PositionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionEnum(val *PositionEnum) *NullablePositionEnum {
	return &NullablePositionEnum{value: val, isSet: true}
}

func (v NullablePositionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

