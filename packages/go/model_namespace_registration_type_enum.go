/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// NamespaceRegistrationTypeEnum Type of namespace: * 0 - Root namespace. * 1 - Subnamespace. 
type NamespaceRegistrationTypeEnum int32

// List of NamespaceRegistrationTypeEnum
const (
	_0 NamespaceRegistrationTypeEnum = 0
	_1 NamespaceRegistrationTypeEnum = 1
)

// All allowed values of NamespaceRegistrationTypeEnum enum
var AllowedNamespaceRegistrationTypeEnumEnumValues = []NamespaceRegistrationTypeEnum{
	0,
	1,
}

func (v *NamespaceRegistrationTypeEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NamespaceRegistrationTypeEnum(value)
	for _, existing := range AllowedNamespaceRegistrationTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NamespaceRegistrationTypeEnum", value)
}

// NewNamespaceRegistrationTypeEnumFromValue returns a pointer to a valid NamespaceRegistrationTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNamespaceRegistrationTypeEnumFromValue(v int32) (*NamespaceRegistrationTypeEnum, error) {
	ev := NamespaceRegistrationTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NamespaceRegistrationTypeEnum: valid values are %v", v, AllowedNamespaceRegistrationTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NamespaceRegistrationTypeEnum) IsValid() bool {
	for _, existing := range AllowedNamespaceRegistrationTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NamespaceRegistrationTypeEnum value
func (v NamespaceRegistrationTypeEnum) Ptr() *NamespaceRegistrationTypeEnum {
	return &v
}

type NullableNamespaceRegistrationTypeEnum struct {
	value *NamespaceRegistrationTypeEnum
	isSet bool
}

func (v NullableNamespaceRegistrationTypeEnum) Get() *NamespaceRegistrationTypeEnum {
	return v.value
}

func (v *NullableNamespaceRegistrationTypeEnum) Set(val *NamespaceRegistrationTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceRegistrationTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceRegistrationTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceRegistrationTypeEnum(val *NamespaceRegistrationTypeEnum) *NullableNamespaceRegistrationTypeEnum {
	return &NullableNamespaceRegistrationTypeEnum{value: val, isSet: true}
}

func (v NullableNamespaceRegistrationTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceRegistrationTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

