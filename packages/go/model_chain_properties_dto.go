/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the ChainPropertiesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChainPropertiesDTO{}

// ChainPropertiesDTO Chain related configuration properties.
type ChainPropertiesDTO struct {
	// Set to true if block chain should calculate state hashes so that state is fully verifiable at each block.
	EnableVerifiableState *bool `json:"enableVerifiableState,omitempty"`
	// Set to true if block chain should calculate receipts so that state changes are fully verifiable at each block.
	EnableVerifiableReceipts *bool `json:"enableVerifiableReceipts,omitempty"`
	// Mosaic id used as primary chain currency.
	CurrencyMosaicId *string `json:"currencyMosaicId,omitempty"`
	// Mosaic id used to provide harvesting ability.
	HarvestingMosaicId *string `json:"harvestingMosaicId,omitempty"`
	// Targeted time between blocks.
	BlockGenerationTargetTime *string `json:"blockGenerationTargetTime,omitempty"`
	// A higher value makes the network more biased.
	BlockTimeSmoothingFactor *string `json:"blockTimeSmoothingFactor,omitempty"`
	// Number of blocks between successive finalization attempts.
	BlockFinalizationInterval *string `json:"blockFinalizationInterval,omitempty"`
	// Number of blocks that should be treated as a group for importance purposes.
	ImportanceGrouping *string `json:"importanceGrouping,omitempty"`
	// Percentage of importance resulting from fee generation and beneficiary usage.
	ImportanceActivityPercentage *string `json:"importanceActivityPercentage,omitempty"`
	// Maximum number of blocks that can be rolled back.
	MaxRollbackBlocks *string `json:"maxRollbackBlocks,omitempty"`
	// Maximum number of blocks to use in a difficulty calculation.
	MaxDifficultyBlocks *string `json:"maxDifficultyBlocks,omitempty"`
	// Default multiplier to use for dynamic fees.
	DefaultDynamicFeeMultiplier *string `json:"defaultDynamicFeeMultiplier,omitempty"`
	// Maximum lifetime a transaction can have before it expires.
	MaxTransactionLifetime *string `json:"maxTransactionLifetime,omitempty"`
	// Maximum future time of a block that can be accepted.
	MaxBlockFutureTime *string `json:"maxBlockFutureTime,omitempty"`
	// Initial currency atomic units available in the network.
	InitialCurrencyAtomicUnits *string `json:"initialCurrencyAtomicUnits,omitempty"`
	// Maximum atomic units (total-supply * 10 ^ divisibility) of a mosaic allowed in the network.
	MaxMosaicAtomicUnits *string `json:"maxMosaicAtomicUnits,omitempty"`
	// Total whole importance units available in the network.
	TotalChainImportance *string `json:"totalChainImportance,omitempty"`
	// Minimum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
	MinHarvesterBalance *string `json:"minHarvesterBalance,omitempty"`
	// Maximum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
	MaxHarvesterBalance *string `json:"maxHarvesterBalance,omitempty"`
	// Minimum number of harvesting mosaic atomic units needed for an account to be eligible for voting.
	MinVoterBalance *string `json:"minVoterBalance,omitempty"`
	// Maximum number of voting keys that can be registered at once per account.
	MaxVotingKeysPerAccount *string `json:"maxVotingKeysPerAccount,omitempty"`
	// Minimum number of finalization rounds for which voting key can be registered.
	MinVotingKeyLifetime *string `json:"minVotingKeyLifetime,omitempty"`
	// Maximum number of finalization rounds for which voting key can be registered.
	MaxVotingKeyLifetime *string `json:"maxVotingKeyLifetime,omitempty"`
	// Percentage of the harvested fee that is collected by the beneficiary account.
	HarvestBeneficiaryPercentage *string `json:"harvestBeneficiaryPercentage,omitempty"`
	// Percentage of the harvested fee that is collected by the network.
	HarvestNetworkPercentage *string `json:"harvestNetworkPercentage,omitempty"`
	// Address encoded using a 32-character set.
	HarvestNetworkFeeSinkAddress *string `json:"harvestNetworkFeeSinkAddress,omitempty"`
	// Number of blocks between cache pruning.
	BlockPruneInterval *string `json:"blockPruneInterval,omitempty"`
	// Maximum number of transactions per block.
	MaxTransactionsPerBlock *string `json:"maxTransactionsPerBlock,omitempty"`
}

// NewChainPropertiesDTO instantiates a new ChainPropertiesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainPropertiesDTO() *ChainPropertiesDTO {
	this := ChainPropertiesDTO{}
	return &this
}

// NewChainPropertiesDTOWithDefaults instantiates a new ChainPropertiesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainPropertiesDTOWithDefaults() *ChainPropertiesDTO {
	this := ChainPropertiesDTO{}
	return &this
}

// GetEnableVerifiableState returns the EnableVerifiableState field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetEnableVerifiableState() bool {
	if o == nil || IsNil(o.EnableVerifiableState) {
		var ret bool
		return ret
	}
	return *o.EnableVerifiableState
}

// GetEnableVerifiableStateOk returns a tuple with the EnableVerifiableState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetEnableVerifiableStateOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVerifiableState) {
		return nil, false
	}
	return o.EnableVerifiableState, true
}

// HasEnableVerifiableState returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasEnableVerifiableState() bool {
	if o != nil && !IsNil(o.EnableVerifiableState) {
		return true
	}

	return false
}

// SetEnableVerifiableState gets a reference to the given bool and assigns it to the EnableVerifiableState field.
func (o *ChainPropertiesDTO) SetEnableVerifiableState(v bool) {
	o.EnableVerifiableState = &v
}

// GetEnableVerifiableReceipts returns the EnableVerifiableReceipts field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetEnableVerifiableReceipts() bool {
	if o == nil || IsNil(o.EnableVerifiableReceipts) {
		var ret bool
		return ret
	}
	return *o.EnableVerifiableReceipts
}

// GetEnableVerifiableReceiptsOk returns a tuple with the EnableVerifiableReceipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetEnableVerifiableReceiptsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVerifiableReceipts) {
		return nil, false
	}
	return o.EnableVerifiableReceipts, true
}

// HasEnableVerifiableReceipts returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasEnableVerifiableReceipts() bool {
	if o != nil && !IsNil(o.EnableVerifiableReceipts) {
		return true
	}

	return false
}

// SetEnableVerifiableReceipts gets a reference to the given bool and assigns it to the EnableVerifiableReceipts field.
func (o *ChainPropertiesDTO) SetEnableVerifiableReceipts(v bool) {
	o.EnableVerifiableReceipts = &v
}

// GetCurrencyMosaicId returns the CurrencyMosaicId field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetCurrencyMosaicId() string {
	if o == nil || IsNil(o.CurrencyMosaicId) {
		var ret string
		return ret
	}
	return *o.CurrencyMosaicId
}

// GetCurrencyMosaicIdOk returns a tuple with the CurrencyMosaicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetCurrencyMosaicIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyMosaicId) {
		return nil, false
	}
	return o.CurrencyMosaicId, true
}

// HasCurrencyMosaicId returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasCurrencyMosaicId() bool {
	if o != nil && !IsNil(o.CurrencyMosaicId) {
		return true
	}

	return false
}

// SetCurrencyMosaicId gets a reference to the given string and assigns it to the CurrencyMosaicId field.
func (o *ChainPropertiesDTO) SetCurrencyMosaicId(v string) {
	o.CurrencyMosaicId = &v
}

// GetHarvestingMosaicId returns the HarvestingMosaicId field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetHarvestingMosaicId() string {
	if o == nil || IsNil(o.HarvestingMosaicId) {
		var ret string
		return ret
	}
	return *o.HarvestingMosaicId
}

// GetHarvestingMosaicIdOk returns a tuple with the HarvestingMosaicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetHarvestingMosaicIdOk() (*string, bool) {
	if o == nil || IsNil(o.HarvestingMosaicId) {
		return nil, false
	}
	return o.HarvestingMosaicId, true
}

// HasHarvestingMosaicId returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasHarvestingMosaicId() bool {
	if o != nil && !IsNil(o.HarvestingMosaicId) {
		return true
	}

	return false
}

// SetHarvestingMosaicId gets a reference to the given string and assigns it to the HarvestingMosaicId field.
func (o *ChainPropertiesDTO) SetHarvestingMosaicId(v string) {
	o.HarvestingMosaicId = &v
}

// GetBlockGenerationTargetTime returns the BlockGenerationTargetTime field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetBlockGenerationTargetTime() string {
	if o == nil || IsNil(o.BlockGenerationTargetTime) {
		var ret string
		return ret
	}
	return *o.BlockGenerationTargetTime
}

// GetBlockGenerationTargetTimeOk returns a tuple with the BlockGenerationTargetTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetBlockGenerationTargetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockGenerationTargetTime) {
		return nil, false
	}
	return o.BlockGenerationTargetTime, true
}

// HasBlockGenerationTargetTime returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasBlockGenerationTargetTime() bool {
	if o != nil && !IsNil(o.BlockGenerationTargetTime) {
		return true
	}

	return false
}

// SetBlockGenerationTargetTime gets a reference to the given string and assigns it to the BlockGenerationTargetTime field.
func (o *ChainPropertiesDTO) SetBlockGenerationTargetTime(v string) {
	o.BlockGenerationTargetTime = &v
}

// GetBlockTimeSmoothingFactor returns the BlockTimeSmoothingFactor field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetBlockTimeSmoothingFactor() string {
	if o == nil || IsNil(o.BlockTimeSmoothingFactor) {
		var ret string
		return ret
	}
	return *o.BlockTimeSmoothingFactor
}

// GetBlockTimeSmoothingFactorOk returns a tuple with the BlockTimeSmoothingFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetBlockTimeSmoothingFactorOk() (*string, bool) {
	if o == nil || IsNil(o.BlockTimeSmoothingFactor) {
		return nil, false
	}
	return o.BlockTimeSmoothingFactor, true
}

// HasBlockTimeSmoothingFactor returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasBlockTimeSmoothingFactor() bool {
	if o != nil && !IsNil(o.BlockTimeSmoothingFactor) {
		return true
	}

	return false
}

// SetBlockTimeSmoothingFactor gets a reference to the given string and assigns it to the BlockTimeSmoothingFactor field.
func (o *ChainPropertiesDTO) SetBlockTimeSmoothingFactor(v string) {
	o.BlockTimeSmoothingFactor = &v
}

// GetBlockFinalizationInterval returns the BlockFinalizationInterval field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetBlockFinalizationInterval() string {
	if o == nil || IsNil(o.BlockFinalizationInterval) {
		var ret string
		return ret
	}
	return *o.BlockFinalizationInterval
}

// GetBlockFinalizationIntervalOk returns a tuple with the BlockFinalizationInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetBlockFinalizationIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.BlockFinalizationInterval) {
		return nil, false
	}
	return o.BlockFinalizationInterval, true
}

// HasBlockFinalizationInterval returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasBlockFinalizationInterval() bool {
	if o != nil && !IsNil(o.BlockFinalizationInterval) {
		return true
	}

	return false
}

// SetBlockFinalizationInterval gets a reference to the given string and assigns it to the BlockFinalizationInterval field.
func (o *ChainPropertiesDTO) SetBlockFinalizationInterval(v string) {
	o.BlockFinalizationInterval = &v
}

// GetImportanceGrouping returns the ImportanceGrouping field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetImportanceGrouping() string {
	if o == nil || IsNil(o.ImportanceGrouping) {
		var ret string
		return ret
	}
	return *o.ImportanceGrouping
}

// GetImportanceGroupingOk returns a tuple with the ImportanceGrouping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetImportanceGroupingOk() (*string, bool) {
	if o == nil || IsNil(o.ImportanceGrouping) {
		return nil, false
	}
	return o.ImportanceGrouping, true
}

// HasImportanceGrouping returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasImportanceGrouping() bool {
	if o != nil && !IsNil(o.ImportanceGrouping) {
		return true
	}

	return false
}

// SetImportanceGrouping gets a reference to the given string and assigns it to the ImportanceGrouping field.
func (o *ChainPropertiesDTO) SetImportanceGrouping(v string) {
	o.ImportanceGrouping = &v
}

// GetImportanceActivityPercentage returns the ImportanceActivityPercentage field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetImportanceActivityPercentage() string {
	if o == nil || IsNil(o.ImportanceActivityPercentage) {
		var ret string
		return ret
	}
	return *o.ImportanceActivityPercentage
}

// GetImportanceActivityPercentageOk returns a tuple with the ImportanceActivityPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetImportanceActivityPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.ImportanceActivityPercentage) {
		return nil, false
	}
	return o.ImportanceActivityPercentage, true
}

// HasImportanceActivityPercentage returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasImportanceActivityPercentage() bool {
	if o != nil && !IsNil(o.ImportanceActivityPercentage) {
		return true
	}

	return false
}

// SetImportanceActivityPercentage gets a reference to the given string and assigns it to the ImportanceActivityPercentage field.
func (o *ChainPropertiesDTO) SetImportanceActivityPercentage(v string) {
	o.ImportanceActivityPercentage = &v
}

// GetMaxRollbackBlocks returns the MaxRollbackBlocks field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxRollbackBlocks() string {
	if o == nil || IsNil(o.MaxRollbackBlocks) {
		var ret string
		return ret
	}
	return *o.MaxRollbackBlocks
}

// GetMaxRollbackBlocksOk returns a tuple with the MaxRollbackBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxRollbackBlocksOk() (*string, bool) {
	if o == nil || IsNil(o.MaxRollbackBlocks) {
		return nil, false
	}
	return o.MaxRollbackBlocks, true
}

// HasMaxRollbackBlocks returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxRollbackBlocks() bool {
	if o != nil && !IsNil(o.MaxRollbackBlocks) {
		return true
	}

	return false
}

// SetMaxRollbackBlocks gets a reference to the given string and assigns it to the MaxRollbackBlocks field.
func (o *ChainPropertiesDTO) SetMaxRollbackBlocks(v string) {
	o.MaxRollbackBlocks = &v
}

// GetMaxDifficultyBlocks returns the MaxDifficultyBlocks field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxDifficultyBlocks() string {
	if o == nil || IsNil(o.MaxDifficultyBlocks) {
		var ret string
		return ret
	}
	return *o.MaxDifficultyBlocks
}

// GetMaxDifficultyBlocksOk returns a tuple with the MaxDifficultyBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxDifficultyBlocksOk() (*string, bool) {
	if o == nil || IsNil(o.MaxDifficultyBlocks) {
		return nil, false
	}
	return o.MaxDifficultyBlocks, true
}

// HasMaxDifficultyBlocks returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxDifficultyBlocks() bool {
	if o != nil && !IsNil(o.MaxDifficultyBlocks) {
		return true
	}

	return false
}

// SetMaxDifficultyBlocks gets a reference to the given string and assigns it to the MaxDifficultyBlocks field.
func (o *ChainPropertiesDTO) SetMaxDifficultyBlocks(v string) {
	o.MaxDifficultyBlocks = &v
}

// GetDefaultDynamicFeeMultiplier returns the DefaultDynamicFeeMultiplier field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetDefaultDynamicFeeMultiplier() string {
	if o == nil || IsNil(o.DefaultDynamicFeeMultiplier) {
		var ret string
		return ret
	}
	return *o.DefaultDynamicFeeMultiplier
}

// GetDefaultDynamicFeeMultiplierOk returns a tuple with the DefaultDynamicFeeMultiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetDefaultDynamicFeeMultiplierOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultDynamicFeeMultiplier) {
		return nil, false
	}
	return o.DefaultDynamicFeeMultiplier, true
}

// HasDefaultDynamicFeeMultiplier returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasDefaultDynamicFeeMultiplier() bool {
	if o != nil && !IsNil(o.DefaultDynamicFeeMultiplier) {
		return true
	}

	return false
}

// SetDefaultDynamicFeeMultiplier gets a reference to the given string and assigns it to the DefaultDynamicFeeMultiplier field.
func (o *ChainPropertiesDTO) SetDefaultDynamicFeeMultiplier(v string) {
	o.DefaultDynamicFeeMultiplier = &v
}

// GetMaxTransactionLifetime returns the MaxTransactionLifetime field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxTransactionLifetime() string {
	if o == nil || IsNil(o.MaxTransactionLifetime) {
		var ret string
		return ret
	}
	return *o.MaxTransactionLifetime
}

// GetMaxTransactionLifetimeOk returns a tuple with the MaxTransactionLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxTransactionLifetimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxTransactionLifetime) {
		return nil, false
	}
	return o.MaxTransactionLifetime, true
}

// HasMaxTransactionLifetime returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxTransactionLifetime() bool {
	if o != nil && !IsNil(o.MaxTransactionLifetime) {
		return true
	}

	return false
}

// SetMaxTransactionLifetime gets a reference to the given string and assigns it to the MaxTransactionLifetime field.
func (o *ChainPropertiesDTO) SetMaxTransactionLifetime(v string) {
	o.MaxTransactionLifetime = &v
}

// GetMaxBlockFutureTime returns the MaxBlockFutureTime field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxBlockFutureTime() string {
	if o == nil || IsNil(o.MaxBlockFutureTime) {
		var ret string
		return ret
	}
	return *o.MaxBlockFutureTime
}

// GetMaxBlockFutureTimeOk returns a tuple with the MaxBlockFutureTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxBlockFutureTimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxBlockFutureTime) {
		return nil, false
	}
	return o.MaxBlockFutureTime, true
}

// HasMaxBlockFutureTime returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxBlockFutureTime() bool {
	if o != nil && !IsNil(o.MaxBlockFutureTime) {
		return true
	}

	return false
}

// SetMaxBlockFutureTime gets a reference to the given string and assigns it to the MaxBlockFutureTime field.
func (o *ChainPropertiesDTO) SetMaxBlockFutureTime(v string) {
	o.MaxBlockFutureTime = &v
}

// GetInitialCurrencyAtomicUnits returns the InitialCurrencyAtomicUnits field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetInitialCurrencyAtomicUnits() string {
	if o == nil || IsNil(o.InitialCurrencyAtomicUnits) {
		var ret string
		return ret
	}
	return *o.InitialCurrencyAtomicUnits
}

// GetInitialCurrencyAtomicUnitsOk returns a tuple with the InitialCurrencyAtomicUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetInitialCurrencyAtomicUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.InitialCurrencyAtomicUnits) {
		return nil, false
	}
	return o.InitialCurrencyAtomicUnits, true
}

// HasInitialCurrencyAtomicUnits returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasInitialCurrencyAtomicUnits() bool {
	if o != nil && !IsNil(o.InitialCurrencyAtomicUnits) {
		return true
	}

	return false
}

// SetInitialCurrencyAtomicUnits gets a reference to the given string and assigns it to the InitialCurrencyAtomicUnits field.
func (o *ChainPropertiesDTO) SetInitialCurrencyAtomicUnits(v string) {
	o.InitialCurrencyAtomicUnits = &v
}

// GetMaxMosaicAtomicUnits returns the MaxMosaicAtomicUnits field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxMosaicAtomicUnits() string {
	if o == nil || IsNil(o.MaxMosaicAtomicUnits) {
		var ret string
		return ret
	}
	return *o.MaxMosaicAtomicUnits
}

// GetMaxMosaicAtomicUnitsOk returns a tuple with the MaxMosaicAtomicUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxMosaicAtomicUnitsOk() (*string, bool) {
	if o == nil || IsNil(o.MaxMosaicAtomicUnits) {
		return nil, false
	}
	return o.MaxMosaicAtomicUnits, true
}

// HasMaxMosaicAtomicUnits returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxMosaicAtomicUnits() bool {
	if o != nil && !IsNil(o.MaxMosaicAtomicUnits) {
		return true
	}

	return false
}

// SetMaxMosaicAtomicUnits gets a reference to the given string and assigns it to the MaxMosaicAtomicUnits field.
func (o *ChainPropertiesDTO) SetMaxMosaicAtomicUnits(v string) {
	o.MaxMosaicAtomicUnits = &v
}

// GetTotalChainImportance returns the TotalChainImportance field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetTotalChainImportance() string {
	if o == nil || IsNil(o.TotalChainImportance) {
		var ret string
		return ret
	}
	return *o.TotalChainImportance
}

// GetTotalChainImportanceOk returns a tuple with the TotalChainImportance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetTotalChainImportanceOk() (*string, bool) {
	if o == nil || IsNil(o.TotalChainImportance) {
		return nil, false
	}
	return o.TotalChainImportance, true
}

// HasTotalChainImportance returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasTotalChainImportance() bool {
	if o != nil && !IsNil(o.TotalChainImportance) {
		return true
	}

	return false
}

// SetTotalChainImportance gets a reference to the given string and assigns it to the TotalChainImportance field.
func (o *ChainPropertiesDTO) SetTotalChainImportance(v string) {
	o.TotalChainImportance = &v
}

// GetMinHarvesterBalance returns the MinHarvesterBalance field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMinHarvesterBalance() string {
	if o == nil || IsNil(o.MinHarvesterBalance) {
		var ret string
		return ret
	}
	return *o.MinHarvesterBalance
}

// GetMinHarvesterBalanceOk returns a tuple with the MinHarvesterBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMinHarvesterBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.MinHarvesterBalance) {
		return nil, false
	}
	return o.MinHarvesterBalance, true
}

// HasMinHarvesterBalance returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMinHarvesterBalance() bool {
	if o != nil && !IsNil(o.MinHarvesterBalance) {
		return true
	}

	return false
}

// SetMinHarvesterBalance gets a reference to the given string and assigns it to the MinHarvesterBalance field.
func (o *ChainPropertiesDTO) SetMinHarvesterBalance(v string) {
	o.MinHarvesterBalance = &v
}

// GetMaxHarvesterBalance returns the MaxHarvesterBalance field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxHarvesterBalance() string {
	if o == nil || IsNil(o.MaxHarvesterBalance) {
		var ret string
		return ret
	}
	return *o.MaxHarvesterBalance
}

// GetMaxHarvesterBalanceOk returns a tuple with the MaxHarvesterBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxHarvesterBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.MaxHarvesterBalance) {
		return nil, false
	}
	return o.MaxHarvesterBalance, true
}

// HasMaxHarvesterBalance returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxHarvesterBalance() bool {
	if o != nil && !IsNil(o.MaxHarvesterBalance) {
		return true
	}

	return false
}

// SetMaxHarvesterBalance gets a reference to the given string and assigns it to the MaxHarvesterBalance field.
func (o *ChainPropertiesDTO) SetMaxHarvesterBalance(v string) {
	o.MaxHarvesterBalance = &v
}

// GetMinVoterBalance returns the MinVoterBalance field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMinVoterBalance() string {
	if o == nil || IsNil(o.MinVoterBalance) {
		var ret string
		return ret
	}
	return *o.MinVoterBalance
}

// GetMinVoterBalanceOk returns a tuple with the MinVoterBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMinVoterBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.MinVoterBalance) {
		return nil, false
	}
	return o.MinVoterBalance, true
}

// HasMinVoterBalance returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMinVoterBalance() bool {
	if o != nil && !IsNil(o.MinVoterBalance) {
		return true
	}

	return false
}

// SetMinVoterBalance gets a reference to the given string and assigns it to the MinVoterBalance field.
func (o *ChainPropertiesDTO) SetMinVoterBalance(v string) {
	o.MinVoterBalance = &v
}

// GetMaxVotingKeysPerAccount returns the MaxVotingKeysPerAccount field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxVotingKeysPerAccount() string {
	if o == nil || IsNil(o.MaxVotingKeysPerAccount) {
		var ret string
		return ret
	}
	return *o.MaxVotingKeysPerAccount
}

// GetMaxVotingKeysPerAccountOk returns a tuple with the MaxVotingKeysPerAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxVotingKeysPerAccountOk() (*string, bool) {
	if o == nil || IsNil(o.MaxVotingKeysPerAccount) {
		return nil, false
	}
	return o.MaxVotingKeysPerAccount, true
}

// HasMaxVotingKeysPerAccount returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxVotingKeysPerAccount() bool {
	if o != nil && !IsNil(o.MaxVotingKeysPerAccount) {
		return true
	}

	return false
}

// SetMaxVotingKeysPerAccount gets a reference to the given string and assigns it to the MaxVotingKeysPerAccount field.
func (o *ChainPropertiesDTO) SetMaxVotingKeysPerAccount(v string) {
	o.MaxVotingKeysPerAccount = &v
}

// GetMinVotingKeyLifetime returns the MinVotingKeyLifetime field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMinVotingKeyLifetime() string {
	if o == nil || IsNil(o.MinVotingKeyLifetime) {
		var ret string
		return ret
	}
	return *o.MinVotingKeyLifetime
}

// GetMinVotingKeyLifetimeOk returns a tuple with the MinVotingKeyLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMinVotingKeyLifetimeOk() (*string, bool) {
	if o == nil || IsNil(o.MinVotingKeyLifetime) {
		return nil, false
	}
	return o.MinVotingKeyLifetime, true
}

// HasMinVotingKeyLifetime returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMinVotingKeyLifetime() bool {
	if o != nil && !IsNil(o.MinVotingKeyLifetime) {
		return true
	}

	return false
}

// SetMinVotingKeyLifetime gets a reference to the given string and assigns it to the MinVotingKeyLifetime field.
func (o *ChainPropertiesDTO) SetMinVotingKeyLifetime(v string) {
	o.MinVotingKeyLifetime = &v
}

// GetMaxVotingKeyLifetime returns the MaxVotingKeyLifetime field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxVotingKeyLifetime() string {
	if o == nil || IsNil(o.MaxVotingKeyLifetime) {
		var ret string
		return ret
	}
	return *o.MaxVotingKeyLifetime
}

// GetMaxVotingKeyLifetimeOk returns a tuple with the MaxVotingKeyLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxVotingKeyLifetimeOk() (*string, bool) {
	if o == nil || IsNil(o.MaxVotingKeyLifetime) {
		return nil, false
	}
	return o.MaxVotingKeyLifetime, true
}

// HasMaxVotingKeyLifetime returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxVotingKeyLifetime() bool {
	if o != nil && !IsNil(o.MaxVotingKeyLifetime) {
		return true
	}

	return false
}

// SetMaxVotingKeyLifetime gets a reference to the given string and assigns it to the MaxVotingKeyLifetime field.
func (o *ChainPropertiesDTO) SetMaxVotingKeyLifetime(v string) {
	o.MaxVotingKeyLifetime = &v
}

// GetHarvestBeneficiaryPercentage returns the HarvestBeneficiaryPercentage field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetHarvestBeneficiaryPercentage() string {
	if o == nil || IsNil(o.HarvestBeneficiaryPercentage) {
		var ret string
		return ret
	}
	return *o.HarvestBeneficiaryPercentage
}

// GetHarvestBeneficiaryPercentageOk returns a tuple with the HarvestBeneficiaryPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetHarvestBeneficiaryPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.HarvestBeneficiaryPercentage) {
		return nil, false
	}
	return o.HarvestBeneficiaryPercentage, true
}

// HasHarvestBeneficiaryPercentage returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasHarvestBeneficiaryPercentage() bool {
	if o != nil && !IsNil(o.HarvestBeneficiaryPercentage) {
		return true
	}

	return false
}

// SetHarvestBeneficiaryPercentage gets a reference to the given string and assigns it to the HarvestBeneficiaryPercentage field.
func (o *ChainPropertiesDTO) SetHarvestBeneficiaryPercentage(v string) {
	o.HarvestBeneficiaryPercentage = &v
}

// GetHarvestNetworkPercentage returns the HarvestNetworkPercentage field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetHarvestNetworkPercentage() string {
	if o == nil || IsNil(o.HarvestNetworkPercentage) {
		var ret string
		return ret
	}
	return *o.HarvestNetworkPercentage
}

// GetHarvestNetworkPercentageOk returns a tuple with the HarvestNetworkPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetHarvestNetworkPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.HarvestNetworkPercentage) {
		return nil, false
	}
	return o.HarvestNetworkPercentage, true
}

// HasHarvestNetworkPercentage returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasHarvestNetworkPercentage() bool {
	if o != nil && !IsNil(o.HarvestNetworkPercentage) {
		return true
	}

	return false
}

// SetHarvestNetworkPercentage gets a reference to the given string and assigns it to the HarvestNetworkPercentage field.
func (o *ChainPropertiesDTO) SetHarvestNetworkPercentage(v string) {
	o.HarvestNetworkPercentage = &v
}

// GetHarvestNetworkFeeSinkAddress returns the HarvestNetworkFeeSinkAddress field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetHarvestNetworkFeeSinkAddress() string {
	if o == nil || IsNil(o.HarvestNetworkFeeSinkAddress) {
		var ret string
		return ret
	}
	return *o.HarvestNetworkFeeSinkAddress
}

// GetHarvestNetworkFeeSinkAddressOk returns a tuple with the HarvestNetworkFeeSinkAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetHarvestNetworkFeeSinkAddressOk() (*string, bool) {
	if o == nil || IsNil(o.HarvestNetworkFeeSinkAddress) {
		return nil, false
	}
	return o.HarvestNetworkFeeSinkAddress, true
}

// HasHarvestNetworkFeeSinkAddress returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasHarvestNetworkFeeSinkAddress() bool {
	if o != nil && !IsNil(o.HarvestNetworkFeeSinkAddress) {
		return true
	}

	return false
}

// SetHarvestNetworkFeeSinkAddress gets a reference to the given string and assigns it to the HarvestNetworkFeeSinkAddress field.
func (o *ChainPropertiesDTO) SetHarvestNetworkFeeSinkAddress(v string) {
	o.HarvestNetworkFeeSinkAddress = &v
}

// GetBlockPruneInterval returns the BlockPruneInterval field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetBlockPruneInterval() string {
	if o == nil || IsNil(o.BlockPruneInterval) {
		var ret string
		return ret
	}
	return *o.BlockPruneInterval
}

// GetBlockPruneIntervalOk returns a tuple with the BlockPruneInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetBlockPruneIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.BlockPruneInterval) {
		return nil, false
	}
	return o.BlockPruneInterval, true
}

// HasBlockPruneInterval returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasBlockPruneInterval() bool {
	if o != nil && !IsNil(o.BlockPruneInterval) {
		return true
	}

	return false
}

// SetBlockPruneInterval gets a reference to the given string and assigns it to the BlockPruneInterval field.
func (o *ChainPropertiesDTO) SetBlockPruneInterval(v string) {
	o.BlockPruneInterval = &v
}

// GetMaxTransactionsPerBlock returns the MaxTransactionsPerBlock field value if set, zero value otherwise.
func (o *ChainPropertiesDTO) GetMaxTransactionsPerBlock() string {
	if o == nil || IsNil(o.MaxTransactionsPerBlock) {
		var ret string
		return ret
	}
	return *o.MaxTransactionsPerBlock
}

// GetMaxTransactionsPerBlockOk returns a tuple with the MaxTransactionsPerBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChainPropertiesDTO) GetMaxTransactionsPerBlockOk() (*string, bool) {
	if o == nil || IsNil(o.MaxTransactionsPerBlock) {
		return nil, false
	}
	return o.MaxTransactionsPerBlock, true
}

// HasMaxTransactionsPerBlock returns a boolean if a field has been set.
func (o *ChainPropertiesDTO) HasMaxTransactionsPerBlock() bool {
	if o != nil && !IsNil(o.MaxTransactionsPerBlock) {
		return true
	}

	return false
}

// SetMaxTransactionsPerBlock gets a reference to the given string and assigns it to the MaxTransactionsPerBlock field.
func (o *ChainPropertiesDTO) SetMaxTransactionsPerBlock(v string) {
	o.MaxTransactionsPerBlock = &v
}

func (o ChainPropertiesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChainPropertiesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableVerifiableState) {
		toSerialize["enableVerifiableState"] = o.EnableVerifiableState
	}
	if !IsNil(o.EnableVerifiableReceipts) {
		toSerialize["enableVerifiableReceipts"] = o.EnableVerifiableReceipts
	}
	if !IsNil(o.CurrencyMosaicId) {
		toSerialize["currencyMosaicId"] = o.CurrencyMosaicId
	}
	if !IsNil(o.HarvestingMosaicId) {
		toSerialize["harvestingMosaicId"] = o.HarvestingMosaicId
	}
	if !IsNil(o.BlockGenerationTargetTime) {
		toSerialize["blockGenerationTargetTime"] = o.BlockGenerationTargetTime
	}
	if !IsNil(o.BlockTimeSmoothingFactor) {
		toSerialize["blockTimeSmoothingFactor"] = o.BlockTimeSmoothingFactor
	}
	if !IsNil(o.BlockFinalizationInterval) {
		toSerialize["blockFinalizationInterval"] = o.BlockFinalizationInterval
	}
	if !IsNil(o.ImportanceGrouping) {
		toSerialize["importanceGrouping"] = o.ImportanceGrouping
	}
	if !IsNil(o.ImportanceActivityPercentage) {
		toSerialize["importanceActivityPercentage"] = o.ImportanceActivityPercentage
	}
	if !IsNil(o.MaxRollbackBlocks) {
		toSerialize["maxRollbackBlocks"] = o.MaxRollbackBlocks
	}
	if !IsNil(o.MaxDifficultyBlocks) {
		toSerialize["maxDifficultyBlocks"] = o.MaxDifficultyBlocks
	}
	if !IsNil(o.DefaultDynamicFeeMultiplier) {
		toSerialize["defaultDynamicFeeMultiplier"] = o.DefaultDynamicFeeMultiplier
	}
	if !IsNil(o.MaxTransactionLifetime) {
		toSerialize["maxTransactionLifetime"] = o.MaxTransactionLifetime
	}
	if !IsNil(o.MaxBlockFutureTime) {
		toSerialize["maxBlockFutureTime"] = o.MaxBlockFutureTime
	}
	if !IsNil(o.InitialCurrencyAtomicUnits) {
		toSerialize["initialCurrencyAtomicUnits"] = o.InitialCurrencyAtomicUnits
	}
	if !IsNil(o.MaxMosaicAtomicUnits) {
		toSerialize["maxMosaicAtomicUnits"] = o.MaxMosaicAtomicUnits
	}
	if !IsNil(o.TotalChainImportance) {
		toSerialize["totalChainImportance"] = o.TotalChainImportance
	}
	if !IsNil(o.MinHarvesterBalance) {
		toSerialize["minHarvesterBalance"] = o.MinHarvesterBalance
	}
	if !IsNil(o.MaxHarvesterBalance) {
		toSerialize["maxHarvesterBalance"] = o.MaxHarvesterBalance
	}
	if !IsNil(o.MinVoterBalance) {
		toSerialize["minVoterBalance"] = o.MinVoterBalance
	}
	if !IsNil(o.MaxVotingKeysPerAccount) {
		toSerialize["maxVotingKeysPerAccount"] = o.MaxVotingKeysPerAccount
	}
	if !IsNil(o.MinVotingKeyLifetime) {
		toSerialize["minVotingKeyLifetime"] = o.MinVotingKeyLifetime
	}
	if !IsNil(o.MaxVotingKeyLifetime) {
		toSerialize["maxVotingKeyLifetime"] = o.MaxVotingKeyLifetime
	}
	if !IsNil(o.HarvestBeneficiaryPercentage) {
		toSerialize["harvestBeneficiaryPercentage"] = o.HarvestBeneficiaryPercentage
	}
	if !IsNil(o.HarvestNetworkPercentage) {
		toSerialize["harvestNetworkPercentage"] = o.HarvestNetworkPercentage
	}
	if !IsNil(o.HarvestNetworkFeeSinkAddress) {
		toSerialize["harvestNetworkFeeSinkAddress"] = o.HarvestNetworkFeeSinkAddress
	}
	if !IsNil(o.BlockPruneInterval) {
		toSerialize["blockPruneInterval"] = o.BlockPruneInterval
	}
	if !IsNil(o.MaxTransactionsPerBlock) {
		toSerialize["maxTransactionsPerBlock"] = o.MaxTransactionsPerBlock
	}
	return toSerialize, nil
}

type NullableChainPropertiesDTO struct {
	value *ChainPropertiesDTO
	isSet bool
}

func (v NullableChainPropertiesDTO) Get() *ChainPropertiesDTO {
	return v.value
}

func (v *NullableChainPropertiesDTO) Set(val *ChainPropertiesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableChainPropertiesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableChainPropertiesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainPropertiesDTO(val *ChainPropertiesDTO) *NullableChainPropertiesDTO {
	return &NullableChainPropertiesDTO{value: val, isSet: true}
}

func (v NullableChainPropertiesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainPropertiesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


