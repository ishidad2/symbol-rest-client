/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetworkConfigurationDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkConfigurationDTO{}

// NetworkConfigurationDTO struct for NetworkConfigurationDTO
type NetworkConfigurationDTO struct {
	Network NetworkPropertiesDTO `json:"network"`
	Chain ChainPropertiesDTO `json:"chain"`
	Plugins PluginsPropertiesDTO `json:"plugins"`
}

type _NetworkConfigurationDTO NetworkConfigurationDTO

// NewNetworkConfigurationDTO instantiates a new NetworkConfigurationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkConfigurationDTO(network NetworkPropertiesDTO, chain ChainPropertiesDTO, plugins PluginsPropertiesDTO) *NetworkConfigurationDTO {
	this := NetworkConfigurationDTO{}
	this.Network = network
	this.Chain = chain
	this.Plugins = plugins
	return &this
}

// NewNetworkConfigurationDTOWithDefaults instantiates a new NetworkConfigurationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkConfigurationDTOWithDefaults() *NetworkConfigurationDTO {
	this := NetworkConfigurationDTO{}
	return &this
}

// GetNetwork returns the Network field value
func (o *NetworkConfigurationDTO) GetNetwork() NetworkPropertiesDTO {
	if o == nil {
		var ret NetworkPropertiesDTO
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *NetworkConfigurationDTO) GetNetworkOk() (*NetworkPropertiesDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *NetworkConfigurationDTO) SetNetwork(v NetworkPropertiesDTO) {
	o.Network = v
}

// GetChain returns the Chain field value
func (o *NetworkConfigurationDTO) GetChain() ChainPropertiesDTO {
	if o == nil {
		var ret ChainPropertiesDTO
		return ret
	}

	return o.Chain
}

// GetChainOk returns a tuple with the Chain field value
// and a boolean to check if the value has been set.
func (o *NetworkConfigurationDTO) GetChainOk() (*ChainPropertiesDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chain, true
}

// SetChain sets field value
func (o *NetworkConfigurationDTO) SetChain(v ChainPropertiesDTO) {
	o.Chain = v
}

// GetPlugins returns the Plugins field value
func (o *NetworkConfigurationDTO) GetPlugins() PluginsPropertiesDTO {
	if o == nil {
		var ret PluginsPropertiesDTO
		return ret
	}

	return o.Plugins
}

// GetPluginsOk returns a tuple with the Plugins field value
// and a boolean to check if the value has been set.
func (o *NetworkConfigurationDTO) GetPluginsOk() (*PluginsPropertiesDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plugins, true
}

// SetPlugins sets field value
func (o *NetworkConfigurationDTO) SetPlugins(v PluginsPropertiesDTO) {
	o.Plugins = v
}

func (o NetworkConfigurationDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkConfigurationDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network"] = o.Network
	toSerialize["chain"] = o.Chain
	toSerialize["plugins"] = o.Plugins
	return toSerialize, nil
}

func (o *NetworkConfigurationDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network",
		"chain",
		"plugins",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkConfigurationDTO := _NetworkConfigurationDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkConfigurationDTO)

	if err != nil {
		return err
	}

	*o = NetworkConfigurationDTO(varNetworkConfigurationDTO)

	return err
}

type NullableNetworkConfigurationDTO struct {
	value *NetworkConfigurationDTO
	isSet bool
}

func (v NullableNetworkConfigurationDTO) Get() *NetworkConfigurationDTO {
	return v.value
}

func (v *NullableNetworkConfigurationDTO) Set(val *NetworkConfigurationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkConfigurationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkConfigurationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkConfigurationDTO(val *NetworkConfigurationDTO) *NullableNetworkConfigurationDTO {
	return &NullableNetworkConfigurationDTO{value: val, isSet: true}
}

func (v NullableNetworkConfigurationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkConfigurationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


