/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddressAliasTransactionBodyDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressAliasTransactionBodyDTO{}

// AddressAliasTransactionBodyDTO struct for AddressAliasTransactionBodyDTO
type AddressAliasTransactionBodyDTO struct {
	// Namespace identifier.
	NamespaceId string `json:"namespaceId"`
	// Address encoded using a 32-character set.
	Address string `json:"address"`
	AliasAction AliasActionEnum `json:"aliasAction"`
}

type _AddressAliasTransactionBodyDTO AddressAliasTransactionBodyDTO

// NewAddressAliasTransactionBodyDTO instantiates a new AddressAliasTransactionBodyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressAliasTransactionBodyDTO(namespaceId string, address string, aliasAction AliasActionEnum) *AddressAliasTransactionBodyDTO {
	this := AddressAliasTransactionBodyDTO{}
	this.NamespaceId = namespaceId
	this.Address = address
	this.AliasAction = aliasAction
	return &this
}

// NewAddressAliasTransactionBodyDTOWithDefaults instantiates a new AddressAliasTransactionBodyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressAliasTransactionBodyDTOWithDefaults() *AddressAliasTransactionBodyDTO {
	this := AddressAliasTransactionBodyDTO{}
	return &this
}

// GetNamespaceId returns the NamespaceId field value
func (o *AddressAliasTransactionBodyDTO) GetNamespaceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceId
}

// GetNamespaceIdOk returns a tuple with the NamespaceId field value
// and a boolean to check if the value has been set.
func (o *AddressAliasTransactionBodyDTO) GetNamespaceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceId, true
}

// SetNamespaceId sets field value
func (o *AddressAliasTransactionBodyDTO) SetNamespaceId(v string) {
	o.NamespaceId = v
}

// GetAddress returns the Address field value
func (o *AddressAliasTransactionBodyDTO) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AddressAliasTransactionBodyDTO) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AddressAliasTransactionBodyDTO) SetAddress(v string) {
	o.Address = v
}

// GetAliasAction returns the AliasAction field value
func (o *AddressAliasTransactionBodyDTO) GetAliasAction() AliasActionEnum {
	if o == nil {
		var ret AliasActionEnum
		return ret
	}

	return o.AliasAction
}

// GetAliasActionOk returns a tuple with the AliasAction field value
// and a boolean to check if the value has been set.
func (o *AddressAliasTransactionBodyDTO) GetAliasActionOk() (*AliasActionEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AliasAction, true
}

// SetAliasAction sets field value
func (o *AddressAliasTransactionBodyDTO) SetAliasAction(v AliasActionEnum) {
	o.AliasAction = v
}

func (o AddressAliasTransactionBodyDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressAliasTransactionBodyDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespaceId"] = o.NamespaceId
	toSerialize["address"] = o.Address
	toSerialize["aliasAction"] = o.AliasAction
	return toSerialize, nil
}

func (o *AddressAliasTransactionBodyDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespaceId",
		"address",
		"aliasAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddressAliasTransactionBodyDTO := _AddressAliasTransactionBodyDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddressAliasTransactionBodyDTO)

	if err != nil {
		return err
	}

	*o = AddressAliasTransactionBodyDTO(varAddressAliasTransactionBodyDTO)

	return err
}

type NullableAddressAliasTransactionBodyDTO struct {
	value *AddressAliasTransactionBodyDTO
	isSet bool
}

func (v NullableAddressAliasTransactionBodyDTO) Get() *AddressAliasTransactionBodyDTO {
	return v.value
}

func (v *NullableAddressAliasTransactionBodyDTO) Set(val *AddressAliasTransactionBodyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressAliasTransactionBodyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressAliasTransactionBodyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressAliasTransactionBodyDTO(val *AddressAliasTransactionBodyDTO) *NullableAddressAliasTransactionBodyDTO {
	return &NullableAddressAliasTransactionBodyDTO{value: val, isSet: true}
}

func (v NullableAddressAliasTransactionBodyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressAliasTransactionBodyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


