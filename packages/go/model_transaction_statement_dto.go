/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionStatementDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionStatementDTO{}

// TransactionStatementDTO struct for TransactionStatementDTO
type TransactionStatementDTO struct {
	// Height of the blockchain.
	Height string `json:"height"`
	Source SourceDTO `json:"source"`
	// Array of receipts.
	Receipts []TransactionStatementDTOReceiptsInner `json:"receipts"`
}

type _TransactionStatementDTO TransactionStatementDTO

// NewTransactionStatementDTO instantiates a new TransactionStatementDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionStatementDTO(height string, source SourceDTO, receipts []TransactionStatementDTOReceiptsInner) *TransactionStatementDTO {
	this := TransactionStatementDTO{}
	this.Height = height
	this.Source = source
	this.Receipts = receipts
	return &this
}

// NewTransactionStatementDTOWithDefaults instantiates a new TransactionStatementDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionStatementDTOWithDefaults() *TransactionStatementDTO {
	this := TransactionStatementDTO{}
	return &this
}

// GetHeight returns the Height field value
func (o *TransactionStatementDTO) GetHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *TransactionStatementDTO) GetHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *TransactionStatementDTO) SetHeight(v string) {
	o.Height = v
}

// GetSource returns the Source field value
func (o *TransactionStatementDTO) GetSource() SourceDTO {
	if o == nil {
		var ret SourceDTO
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TransactionStatementDTO) GetSourceOk() (*SourceDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *TransactionStatementDTO) SetSource(v SourceDTO) {
	o.Source = v
}

// GetReceipts returns the Receipts field value
func (o *TransactionStatementDTO) GetReceipts() []TransactionStatementDTOReceiptsInner {
	if o == nil {
		var ret []TransactionStatementDTOReceiptsInner
		return ret
	}

	return o.Receipts
}

// GetReceiptsOk returns a tuple with the Receipts field value
// and a boolean to check if the value has been set.
func (o *TransactionStatementDTO) GetReceiptsOk() ([]TransactionStatementDTOReceiptsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Receipts, true
}

// SetReceipts sets field value
func (o *TransactionStatementDTO) SetReceipts(v []TransactionStatementDTOReceiptsInner) {
	o.Receipts = v
}

func (o TransactionStatementDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionStatementDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["height"] = o.Height
	toSerialize["source"] = o.Source
	toSerialize["receipts"] = o.Receipts
	return toSerialize, nil
}

func (o *TransactionStatementDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"height",
		"source",
		"receipts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionStatementDTO := _TransactionStatementDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionStatementDTO)

	if err != nil {
		return err
	}

	*o = TransactionStatementDTO(varTransactionStatementDTO)

	return err
}

type NullableTransactionStatementDTO struct {
	value *TransactionStatementDTO
	isSet bool
}

func (v NullableTransactionStatementDTO) Get() *TransactionStatementDTO {
	return v.value
}

func (v *NullableTransactionStatementDTO) Set(val *TransactionStatementDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStatementDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStatementDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStatementDTO(val *TransactionStatementDTO) *NullableTransactionStatementDTO {
	return &NullableTransactionStatementDTO{value: val, isSet: true}
}

func (v NullableTransactionStatementDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStatementDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


