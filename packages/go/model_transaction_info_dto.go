/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionInfoDTO{}

// TransactionInfoDTO struct for TransactionInfoDTO
type TransactionInfoDTO struct {
	// Internal resource identifier.
	Id string `json:"id"`
	Meta TransactionInfoDTOMeta `json:"meta"`
	Transaction TransactionInfoDTOTransaction `json:"transaction"`
}

type _TransactionInfoDTO TransactionInfoDTO

// NewTransactionInfoDTO instantiates a new TransactionInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionInfoDTO(id string, meta TransactionInfoDTOMeta, transaction TransactionInfoDTOTransaction) *TransactionInfoDTO {
	this := TransactionInfoDTO{}
	this.Id = id
	this.Meta = meta
	this.Transaction = transaction
	return &this
}

// NewTransactionInfoDTOWithDefaults instantiates a new TransactionInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionInfoDTOWithDefaults() *TransactionInfoDTO {
	this := TransactionInfoDTO{}
	return &this
}

// GetId returns the Id field value
func (o *TransactionInfoDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TransactionInfoDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TransactionInfoDTO) SetId(v string) {
	o.Id = v
}

// GetMeta returns the Meta field value
func (o *TransactionInfoDTO) GetMeta() TransactionInfoDTOMeta {
	if o == nil {
		var ret TransactionInfoDTOMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *TransactionInfoDTO) GetMetaOk() (*TransactionInfoDTOMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *TransactionInfoDTO) SetMeta(v TransactionInfoDTOMeta) {
	o.Meta = v
}

// GetTransaction returns the Transaction field value
func (o *TransactionInfoDTO) GetTransaction() TransactionInfoDTOTransaction {
	if o == nil {
		var ret TransactionInfoDTOTransaction
		return ret
	}

	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value
// and a boolean to check if the value has been set.
func (o *TransactionInfoDTO) GetTransactionOk() (*TransactionInfoDTOTransaction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transaction, true
}

// SetTransaction sets field value
func (o *TransactionInfoDTO) SetTransaction(v TransactionInfoDTOTransaction) {
	o.Transaction = v
}

func (o TransactionInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["meta"] = o.Meta
	toSerialize["transaction"] = o.Transaction
	return toSerialize, nil
}

func (o *TransactionInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"meta",
		"transaction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionInfoDTO := _TransactionInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionInfoDTO)

	if err != nil {
		return err
	}

	*o = TransactionInfoDTO(varTransactionInfoDTO)

	return err
}

type NullableTransactionInfoDTO struct {
	value *TransactionInfoDTO
	isSet bool
}

func (v NullableTransactionInfoDTO) Get() *TransactionInfoDTO {
	return v.value
}

func (v *NullableTransactionInfoDTO) Set(val *TransactionInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionInfoDTO(val *TransactionInfoDTO) *NullableTransactionInfoDTO {
	return &NullableTransactionInfoDTO{value: val, isSet: true}
}

func (v NullableTransactionInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


