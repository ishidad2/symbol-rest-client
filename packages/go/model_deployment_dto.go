/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeploymentDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentDTO{}

// DeploymentDTO struct for DeploymentDTO
type DeploymentDTO struct {
	// The tool used to create, maintain and deploy the node. Examples: symbol-bootstrap, manual.
	DeploymentTool string `json:"deploymentTool"`
	// The version of the tool used to create, maintain and deploy the node.
	DeploymentToolVersion string `json:"deploymentToolVersion"`
	// When was the node last upgraded.
	LastUpdatedDate string `json:"lastUpdatedDate"`
}

type _DeploymentDTO DeploymentDTO

// NewDeploymentDTO instantiates a new DeploymentDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentDTO(deploymentTool string, deploymentToolVersion string, lastUpdatedDate string) *DeploymentDTO {
	this := DeploymentDTO{}
	this.DeploymentTool = deploymentTool
	this.DeploymentToolVersion = deploymentToolVersion
	this.LastUpdatedDate = lastUpdatedDate
	return &this
}

// NewDeploymentDTOWithDefaults instantiates a new DeploymentDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentDTOWithDefaults() *DeploymentDTO {
	this := DeploymentDTO{}
	return &this
}

// GetDeploymentTool returns the DeploymentTool field value
func (o *DeploymentDTO) GetDeploymentTool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentTool
}

// GetDeploymentToolOk returns a tuple with the DeploymentTool field value
// and a boolean to check if the value has been set.
func (o *DeploymentDTO) GetDeploymentToolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentTool, true
}

// SetDeploymentTool sets field value
func (o *DeploymentDTO) SetDeploymentTool(v string) {
	o.DeploymentTool = v
}

// GetDeploymentToolVersion returns the DeploymentToolVersion field value
func (o *DeploymentDTO) GetDeploymentToolVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeploymentToolVersion
}

// GetDeploymentToolVersionOk returns a tuple with the DeploymentToolVersion field value
// and a boolean to check if the value has been set.
func (o *DeploymentDTO) GetDeploymentToolVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeploymentToolVersion, true
}

// SetDeploymentToolVersion sets field value
func (o *DeploymentDTO) SetDeploymentToolVersion(v string) {
	o.DeploymentToolVersion = v
}

// GetLastUpdatedDate returns the LastUpdatedDate field value
func (o *DeploymentDTO) GetLastUpdatedDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdatedDate
}

// GetLastUpdatedDateOk returns a tuple with the LastUpdatedDate field value
// and a boolean to check if the value has been set.
func (o *DeploymentDTO) GetLastUpdatedDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedDate, true
}

// SetLastUpdatedDate sets field value
func (o *DeploymentDTO) SetLastUpdatedDate(v string) {
	o.LastUpdatedDate = v
}

func (o DeploymentDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deploymentTool"] = o.DeploymentTool
	toSerialize["deploymentToolVersion"] = o.DeploymentToolVersion
	toSerialize["lastUpdatedDate"] = o.LastUpdatedDate
	return toSerialize, nil
}

func (o *DeploymentDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deploymentTool",
		"deploymentToolVersion",
		"lastUpdatedDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentDTO := _DeploymentDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentDTO)

	if err != nil {
		return err
	}

	*o = DeploymentDTO(varDeploymentDTO)

	return err
}

type NullableDeploymentDTO struct {
	value *DeploymentDTO
	isSet bool
}

func (v NullableDeploymentDTO) Get() *DeploymentDTO {
	return v.value
}

func (v *NullableDeploymentDTO) Set(val *DeploymentDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentDTO(val *DeploymentDTO) *NullableDeploymentDTO {
	return &NullableDeploymentDTO{value: val, isSet: true}
}

func (v NullableDeploymentDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


