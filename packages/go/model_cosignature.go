/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the Cosignature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cosignature{}

// Cosignature struct for Cosignature
type Cosignature struct {
	ParentHash *string `json:"parentHash,omitempty"`
	// Entity's signature generated by the signer.
	Signature *string `json:"signature,omitempty"`
	// Public key.
	SignerPublicKey *string `json:"signerPublicKey,omitempty"`
	// Cosignature version.
	Version *string `json:"version,omitempty"`
}

// NewCosignature instantiates a new Cosignature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCosignature() *Cosignature {
	this := Cosignature{}
	return &this
}

// NewCosignatureWithDefaults instantiates a new Cosignature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCosignatureWithDefaults() *Cosignature {
	this := Cosignature{}
	return &this
}

// GetParentHash returns the ParentHash field value if set, zero value otherwise.
func (o *Cosignature) GetParentHash() string {
	if o == nil || IsNil(o.ParentHash) {
		var ret string
		return ret
	}
	return *o.ParentHash
}

// GetParentHashOk returns a tuple with the ParentHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cosignature) GetParentHashOk() (*string, bool) {
	if o == nil || IsNil(o.ParentHash) {
		return nil, false
	}
	return o.ParentHash, true
}

// HasParentHash returns a boolean if a field has been set.
func (o *Cosignature) HasParentHash() bool {
	if o != nil && !IsNil(o.ParentHash) {
		return true
	}

	return false
}

// SetParentHash gets a reference to the given string and assigns it to the ParentHash field.
func (o *Cosignature) SetParentHash(v string) {
	o.ParentHash = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *Cosignature) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cosignature) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *Cosignature) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *Cosignature) SetSignature(v string) {
	o.Signature = &v
}

// GetSignerPublicKey returns the SignerPublicKey field value if set, zero value otherwise.
func (o *Cosignature) GetSignerPublicKey() string {
	if o == nil || IsNil(o.SignerPublicKey) {
		var ret string
		return ret
	}
	return *o.SignerPublicKey
}

// GetSignerPublicKeyOk returns a tuple with the SignerPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cosignature) GetSignerPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SignerPublicKey) {
		return nil, false
	}
	return o.SignerPublicKey, true
}

// HasSignerPublicKey returns a boolean if a field has been set.
func (o *Cosignature) HasSignerPublicKey() bool {
	if o != nil && !IsNil(o.SignerPublicKey) {
		return true
	}

	return false
}

// SetSignerPublicKey gets a reference to the given string and assigns it to the SignerPublicKey field.
func (o *Cosignature) SetSignerPublicKey(v string) {
	o.SignerPublicKey = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Cosignature) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cosignature) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Cosignature) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Cosignature) SetVersion(v string) {
	o.Version = &v
}

func (o Cosignature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cosignature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentHash) {
		toSerialize["parentHash"] = o.ParentHash
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.SignerPublicKey) {
		toSerialize["signerPublicKey"] = o.SignerPublicKey
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableCosignature struct {
	value *Cosignature
	isSet bool
}

func (v NullableCosignature) Get() *Cosignature {
	return v.value
}

func (v *NullableCosignature) Set(val *Cosignature) {
	v.value = val
	v.isSet = true
}

func (v NullableCosignature) IsSet() bool {
	return v.isSet
}

func (v *NullableCosignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCosignature(val *Cosignature) *NullableCosignature {
	return &NullableCosignature{value: val, isSet: true}
}

func (v NullableCosignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCosignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


