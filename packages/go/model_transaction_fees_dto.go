/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionFeesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionFeesDTO{}

// TransactionFeesDTO struct for TransactionFeesDTO
type TransactionFeesDTO struct {
	// Fee multiplier applied to transactions contained in block.
	AverageFeeMultiplier int64 `json:"averageFeeMultiplier"`
	// Fee multiplier applied to transactions contained in block.
	MedianFeeMultiplier int64 `json:"medianFeeMultiplier"`
	// Fee multiplier applied to transactions contained in block.
	HighestFeeMultiplier int64 `json:"highestFeeMultiplier"`
	// Fee multiplier applied to transactions contained in block.
	LowestFeeMultiplier int64 `json:"lowestFeeMultiplier"`
	// Fee multiplier applied to transactions contained in block.
	MinFeeMultiplier int64 `json:"minFeeMultiplier"`
}

type _TransactionFeesDTO TransactionFeesDTO

// NewTransactionFeesDTO instantiates a new TransactionFeesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionFeesDTO(averageFeeMultiplier int64, medianFeeMultiplier int64, highestFeeMultiplier int64, lowestFeeMultiplier int64, minFeeMultiplier int64) *TransactionFeesDTO {
	this := TransactionFeesDTO{}
	this.AverageFeeMultiplier = averageFeeMultiplier
	this.MedianFeeMultiplier = medianFeeMultiplier
	this.HighestFeeMultiplier = highestFeeMultiplier
	this.LowestFeeMultiplier = lowestFeeMultiplier
	this.MinFeeMultiplier = minFeeMultiplier
	return &this
}

// NewTransactionFeesDTOWithDefaults instantiates a new TransactionFeesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionFeesDTOWithDefaults() *TransactionFeesDTO {
	this := TransactionFeesDTO{}
	return &this
}

// GetAverageFeeMultiplier returns the AverageFeeMultiplier field value
func (o *TransactionFeesDTO) GetAverageFeeMultiplier() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AverageFeeMultiplier
}

// GetAverageFeeMultiplierOk returns a tuple with the AverageFeeMultiplier field value
// and a boolean to check if the value has been set.
func (o *TransactionFeesDTO) GetAverageFeeMultiplierOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AverageFeeMultiplier, true
}

// SetAverageFeeMultiplier sets field value
func (o *TransactionFeesDTO) SetAverageFeeMultiplier(v int64) {
	o.AverageFeeMultiplier = v
}

// GetMedianFeeMultiplier returns the MedianFeeMultiplier field value
func (o *TransactionFeesDTO) GetMedianFeeMultiplier() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MedianFeeMultiplier
}

// GetMedianFeeMultiplierOk returns a tuple with the MedianFeeMultiplier field value
// and a boolean to check if the value has been set.
func (o *TransactionFeesDTO) GetMedianFeeMultiplierOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MedianFeeMultiplier, true
}

// SetMedianFeeMultiplier sets field value
func (o *TransactionFeesDTO) SetMedianFeeMultiplier(v int64) {
	o.MedianFeeMultiplier = v
}

// GetHighestFeeMultiplier returns the HighestFeeMultiplier field value
func (o *TransactionFeesDTO) GetHighestFeeMultiplier() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.HighestFeeMultiplier
}

// GetHighestFeeMultiplierOk returns a tuple with the HighestFeeMultiplier field value
// and a boolean to check if the value has been set.
func (o *TransactionFeesDTO) GetHighestFeeMultiplierOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighestFeeMultiplier, true
}

// SetHighestFeeMultiplier sets field value
func (o *TransactionFeesDTO) SetHighestFeeMultiplier(v int64) {
	o.HighestFeeMultiplier = v
}

// GetLowestFeeMultiplier returns the LowestFeeMultiplier field value
func (o *TransactionFeesDTO) GetLowestFeeMultiplier() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LowestFeeMultiplier
}

// GetLowestFeeMultiplierOk returns a tuple with the LowestFeeMultiplier field value
// and a boolean to check if the value has been set.
func (o *TransactionFeesDTO) GetLowestFeeMultiplierOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowestFeeMultiplier, true
}

// SetLowestFeeMultiplier sets field value
func (o *TransactionFeesDTO) SetLowestFeeMultiplier(v int64) {
	o.LowestFeeMultiplier = v
}

// GetMinFeeMultiplier returns the MinFeeMultiplier field value
func (o *TransactionFeesDTO) GetMinFeeMultiplier() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinFeeMultiplier
}

// GetMinFeeMultiplierOk returns a tuple with the MinFeeMultiplier field value
// and a boolean to check if the value has been set.
func (o *TransactionFeesDTO) GetMinFeeMultiplierOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinFeeMultiplier, true
}

// SetMinFeeMultiplier sets field value
func (o *TransactionFeesDTO) SetMinFeeMultiplier(v int64) {
	o.MinFeeMultiplier = v
}

func (o TransactionFeesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionFeesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["averageFeeMultiplier"] = o.AverageFeeMultiplier
	toSerialize["medianFeeMultiplier"] = o.MedianFeeMultiplier
	toSerialize["highestFeeMultiplier"] = o.HighestFeeMultiplier
	toSerialize["lowestFeeMultiplier"] = o.LowestFeeMultiplier
	toSerialize["minFeeMultiplier"] = o.MinFeeMultiplier
	return toSerialize, nil
}

func (o *TransactionFeesDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"averageFeeMultiplier",
		"medianFeeMultiplier",
		"highestFeeMultiplier",
		"lowestFeeMultiplier",
		"minFeeMultiplier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionFeesDTO := _TransactionFeesDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionFeesDTO)

	if err != nil {
		return err
	}

	*o = TransactionFeesDTO(varTransactionFeesDTO)

	return err
}

type NullableTransactionFeesDTO struct {
	value *TransactionFeesDTO
	isSet bool
}

func (v NullableTransactionFeesDTO) Get() *TransactionFeesDTO {
	return v.value
}

func (v *NullableTransactionFeesDTO) Set(val *TransactionFeesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFeesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFeesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFeesDTO(val *TransactionFeesDTO) *NullableTransactionFeesDTO {
	return &NullableTransactionFeesDTO{value: val, isSet: true}
}

func (v NullableTransactionFeesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFeesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


