/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NamespaceNameDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceNameDTO{}

// NamespaceNameDTO struct for NamespaceNameDTO
type NamespaceNameDTO struct {
	// Namespace identifier.
	ParentId *string `json:"parentId,omitempty"`
	// Namespace identifier.
	Id string `json:"id"`
	// Namespace name.
	Name string `json:"name"`
}

type _NamespaceNameDTO NamespaceNameDTO

// NewNamespaceNameDTO instantiates a new NamespaceNameDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceNameDTO(id string, name string) *NamespaceNameDTO {
	this := NamespaceNameDTO{}
	this.Id = id
	this.Name = name
	return &this
}

// NewNamespaceNameDTOWithDefaults instantiates a new NamespaceNameDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceNameDTOWithDefaults() *NamespaceNameDTO {
	this := NamespaceNameDTO{}
	return &this
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *NamespaceNameDTO) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceNameDTO) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *NamespaceNameDTO) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *NamespaceNameDTO) SetParentId(v string) {
	o.ParentId = &v
}

// GetId returns the Id field value
func (o *NamespaceNameDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NamespaceNameDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NamespaceNameDTO) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *NamespaceNameDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NamespaceNameDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NamespaceNameDTO) SetName(v string) {
	o.Name = v
}

func (o NamespaceNameDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceNameDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *NamespaceNameDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNamespaceNameDTO := _NamespaceNameDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNamespaceNameDTO)

	if err != nil {
		return err
	}

	*o = NamespaceNameDTO(varNamespaceNameDTO)

	return err
}

type NullableNamespaceNameDTO struct {
	value *NamespaceNameDTO
	isSet bool
}

func (v NullableNamespaceNameDTO) Get() *NamespaceNameDTO {
	return v.value
}

func (v *NullableNamespaceNameDTO) Set(val *NamespaceNameDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceNameDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceNameDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceNameDTO(val *NamespaceNameDTO) *NullableNamespaceNameDTO {
	return &NullableNamespaceNameDTO{value: val, isSet: true}
}

func (v NullableNamespaceNameDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceNameDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


