/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockInfoDTO{}

// BlockInfoDTO struct for BlockInfoDTO
type BlockInfoDTO struct {
	// Internal resource identifier.
	Id string `json:"id"`
	Meta BlockMetaDTO `json:"meta"`
	Block BlockInfoDTOBlock `json:"block"`
}

type _BlockInfoDTO BlockInfoDTO

// NewBlockInfoDTO instantiates a new BlockInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockInfoDTO(id string, meta BlockMetaDTO, block BlockInfoDTOBlock) *BlockInfoDTO {
	this := BlockInfoDTO{}
	this.Id = id
	this.Meta = meta
	this.Block = block
	return &this
}

// NewBlockInfoDTOWithDefaults instantiates a new BlockInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockInfoDTOWithDefaults() *BlockInfoDTO {
	this := BlockInfoDTO{}
	return &this
}

// GetId returns the Id field value
func (o *BlockInfoDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BlockInfoDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BlockInfoDTO) SetId(v string) {
	o.Id = v
}

// GetMeta returns the Meta field value
func (o *BlockInfoDTO) GetMeta() BlockMetaDTO {
	if o == nil {
		var ret BlockMetaDTO
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *BlockInfoDTO) GetMetaOk() (*BlockMetaDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *BlockInfoDTO) SetMeta(v BlockMetaDTO) {
	o.Meta = v
}

// GetBlock returns the Block field value
func (o *BlockInfoDTO) GetBlock() BlockInfoDTOBlock {
	if o == nil {
		var ret BlockInfoDTOBlock
		return ret
	}

	return o.Block
}

// GetBlockOk returns a tuple with the Block field value
// and a boolean to check if the value has been set.
func (o *BlockInfoDTO) GetBlockOk() (*BlockInfoDTOBlock, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Block, true
}

// SetBlock sets field value
func (o *BlockInfoDTO) SetBlock(v BlockInfoDTOBlock) {
	o.Block = v
}

func (o BlockInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["meta"] = o.Meta
	toSerialize["block"] = o.Block
	return toSerialize, nil
}

func (o *BlockInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"meta",
		"block",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockInfoDTO := _BlockInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockInfoDTO)

	if err != nil {
		return err
	}

	*o = BlockInfoDTO(varBlockInfoDTO)

	return err
}

type NullableBlockInfoDTO struct {
	value *BlockInfoDTO
	isSet bool
}

func (v NullableBlockInfoDTO) Get() *BlockInfoDTO {
	return v.value
}

func (v *NullableBlockInfoDTO) Set(val *BlockInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockInfoDTO(val *BlockInfoDTO) *NullableBlockInfoDTO {
	return &NullableBlockInfoDTO{value: val, isSet: true}
}

func (v NullableBlockInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


