/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MerkleTreeLeafDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerkleTreeLeafDTO{}

// MerkleTreeLeafDTO Merkle tree leaf node.
type MerkleTreeLeafDTO struct {
	Type MerkleTreeNodeTypeEnum `json:"type"`
	// Leaf path.
	Path string `json:"path"`
	// Encoded leaf path.
	EncodedPath string `json:"encodedPath"`
	// Nibble count.
	NibbleCount int32 `json:"nibbleCount"`
	// Leaf value (sha256 hash).
	Value string `json:"value"`
	LeafHash string `json:"leafHash"`
}

type _MerkleTreeLeafDTO MerkleTreeLeafDTO

// NewMerkleTreeLeafDTO instantiates a new MerkleTreeLeafDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerkleTreeLeafDTO(type_ MerkleTreeNodeTypeEnum, path string, encodedPath string, nibbleCount int32, value string, leafHash string) *MerkleTreeLeafDTO {
	this := MerkleTreeLeafDTO{}
	this.Type = type_
	this.Path = path
	this.EncodedPath = encodedPath
	this.NibbleCount = nibbleCount
	this.Value = value
	this.LeafHash = leafHash
	return &this
}

// NewMerkleTreeLeafDTOWithDefaults instantiates a new MerkleTreeLeafDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerkleTreeLeafDTOWithDefaults() *MerkleTreeLeafDTO {
	this := MerkleTreeLeafDTO{}
	return &this
}

// GetType returns the Type field value
func (o *MerkleTreeLeafDTO) GetType() MerkleTreeNodeTypeEnum {
	if o == nil {
		var ret MerkleTreeNodeTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MerkleTreeLeafDTO) GetTypeOk() (*MerkleTreeNodeTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MerkleTreeLeafDTO) SetType(v MerkleTreeNodeTypeEnum) {
	o.Type = v
}

// GetPath returns the Path field value
func (o *MerkleTreeLeafDTO) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *MerkleTreeLeafDTO) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *MerkleTreeLeafDTO) SetPath(v string) {
	o.Path = v
}

// GetEncodedPath returns the EncodedPath field value
func (o *MerkleTreeLeafDTO) GetEncodedPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncodedPath
}

// GetEncodedPathOk returns a tuple with the EncodedPath field value
// and a boolean to check if the value has been set.
func (o *MerkleTreeLeafDTO) GetEncodedPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncodedPath, true
}

// SetEncodedPath sets field value
func (o *MerkleTreeLeafDTO) SetEncodedPath(v string) {
	o.EncodedPath = v
}

// GetNibbleCount returns the NibbleCount field value
func (o *MerkleTreeLeafDTO) GetNibbleCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NibbleCount
}

// GetNibbleCountOk returns a tuple with the NibbleCount field value
// and a boolean to check if the value has been set.
func (o *MerkleTreeLeafDTO) GetNibbleCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NibbleCount, true
}

// SetNibbleCount sets field value
func (o *MerkleTreeLeafDTO) SetNibbleCount(v int32) {
	o.NibbleCount = v
}

// GetValue returns the Value field value
func (o *MerkleTreeLeafDTO) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MerkleTreeLeafDTO) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MerkleTreeLeafDTO) SetValue(v string) {
	o.Value = v
}

// GetLeafHash returns the LeafHash field value
func (o *MerkleTreeLeafDTO) GetLeafHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LeafHash
}

// GetLeafHashOk returns a tuple with the LeafHash field value
// and a boolean to check if the value has been set.
func (o *MerkleTreeLeafDTO) GetLeafHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeafHash, true
}

// SetLeafHash sets field value
func (o *MerkleTreeLeafDTO) SetLeafHash(v string) {
	o.LeafHash = v
}

func (o MerkleTreeLeafDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerkleTreeLeafDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["path"] = o.Path
	toSerialize["encodedPath"] = o.EncodedPath
	toSerialize["nibbleCount"] = o.NibbleCount
	toSerialize["value"] = o.Value
	toSerialize["leafHash"] = o.LeafHash
	return toSerialize, nil
}

func (o *MerkleTreeLeafDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"path",
		"encodedPath",
		"nibbleCount",
		"value",
		"leafHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMerkleTreeLeafDTO := _MerkleTreeLeafDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMerkleTreeLeafDTO)

	if err != nil {
		return err
	}

	*o = MerkleTreeLeafDTO(varMerkleTreeLeafDTO)

	return err
}

type NullableMerkleTreeLeafDTO struct {
	value *MerkleTreeLeafDTO
	isSet bool
}

func (v NullableMerkleTreeLeafDTO) Get() *MerkleTreeLeafDTO {
	return v.value
}

func (v *NullableMerkleTreeLeafDTO) Set(val *MerkleTreeLeafDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableMerkleTreeLeafDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableMerkleTreeLeafDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerkleTreeLeafDTO(val *MerkleTreeLeafDTO) *NullableMerkleTreeLeafDTO {
	return &NullableMerkleTreeLeafDTO{value: val, isSet: true}
}

func (v NullableMerkleTreeLeafDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerkleTreeLeafDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


