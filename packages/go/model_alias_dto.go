/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AliasDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AliasDTO{}

// AliasDTO struct for AliasDTO
type AliasDTO struct {
	Type AliasTypeEnum `json:"type"`
	// Mosaic identifier.
	MosaicId *string `json:"mosaicId,omitempty"`
	// Address encoded using a 32-character set.
	Address *string `json:"address,omitempty"`
}

type _AliasDTO AliasDTO

// NewAliasDTO instantiates a new AliasDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAliasDTO(type_ AliasTypeEnum) *AliasDTO {
	this := AliasDTO{}
	this.Type = type_
	return &this
}

// NewAliasDTOWithDefaults instantiates a new AliasDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAliasDTOWithDefaults() *AliasDTO {
	this := AliasDTO{}
	return &this
}

// GetType returns the Type field value
func (o *AliasDTO) GetType() AliasTypeEnum {
	if o == nil {
		var ret AliasTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AliasDTO) GetTypeOk() (*AliasTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AliasDTO) SetType(v AliasTypeEnum) {
	o.Type = v
}

// GetMosaicId returns the MosaicId field value if set, zero value otherwise.
func (o *AliasDTO) GetMosaicId() string {
	if o == nil || IsNil(o.MosaicId) {
		var ret string
		return ret
	}
	return *o.MosaicId
}

// GetMosaicIdOk returns a tuple with the MosaicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AliasDTO) GetMosaicIdOk() (*string, bool) {
	if o == nil || IsNil(o.MosaicId) {
		return nil, false
	}
	return o.MosaicId, true
}

// HasMosaicId returns a boolean if a field has been set.
func (o *AliasDTO) HasMosaicId() bool {
	if o != nil && !IsNil(o.MosaicId) {
		return true
	}

	return false
}

// SetMosaicId gets a reference to the given string and assigns it to the MosaicId field.
func (o *AliasDTO) SetMosaicId(v string) {
	o.MosaicId = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *AliasDTO) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AliasDTO) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *AliasDTO) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *AliasDTO) SetAddress(v string) {
	o.Address = &v
}

func (o AliasDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AliasDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.MosaicId) {
		toSerialize["mosaicId"] = o.MosaicId
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	return toSerialize, nil
}

func (o *AliasDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAliasDTO := _AliasDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAliasDTO)

	if err != nil {
		return err
	}

	*o = AliasDTO(varAliasDTO)

	return err
}

type NullableAliasDTO struct {
	value *AliasDTO
	isSet bool
}

func (v NullableAliasDTO) Get() *AliasDTO {
	return v.value
}

func (v *NullableAliasDTO) Set(val *AliasDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAliasDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAliasDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAliasDTO(val *AliasDTO) *NullableAliasDTO {
	return &NullableAliasDTO{value: val, isSet: true}
}

func (v NullableAliasDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAliasDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


