/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
	"bytes"
)

// TransactionInfoDTOTransaction struct for TransactionInfoDTOTransaction
type TransactionInfoDTOTransaction struct {
	AccountAddressRestrictionTransactionDTO *AccountAddressRestrictionTransactionDTO
	AccountKeyLinkTransactionDTO *AccountKeyLinkTransactionDTO
	AccountMetadataTransactionDTO *AccountMetadataTransactionDTO
	AccountMosaicRestrictionTransactionDTO *AccountMosaicRestrictionTransactionDTO
	AccountOperationRestrictionTransactionDTO *AccountOperationRestrictionTransactionDTO
	AddressAliasTransactionDTO *AddressAliasTransactionDTO
	AggregateTransactionDTO *AggregateTransactionDTO
	AggregateTransactionExtendedDTO *AggregateTransactionExtendedDTO
	EmbeddedAccountAddressRestrictionTransactionDTO *EmbeddedAccountAddressRestrictionTransactionDTO
	EmbeddedAccountKeyLinkTransactionDTO *EmbeddedAccountKeyLinkTransactionDTO
	EmbeddedAccountMetadataTransactionDTO *EmbeddedAccountMetadataTransactionDTO
	EmbeddedAccountMosaicRestrictionTransactionDTO *EmbeddedAccountMosaicRestrictionTransactionDTO
	EmbeddedAccountOperationRestrictionTransactionDTO *EmbeddedAccountOperationRestrictionTransactionDTO
	EmbeddedAddressAliasTransactionDTO *EmbeddedAddressAliasTransactionDTO
	EmbeddedHashLockTransactionDTO *EmbeddedHashLockTransactionDTO
	EmbeddedMosaicAddressRestrictionTransactionDTO *EmbeddedMosaicAddressRestrictionTransactionDTO
	EmbeddedMosaicAliasTransactionDTO *EmbeddedMosaicAliasTransactionDTO
	EmbeddedMosaicDefinitionTransactionDTO *EmbeddedMosaicDefinitionTransactionDTO
	EmbeddedMosaicGlobalRestrictionTransactionDTO *EmbeddedMosaicGlobalRestrictionTransactionDTO
	EmbeddedMosaicMetadataTransactionDTO *EmbeddedMosaicMetadataTransactionDTO
	EmbeddedMosaicSupplyChangeTransactionDTO *EmbeddedMosaicSupplyChangeTransactionDTO
	EmbeddedMosaicSupplyRevocationTransactionDTO *EmbeddedMosaicSupplyRevocationTransactionDTO
	EmbeddedMultisigAccountModificationTransactionDTO *EmbeddedMultisigAccountModificationTransactionDTO
	EmbeddedNamespaceMetadataTransactionDTO *EmbeddedNamespaceMetadataTransactionDTO
	EmbeddedNamespaceRegistrationTransactionDTO *EmbeddedNamespaceRegistrationTransactionDTO
	EmbeddedNodeKeyLinkTransactionDTO *EmbeddedNodeKeyLinkTransactionDTO
	EmbeddedSecretLockTransactionDTO *EmbeddedSecretLockTransactionDTO
	EmbeddedSecretProofTransactionDTO *EmbeddedSecretProofTransactionDTO
	EmbeddedTransferTransactionDTO *EmbeddedTransferTransactionDTO
	EmbeddedVotingKeyLinkTransactionDTO *EmbeddedVotingKeyLinkTransactionDTO
	EmbeddedVrfKeyLinkTransactionDTO *EmbeddedVrfKeyLinkTransactionDTO
	HashLockTransactionDTO *HashLockTransactionDTO
	MosaicAddressRestrictionTransactionDTO *MosaicAddressRestrictionTransactionDTO
	MosaicAliasTransactionDTO *MosaicAliasTransactionDTO
	MosaicDefinitionTransactionDTO *MosaicDefinitionTransactionDTO
	MosaicGlobalRestrictionTransactionDTO *MosaicGlobalRestrictionTransactionDTO
	MosaicMetadataTransactionDTO *MosaicMetadataTransactionDTO
	MosaicSupplyChangeTransactionDTO *MosaicSupplyChangeTransactionDTO
	MosaicSupplyRevocationTransactionDTO *MosaicSupplyRevocationTransactionDTO
	MultisigAccountModificationTransactionDTO *MultisigAccountModificationTransactionDTO
	NamespaceMetadataTransactionDTO *NamespaceMetadataTransactionDTO
	NamespaceRegistrationTransactionDTO *NamespaceRegistrationTransactionDTO
	NodeKeyLinkTransactionDTO *NodeKeyLinkTransactionDTO
	SecretLockTransactionDTO *SecretLockTransactionDTO
	SecretProofTransactionDTO *SecretProofTransactionDTO
	TransferTransactionDTO *TransferTransactionDTO
	VotingKeyLinkTransactionDTO *VotingKeyLinkTransactionDTO
	VrfKeyLinkTransactionDTO *VrfKeyLinkTransactionDTO
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TransactionInfoDTOTransaction) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AccountAddressRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.AccountAddressRestrictionTransactionDTO);
	if err == nil {
		jsonAccountAddressRestrictionTransactionDTO, _ := json.Marshal(dst.AccountAddressRestrictionTransactionDTO)
		if string(jsonAccountAddressRestrictionTransactionDTO) == "{}" { // empty struct
			dst.AccountAddressRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.AccountAddressRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.AccountAddressRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into AccountKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.AccountKeyLinkTransactionDTO);
	if err == nil {
		jsonAccountKeyLinkTransactionDTO, _ := json.Marshal(dst.AccountKeyLinkTransactionDTO)
		if string(jsonAccountKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.AccountKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.AccountKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.AccountKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into AccountMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.AccountMetadataTransactionDTO);
	if err == nil {
		jsonAccountMetadataTransactionDTO, _ := json.Marshal(dst.AccountMetadataTransactionDTO)
		if string(jsonAccountMetadataTransactionDTO) == "{}" { // empty struct
			dst.AccountMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.AccountMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.AccountMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into AccountMosaicRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.AccountMosaicRestrictionTransactionDTO);
	if err == nil {
		jsonAccountMosaicRestrictionTransactionDTO, _ := json.Marshal(dst.AccountMosaicRestrictionTransactionDTO)
		if string(jsonAccountMosaicRestrictionTransactionDTO) == "{}" { // empty struct
			dst.AccountMosaicRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.AccountMosaicRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.AccountMosaicRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into AccountOperationRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.AccountOperationRestrictionTransactionDTO);
	if err == nil {
		jsonAccountOperationRestrictionTransactionDTO, _ := json.Marshal(dst.AccountOperationRestrictionTransactionDTO)
		if string(jsonAccountOperationRestrictionTransactionDTO) == "{}" { // empty struct
			dst.AccountOperationRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.AccountOperationRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.AccountOperationRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into AddressAliasTransactionDTO
	err = json.Unmarshal(data, &dst.AddressAliasTransactionDTO);
	if err == nil {
		jsonAddressAliasTransactionDTO, _ := json.Marshal(dst.AddressAliasTransactionDTO)
		if string(jsonAddressAliasTransactionDTO) == "{}" { // empty struct
			dst.AddressAliasTransactionDTO = nil
		} else {
			return nil // data stored in dst.AddressAliasTransactionDTO, return on the first match
		}
	} else {
		dst.AddressAliasTransactionDTO = nil
	}

	// try to unmarshal JSON data into AggregateTransactionDTO
	err = json.Unmarshal(data, &dst.AggregateTransactionDTO);
	if err == nil {
		jsonAggregateTransactionDTO, _ := json.Marshal(dst.AggregateTransactionDTO)
		if string(jsonAggregateTransactionDTO) == "{}" { // empty struct
			dst.AggregateTransactionDTO = nil
		} else {
			return nil // data stored in dst.AggregateTransactionDTO, return on the first match
		}
	} else {
		dst.AggregateTransactionDTO = nil
	}

	// try to unmarshal JSON data into AggregateTransactionExtendedDTO
	err = json.Unmarshal(data, &dst.AggregateTransactionExtendedDTO);
	if err == nil {
		jsonAggregateTransactionExtendedDTO, _ := json.Marshal(dst.AggregateTransactionExtendedDTO)
		if string(jsonAggregateTransactionExtendedDTO) == "{}" { // empty struct
			dst.AggregateTransactionExtendedDTO = nil
		} else {
			return nil // data stored in dst.AggregateTransactionExtendedDTO, return on the first match
		}
	} else {
		dst.AggregateTransactionExtendedDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountAddressRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountAddressRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountAddressRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountAddressRestrictionTransactionDTO)
		if string(jsonEmbeddedAccountAddressRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountAddressRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountAddressRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountAddressRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountKeyLinkTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountKeyLinkTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountKeyLinkTransactionDTO)
		if string(jsonEmbeddedAccountKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountMetadataTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountMetadataTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountMetadataTransactionDTO)
		if string(jsonEmbeddedAccountMetadataTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountMosaicRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountMosaicRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountMosaicRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountMosaicRestrictionTransactionDTO)
		if string(jsonEmbeddedAccountMosaicRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountMosaicRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountMosaicRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountMosaicRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountOperationRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountOperationRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountOperationRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountOperationRestrictionTransactionDTO)
		if string(jsonEmbeddedAccountOperationRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountOperationRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountOperationRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountOperationRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAddressAliasTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAddressAliasTransactionDTO);
	if err == nil {
		jsonEmbeddedAddressAliasTransactionDTO, _ := json.Marshal(dst.EmbeddedAddressAliasTransactionDTO)
		if string(jsonEmbeddedAddressAliasTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAddressAliasTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAddressAliasTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAddressAliasTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedHashLockTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedHashLockTransactionDTO);
	if err == nil {
		jsonEmbeddedHashLockTransactionDTO, _ := json.Marshal(dst.EmbeddedHashLockTransactionDTO)
		if string(jsonEmbeddedHashLockTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedHashLockTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedHashLockTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedHashLockTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicAddressRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicAddressRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicAddressRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicAddressRestrictionTransactionDTO)
		if string(jsonEmbeddedMosaicAddressRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicAddressRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicAddressRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicAddressRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicAliasTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicAliasTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicAliasTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicAliasTransactionDTO)
		if string(jsonEmbeddedMosaicAliasTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicAliasTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicAliasTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicAliasTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicDefinitionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicDefinitionTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicDefinitionTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicDefinitionTransactionDTO)
		if string(jsonEmbeddedMosaicDefinitionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicDefinitionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicDefinitionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicDefinitionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicGlobalRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicGlobalRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicGlobalRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicGlobalRestrictionTransactionDTO)
		if string(jsonEmbeddedMosaicGlobalRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicGlobalRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicGlobalRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicGlobalRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicMetadataTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicMetadataTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicMetadataTransactionDTO)
		if string(jsonEmbeddedMosaicMetadataTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicSupplyChangeTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicSupplyChangeTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicSupplyChangeTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicSupplyChangeTransactionDTO)
		if string(jsonEmbeddedMosaicSupplyChangeTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicSupplyChangeTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicSupplyChangeTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicSupplyChangeTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicSupplyRevocationTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicSupplyRevocationTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicSupplyRevocationTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicSupplyRevocationTransactionDTO)
		if string(jsonEmbeddedMosaicSupplyRevocationTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicSupplyRevocationTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicSupplyRevocationTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicSupplyRevocationTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMultisigAccountModificationTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMultisigAccountModificationTransactionDTO);
	if err == nil {
		jsonEmbeddedMultisigAccountModificationTransactionDTO, _ := json.Marshal(dst.EmbeddedMultisigAccountModificationTransactionDTO)
		if string(jsonEmbeddedMultisigAccountModificationTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMultisigAccountModificationTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMultisigAccountModificationTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMultisigAccountModificationTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedNamespaceMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedNamespaceMetadataTransactionDTO);
	if err == nil {
		jsonEmbeddedNamespaceMetadataTransactionDTO, _ := json.Marshal(dst.EmbeddedNamespaceMetadataTransactionDTO)
		if string(jsonEmbeddedNamespaceMetadataTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedNamespaceMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedNamespaceMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedNamespaceMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedNamespaceRegistrationTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedNamespaceRegistrationTransactionDTO);
	if err == nil {
		jsonEmbeddedNamespaceRegistrationTransactionDTO, _ := json.Marshal(dst.EmbeddedNamespaceRegistrationTransactionDTO)
		if string(jsonEmbeddedNamespaceRegistrationTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedNamespaceRegistrationTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedNamespaceRegistrationTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedNamespaceRegistrationTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedNodeKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedNodeKeyLinkTransactionDTO);
	if err == nil {
		jsonEmbeddedNodeKeyLinkTransactionDTO, _ := json.Marshal(dst.EmbeddedNodeKeyLinkTransactionDTO)
		if string(jsonEmbeddedNodeKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedNodeKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedNodeKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedNodeKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedSecretLockTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedSecretLockTransactionDTO);
	if err == nil {
		jsonEmbeddedSecretLockTransactionDTO, _ := json.Marshal(dst.EmbeddedSecretLockTransactionDTO)
		if string(jsonEmbeddedSecretLockTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedSecretLockTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedSecretLockTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedSecretLockTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedSecretProofTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedSecretProofTransactionDTO);
	if err == nil {
		jsonEmbeddedSecretProofTransactionDTO, _ := json.Marshal(dst.EmbeddedSecretProofTransactionDTO)
		if string(jsonEmbeddedSecretProofTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedSecretProofTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedSecretProofTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedSecretProofTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedTransferTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedTransferTransactionDTO);
	if err == nil {
		jsonEmbeddedTransferTransactionDTO, _ := json.Marshal(dst.EmbeddedTransferTransactionDTO)
		if string(jsonEmbeddedTransferTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedTransferTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedTransferTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedTransferTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedVotingKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedVotingKeyLinkTransactionDTO);
	if err == nil {
		jsonEmbeddedVotingKeyLinkTransactionDTO, _ := json.Marshal(dst.EmbeddedVotingKeyLinkTransactionDTO)
		if string(jsonEmbeddedVotingKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedVotingKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedVotingKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedVotingKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedVrfKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedVrfKeyLinkTransactionDTO);
	if err == nil {
		jsonEmbeddedVrfKeyLinkTransactionDTO, _ := json.Marshal(dst.EmbeddedVrfKeyLinkTransactionDTO)
		if string(jsonEmbeddedVrfKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedVrfKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedVrfKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedVrfKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into HashLockTransactionDTO
	err = json.Unmarshal(data, &dst.HashLockTransactionDTO);
	if err == nil {
		jsonHashLockTransactionDTO, _ := json.Marshal(dst.HashLockTransactionDTO)
		if string(jsonHashLockTransactionDTO) == "{}" { // empty struct
			dst.HashLockTransactionDTO = nil
		} else {
			return nil // data stored in dst.HashLockTransactionDTO, return on the first match
		}
	} else {
		dst.HashLockTransactionDTO = nil
	}

	// try to unmarshal JSON data into MosaicAddressRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.MosaicAddressRestrictionTransactionDTO);
	if err == nil {
		jsonMosaicAddressRestrictionTransactionDTO, _ := json.Marshal(dst.MosaicAddressRestrictionTransactionDTO)
		if string(jsonMosaicAddressRestrictionTransactionDTO) == "{}" { // empty struct
			dst.MosaicAddressRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.MosaicAddressRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.MosaicAddressRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into MosaicAliasTransactionDTO
	err = json.Unmarshal(data, &dst.MosaicAliasTransactionDTO);
	if err == nil {
		jsonMosaicAliasTransactionDTO, _ := json.Marshal(dst.MosaicAliasTransactionDTO)
		if string(jsonMosaicAliasTransactionDTO) == "{}" { // empty struct
			dst.MosaicAliasTransactionDTO = nil
		} else {
			return nil // data stored in dst.MosaicAliasTransactionDTO, return on the first match
		}
	} else {
		dst.MosaicAliasTransactionDTO = nil
	}

	// try to unmarshal JSON data into MosaicDefinitionTransactionDTO
	err = json.Unmarshal(data, &dst.MosaicDefinitionTransactionDTO);
	if err == nil {
		jsonMosaicDefinitionTransactionDTO, _ := json.Marshal(dst.MosaicDefinitionTransactionDTO)
		if string(jsonMosaicDefinitionTransactionDTO) == "{}" { // empty struct
			dst.MosaicDefinitionTransactionDTO = nil
		} else {
			return nil // data stored in dst.MosaicDefinitionTransactionDTO, return on the first match
		}
	} else {
		dst.MosaicDefinitionTransactionDTO = nil
	}

	// try to unmarshal JSON data into MosaicGlobalRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.MosaicGlobalRestrictionTransactionDTO);
	if err == nil {
		jsonMosaicGlobalRestrictionTransactionDTO, _ := json.Marshal(dst.MosaicGlobalRestrictionTransactionDTO)
		if string(jsonMosaicGlobalRestrictionTransactionDTO) == "{}" { // empty struct
			dst.MosaicGlobalRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.MosaicGlobalRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.MosaicGlobalRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into MosaicMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.MosaicMetadataTransactionDTO);
	if err == nil {
		jsonMosaicMetadataTransactionDTO, _ := json.Marshal(dst.MosaicMetadataTransactionDTO)
		if string(jsonMosaicMetadataTransactionDTO) == "{}" { // empty struct
			dst.MosaicMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.MosaicMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.MosaicMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into MosaicSupplyChangeTransactionDTO
	err = json.Unmarshal(data, &dst.MosaicSupplyChangeTransactionDTO);
	if err == nil {
		jsonMosaicSupplyChangeTransactionDTO, _ := json.Marshal(dst.MosaicSupplyChangeTransactionDTO)
		if string(jsonMosaicSupplyChangeTransactionDTO) == "{}" { // empty struct
			dst.MosaicSupplyChangeTransactionDTO = nil
		} else {
			return nil // data stored in dst.MosaicSupplyChangeTransactionDTO, return on the first match
		}
	} else {
		dst.MosaicSupplyChangeTransactionDTO = nil
	}

	// try to unmarshal JSON data into MosaicSupplyRevocationTransactionDTO
	err = json.Unmarshal(data, &dst.MosaicSupplyRevocationTransactionDTO);
	if err == nil {
		jsonMosaicSupplyRevocationTransactionDTO, _ := json.Marshal(dst.MosaicSupplyRevocationTransactionDTO)
		if string(jsonMosaicSupplyRevocationTransactionDTO) == "{}" { // empty struct
			dst.MosaicSupplyRevocationTransactionDTO = nil
		} else {
			return nil // data stored in dst.MosaicSupplyRevocationTransactionDTO, return on the first match
		}
	} else {
		dst.MosaicSupplyRevocationTransactionDTO = nil
	}

	// try to unmarshal JSON data into MultisigAccountModificationTransactionDTO
	err = json.Unmarshal(data, &dst.MultisigAccountModificationTransactionDTO);
	if err == nil {
		jsonMultisigAccountModificationTransactionDTO, _ := json.Marshal(dst.MultisigAccountModificationTransactionDTO)
		if string(jsonMultisigAccountModificationTransactionDTO) == "{}" { // empty struct
			dst.MultisigAccountModificationTransactionDTO = nil
		} else {
			return nil // data stored in dst.MultisigAccountModificationTransactionDTO, return on the first match
		}
	} else {
		dst.MultisigAccountModificationTransactionDTO = nil
	}

	// try to unmarshal JSON data into NamespaceMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.NamespaceMetadataTransactionDTO);
	if err == nil {
		jsonNamespaceMetadataTransactionDTO, _ := json.Marshal(dst.NamespaceMetadataTransactionDTO)
		if string(jsonNamespaceMetadataTransactionDTO) == "{}" { // empty struct
			dst.NamespaceMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.NamespaceMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.NamespaceMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into NamespaceRegistrationTransactionDTO
	err = json.Unmarshal(data, &dst.NamespaceRegistrationTransactionDTO);
	if err == nil {
		jsonNamespaceRegistrationTransactionDTO, _ := json.Marshal(dst.NamespaceRegistrationTransactionDTO)
		if string(jsonNamespaceRegistrationTransactionDTO) == "{}" { // empty struct
			dst.NamespaceRegistrationTransactionDTO = nil
		} else {
			return nil // data stored in dst.NamespaceRegistrationTransactionDTO, return on the first match
		}
	} else {
		dst.NamespaceRegistrationTransactionDTO = nil
	}

	// try to unmarshal JSON data into NodeKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.NodeKeyLinkTransactionDTO);
	if err == nil {
		jsonNodeKeyLinkTransactionDTO, _ := json.Marshal(dst.NodeKeyLinkTransactionDTO)
		if string(jsonNodeKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.NodeKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.NodeKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.NodeKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into SecretLockTransactionDTO
	err = json.Unmarshal(data, &dst.SecretLockTransactionDTO);
	if err == nil {
		jsonSecretLockTransactionDTO, _ := json.Marshal(dst.SecretLockTransactionDTO)
		if string(jsonSecretLockTransactionDTO) == "{}" { // empty struct
			dst.SecretLockTransactionDTO = nil
		} else {
			return nil // data stored in dst.SecretLockTransactionDTO, return on the first match
		}
	} else {
		dst.SecretLockTransactionDTO = nil
	}

	// try to unmarshal JSON data into SecretProofTransactionDTO
	err = json.Unmarshal(data, &dst.SecretProofTransactionDTO);
	if err == nil {
		jsonSecretProofTransactionDTO, _ := json.Marshal(dst.SecretProofTransactionDTO)
		if string(jsonSecretProofTransactionDTO) == "{}" { // empty struct
			dst.SecretProofTransactionDTO = nil
		} else {
			return nil // data stored in dst.SecretProofTransactionDTO, return on the first match
		}
	} else {
		dst.SecretProofTransactionDTO = nil
	}

	// try to unmarshal JSON data into TransferTransactionDTO
	err = json.Unmarshal(data, &dst.TransferTransactionDTO);
	if err == nil {
		jsonTransferTransactionDTO, _ := json.Marshal(dst.TransferTransactionDTO)
		if string(jsonTransferTransactionDTO) == "{}" { // empty struct
			dst.TransferTransactionDTO = nil
		} else {
			return nil // data stored in dst.TransferTransactionDTO, return on the first match
		}
	} else {
		dst.TransferTransactionDTO = nil
	}

	// try to unmarshal JSON data into VotingKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.VotingKeyLinkTransactionDTO);
	if err == nil {
		jsonVotingKeyLinkTransactionDTO, _ := json.Marshal(dst.VotingKeyLinkTransactionDTO)
		if string(jsonVotingKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.VotingKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.VotingKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.VotingKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into VrfKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.VrfKeyLinkTransactionDTO);
	if err == nil {
		jsonVrfKeyLinkTransactionDTO, _ := json.Marshal(dst.VrfKeyLinkTransactionDTO)
		if string(jsonVrfKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.VrfKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.VrfKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.VrfKeyLinkTransactionDTO = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TransactionInfoDTOTransaction)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *TransactionInfoDTOTransaction) MarshalJSON() ([]byte, error) {
	if src.AccountAddressRestrictionTransactionDTO != nil {
		return json.Marshal(&src.AccountAddressRestrictionTransactionDTO)
	}

	if src.AccountKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.AccountKeyLinkTransactionDTO)
	}

	if src.AccountMetadataTransactionDTO != nil {
		return json.Marshal(&src.AccountMetadataTransactionDTO)
	}

	if src.AccountMosaicRestrictionTransactionDTO != nil {
		return json.Marshal(&src.AccountMosaicRestrictionTransactionDTO)
	}

	if src.AccountOperationRestrictionTransactionDTO != nil {
		return json.Marshal(&src.AccountOperationRestrictionTransactionDTO)
	}

	if src.AddressAliasTransactionDTO != nil {
		return json.Marshal(&src.AddressAliasTransactionDTO)
	}

	if src.AggregateTransactionDTO != nil {
		return json.Marshal(&src.AggregateTransactionDTO)
	}

	if src.AggregateTransactionExtendedDTO != nil {
		return json.Marshal(&src.AggregateTransactionExtendedDTO)
	}

	if src.EmbeddedAccountAddressRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountAddressRestrictionTransactionDTO)
	}

	if src.EmbeddedAccountKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountKeyLinkTransactionDTO)
	}

	if src.EmbeddedAccountMetadataTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountMetadataTransactionDTO)
	}

	if src.EmbeddedAccountMosaicRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountMosaicRestrictionTransactionDTO)
	}

	if src.EmbeddedAccountOperationRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountOperationRestrictionTransactionDTO)
	}

	if src.EmbeddedAddressAliasTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAddressAliasTransactionDTO)
	}

	if src.EmbeddedHashLockTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedHashLockTransactionDTO)
	}

	if src.EmbeddedMosaicAddressRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicAddressRestrictionTransactionDTO)
	}

	if src.EmbeddedMosaicAliasTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicAliasTransactionDTO)
	}

	if src.EmbeddedMosaicDefinitionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicDefinitionTransactionDTO)
	}

	if src.EmbeddedMosaicGlobalRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicGlobalRestrictionTransactionDTO)
	}

	if src.EmbeddedMosaicMetadataTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicMetadataTransactionDTO)
	}

	if src.EmbeddedMosaicSupplyChangeTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicSupplyChangeTransactionDTO)
	}

	if src.EmbeddedMosaicSupplyRevocationTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicSupplyRevocationTransactionDTO)
	}

	if src.EmbeddedMultisigAccountModificationTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMultisigAccountModificationTransactionDTO)
	}

	if src.EmbeddedNamespaceMetadataTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedNamespaceMetadataTransactionDTO)
	}

	if src.EmbeddedNamespaceRegistrationTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedNamespaceRegistrationTransactionDTO)
	}

	if src.EmbeddedNodeKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedNodeKeyLinkTransactionDTO)
	}

	if src.EmbeddedSecretLockTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedSecretLockTransactionDTO)
	}

	if src.EmbeddedSecretProofTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedSecretProofTransactionDTO)
	}

	if src.EmbeddedTransferTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedTransferTransactionDTO)
	}

	if src.EmbeddedVotingKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedVotingKeyLinkTransactionDTO)
	}

	if src.EmbeddedVrfKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedVrfKeyLinkTransactionDTO)
	}

	if src.HashLockTransactionDTO != nil {
		return json.Marshal(&src.HashLockTransactionDTO)
	}

	if src.MosaicAddressRestrictionTransactionDTO != nil {
		return json.Marshal(&src.MosaicAddressRestrictionTransactionDTO)
	}

	if src.MosaicAliasTransactionDTO != nil {
		return json.Marshal(&src.MosaicAliasTransactionDTO)
	}

	if src.MosaicDefinitionTransactionDTO != nil {
		return json.Marshal(&src.MosaicDefinitionTransactionDTO)
	}

	if src.MosaicGlobalRestrictionTransactionDTO != nil {
		return json.Marshal(&src.MosaicGlobalRestrictionTransactionDTO)
	}

	if src.MosaicMetadataTransactionDTO != nil {
		return json.Marshal(&src.MosaicMetadataTransactionDTO)
	}

	if src.MosaicSupplyChangeTransactionDTO != nil {
		return json.Marshal(&src.MosaicSupplyChangeTransactionDTO)
	}

	if src.MosaicSupplyRevocationTransactionDTO != nil {
		return json.Marshal(&src.MosaicSupplyRevocationTransactionDTO)
	}

	if src.MultisigAccountModificationTransactionDTO != nil {
		return json.Marshal(&src.MultisigAccountModificationTransactionDTO)
	}

	if src.NamespaceMetadataTransactionDTO != nil {
		return json.Marshal(&src.NamespaceMetadataTransactionDTO)
	}

	if src.NamespaceRegistrationTransactionDTO != nil {
		return json.Marshal(&src.NamespaceRegistrationTransactionDTO)
	}

	if src.NodeKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.NodeKeyLinkTransactionDTO)
	}

	if src.SecretLockTransactionDTO != nil {
		return json.Marshal(&src.SecretLockTransactionDTO)
	}

	if src.SecretProofTransactionDTO != nil {
		return json.Marshal(&src.SecretProofTransactionDTO)
	}

	if src.TransferTransactionDTO != nil {
		return json.Marshal(&src.TransferTransactionDTO)
	}

	if src.VotingKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.VotingKeyLinkTransactionDTO)
	}

	if src.VrfKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.VrfKeyLinkTransactionDTO)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableTransactionInfoDTOTransaction struct {
	value *TransactionInfoDTOTransaction
	isSet bool
}

func (v NullableTransactionInfoDTOTransaction) Get() *TransactionInfoDTOTransaction {
	return v.value
}

func (v *NullableTransactionInfoDTOTransaction) Set(val *TransactionInfoDTOTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionInfoDTOTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionInfoDTOTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionInfoDTOTransaction(val *TransactionInfoDTOTransaction) *NullableTransactionInfoDTOTransaction {
	return &NullableTransactionInfoDTOTransaction{value: val, isSet: true}
}

func (v NullableTransactionInfoDTOTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionInfoDTOTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


