/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// LockStatus Possible status of lock states: * 0 - UNUSED. * 1 - USED. 
type LockStatus int32

// List of LockStatus
const (
	_0 LockStatus = 0
	_1 LockStatus = 1
)

// All allowed values of LockStatus enum
var AllowedLockStatusEnumValues = []LockStatus{
	0,
	1,
}

func (v *LockStatus) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LockStatus(value)
	for _, existing := range AllowedLockStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LockStatus", value)
}

// NewLockStatusFromValue returns a pointer to a valid LockStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLockStatusFromValue(v int32) (*LockStatus, error) {
	ev := LockStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LockStatus: valid values are %v", v, AllowedLockStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LockStatus) IsValid() bool {
	for _, existing := range AllowedLockStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LockStatus value
func (v LockStatus) Ptr() *LockStatus {
	return &v
}

type NullableLockStatus struct {
	value *LockStatus
	isSet bool
}

func (v NullableLockStatus) Get() *LockStatus {
	return v.value
}

func (v *NullableLockStatus) Set(val *LockStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLockStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLockStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockStatus(val *LockStatus) *NullableLockStatus {
	return &NullableLockStatus{value: val, isSet: true}
}

func (v NullableLockStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

