/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NamespaceMetaDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceMetaDTO{}

// NamespaceMetaDTO struct for NamespaceMetaDTO
type NamespaceMetaDTO struct {
	// If true, the namespace is active.
	Active bool `json:"active"`
	Index int32 `json:"index"`
}

type _NamespaceMetaDTO NamespaceMetaDTO

// NewNamespaceMetaDTO instantiates a new NamespaceMetaDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceMetaDTO(active bool, index int32) *NamespaceMetaDTO {
	this := NamespaceMetaDTO{}
	this.Active = active
	this.Index = index
	return &this
}

// NewNamespaceMetaDTOWithDefaults instantiates a new NamespaceMetaDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceMetaDTOWithDefaults() *NamespaceMetaDTO {
	this := NamespaceMetaDTO{}
	return &this
}

// GetActive returns the Active field value
func (o *NamespaceMetaDTO) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *NamespaceMetaDTO) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *NamespaceMetaDTO) SetActive(v bool) {
	o.Active = v
}

// GetIndex returns the Index field value
func (o *NamespaceMetaDTO) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *NamespaceMetaDTO) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *NamespaceMetaDTO) SetIndex(v int32) {
	o.Index = v
}

func (o NamespaceMetaDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceMetaDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["index"] = o.Index
	return toSerialize, nil
}

func (o *NamespaceMetaDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNamespaceMetaDTO := _NamespaceMetaDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNamespaceMetaDTO)

	if err != nil {
		return err
	}

	*o = NamespaceMetaDTO(varNamespaceMetaDTO)

	return err
}

type NullableNamespaceMetaDTO struct {
	value *NamespaceMetaDTO
	isSet bool
}

func (v NullableNamespaceMetaDTO) Get() *NamespaceMetaDTO {
	return v.value
}

func (v *NullableNamespaceMetaDTO) Set(val *NamespaceMetaDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceMetaDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceMetaDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceMetaDTO(val *NamespaceMetaDTO) *NullableNamespaceMetaDTO {
	return &NullableNamespaceMetaDTO{value: val, isSet: true}
}

func (v NullableNamespaceMetaDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceMetaDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


