/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// ReceiptRoutesAPIService ReceiptRoutesAPI service
type ReceiptRoutesAPIService service

type ApiSearchAddressResolutionStatementsRequest struct {
	ctx context.Context
	ApiService *ReceiptRoutesAPIService
	height *string
	pageSize *int32
	pageNumber *int32
	offset *string
	order *Order
}

// Filter by block height.
func (r ApiSearchAddressResolutionStatementsRequest) Height(height string) ApiSearchAddressResolutionStatementsRequest {
	r.height = &height
	return r
}

// Select the number of entries to return.
func (r ApiSearchAddressResolutionStatementsRequest) PageSize(pageSize int32) ApiSearchAddressResolutionStatementsRequest {
	r.pageSize = &pageSize
	return r
}

// Filter by page number.
func (r ApiSearchAddressResolutionStatementsRequest) PageNumber(pageNumber int32) ApiSearchAddressResolutionStatementsRequest {
	r.pageNumber = &pageNumber
	return r
}

// Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
func (r ApiSearchAddressResolutionStatementsRequest) Offset(offset string) ApiSearchAddressResolutionStatementsRequest {
	r.offset = &offset
	return r
}

// Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id. 
func (r ApiSearchAddressResolutionStatementsRequest) Order(order Order) ApiSearchAddressResolutionStatementsRequest {
	r.order = &order
	return r
}

func (r ApiSearchAddressResolutionStatementsRequest) Execute() (*ResolutionStatementPage, *http.Response, error) {
	return r.ApiService.SearchAddressResolutionStatementsExecute(r)
}

/*
SearchAddressResolutionStatements Get receipts address resolution statements

Gets an array of address resolution statements.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchAddressResolutionStatementsRequest
*/
func (a *ReceiptRoutesAPIService) SearchAddressResolutionStatements(ctx context.Context) ApiSearchAddressResolutionStatementsRequest {
	return ApiSearchAddressResolutionStatementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResolutionStatementPage
func (a *ReceiptRoutesAPIService) SearchAddressResolutionStatementsExecute(r ApiSearchAddressResolutionStatementsRequest) (*ResolutionStatementPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResolutionStatementPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiptRoutesAPIService.SearchAddressResolutionStatements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statements/resolutions/address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 10
		r.pageSize = &defaultValue
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	} else {
		var defaultValue Order = "desc"
		r.order = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchMosaicResolutionStatementsRequest struct {
	ctx context.Context
	ApiService *ReceiptRoutesAPIService
	height *string
	pageSize *int32
	pageNumber *int32
	offset *string
	order *Order
}

// Filter by block height.
func (r ApiSearchMosaicResolutionStatementsRequest) Height(height string) ApiSearchMosaicResolutionStatementsRequest {
	r.height = &height
	return r
}

// Select the number of entries to return.
func (r ApiSearchMosaicResolutionStatementsRequest) PageSize(pageSize int32) ApiSearchMosaicResolutionStatementsRequest {
	r.pageSize = &pageSize
	return r
}

// Filter by page number.
func (r ApiSearchMosaicResolutionStatementsRequest) PageNumber(pageNumber int32) ApiSearchMosaicResolutionStatementsRequest {
	r.pageNumber = &pageNumber
	return r
}

// Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
func (r ApiSearchMosaicResolutionStatementsRequest) Offset(offset string) ApiSearchMosaicResolutionStatementsRequest {
	r.offset = &offset
	return r
}

// Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id. 
func (r ApiSearchMosaicResolutionStatementsRequest) Order(order Order) ApiSearchMosaicResolutionStatementsRequest {
	r.order = &order
	return r
}

func (r ApiSearchMosaicResolutionStatementsRequest) Execute() (*ResolutionStatementPage, *http.Response, error) {
	return r.ApiService.SearchMosaicResolutionStatementsExecute(r)
}

/*
SearchMosaicResolutionStatements Get receipts mosaic resolution statements

Gets an array of mosaic resolution statements.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchMosaicResolutionStatementsRequest
*/
func (a *ReceiptRoutesAPIService) SearchMosaicResolutionStatements(ctx context.Context) ApiSearchMosaicResolutionStatementsRequest {
	return ApiSearchMosaicResolutionStatementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResolutionStatementPage
func (a *ReceiptRoutesAPIService) SearchMosaicResolutionStatementsExecute(r ApiSearchMosaicResolutionStatementsRequest) (*ResolutionStatementPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResolutionStatementPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiptRoutesAPIService.SearchMosaicResolutionStatements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statements/resolutions/mosaic"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 10
		r.pageSize = &defaultValue
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	} else {
		var defaultValue Order = "desc"
		r.order = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchReceiptsRequest struct {
	ctx context.Context
	ApiService *ReceiptRoutesAPIService
	height *string
	fromHeight *string
	toHeight *string
	receiptType *[]ReceiptTypeEnum
	recipientAddress *string
	senderAddress *string
	targetAddress *string
	artifactId *string
	pageSize *int32
	pageNumber *int32
	offset *string
	order *Order
}

// Filter by block height.
func (r ApiSearchReceiptsRequest) Height(height string) ApiSearchReceiptsRequest {
	r.height = &height
	return r
}

// Only blocks with height greater or equal than this one are returned.
func (r ApiSearchReceiptsRequest) FromHeight(fromHeight string) ApiSearchReceiptsRequest {
	r.fromHeight = &fromHeight
	return r
}

// Only blocks with height smaller or equal than this one are returned.
func (r ApiSearchReceiptsRequest) ToHeight(toHeight string) ApiSearchReceiptsRequest {
	r.toHeight = &toHeight
	return r
}

// Filter by receipt type. To filter by multiple receipt types, add more filter query params like: &#x60;&#x60;receiptType&#x3D;8515&amp;receiptType&#x3D;20803&#x60;&#x60;. 
func (r ApiSearchReceiptsRequest) ReceiptType(receiptType []ReceiptTypeEnum) ApiSearchReceiptsRequest {
	r.receiptType = &receiptType
	return r
}

// Filter by address of the account receiving the transaction.
func (r ApiSearchReceiptsRequest) RecipientAddress(recipientAddress string) ApiSearchReceiptsRequest {
	r.recipientAddress = &recipientAddress
	return r
}

// Filter by address sending mosaics.
func (r ApiSearchReceiptsRequest) SenderAddress(senderAddress string) ApiSearchReceiptsRequest {
	r.senderAddress = &senderAddress
	return r
}

// Filter by target address.
func (r ApiSearchReceiptsRequest) TargetAddress(targetAddress string) ApiSearchReceiptsRequest {
	r.targetAddress = &targetAddress
	return r
}

// Mosaic or namespace identifier
func (r ApiSearchReceiptsRequest) ArtifactId(artifactId string) ApiSearchReceiptsRequest {
	r.artifactId = &artifactId
	return r
}

// Select the number of entries to return.
func (r ApiSearchReceiptsRequest) PageSize(pageSize int32) ApiSearchReceiptsRequest {
	r.pageSize = &pageSize
	return r
}

// Filter by page number.
func (r ApiSearchReceiptsRequest) PageNumber(pageNumber int32) ApiSearchReceiptsRequest {
	r.pageNumber = &pageNumber
	return r
}

// Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned. 
func (r ApiSearchReceiptsRequest) Offset(offset string) ApiSearchReceiptsRequest {
	r.offset = &offset
	return r
}

// Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id. 
func (r ApiSearchReceiptsRequest) Order(order Order) ApiSearchReceiptsRequest {
	r.order = &order
	return r
}

func (r ApiSearchReceiptsRequest) Execute() (*TransactionStatementPage, *http.Response, error) {
	return r.ApiService.SearchReceiptsExecute(r)
}

/*
SearchReceipts Search transaction statements

Gets an array of transaction statements.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchReceiptsRequest
*/
func (a *ReceiptRoutesAPIService) SearchReceipts(ctx context.Context) ApiSearchReceiptsRequest {
	return ApiSearchReceiptsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TransactionStatementPage
func (a *ReceiptRoutesAPIService) SearchReceiptsExecute(r ApiSearchReceiptsRequest) (*TransactionStatementPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionStatementPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReceiptRoutesAPIService.SearchReceipts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/statements/transaction"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.fromHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromHeight", r.fromHeight, "")
	}
	if r.toHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toHeight", r.toHeight, "")
	}
	if r.receiptType != nil {
		t := *r.receiptType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "receiptType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "receiptType", t, "multi")
		}
	}
	if r.recipientAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recipientAddress", r.recipientAddress, "")
	}
	if r.senderAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "senderAddress", r.senderAddress, "")
	}
	if r.targetAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "targetAddress", r.targetAddress, "")
	}
	if r.artifactId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "artifactId", r.artifactId, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	} else {
		var defaultValue int32 = 10
		r.pageSize = &defaultValue
	}
	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "")
	} else {
		var defaultValue int32 = 1
		r.pageNumber = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "")
	} else {
		var defaultValue Order = "desc"
		r.order = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
