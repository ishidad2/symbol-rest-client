/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImportanceBlockDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportanceBlockDTO{}

// ImportanceBlockDTO struct for ImportanceBlockDTO
type ImportanceBlockDTO struct {
	// A number that allows uint 32 values.
	Size int64 `json:"size"`
	// Entity's signature generated by the signer.
	Signature string `json:"signature"`
	// Public key.
	SignerPublicKey string `json:"signerPublicKey"`
	// Entity version.
	Version int32 `json:"version"`
	Network NetworkTypeEnum `json:"network"`
	Type int32 `json:"type"`
	// Height of the blockchain.
	Height string `json:"height"`
	// Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
	Timestamp string `json:"timestamp"`
	// Determines how hard is to harvest a new block, based on previous blocks.
	Difficulty string `json:"difficulty"`
	// 32-bytes VRF proof gamma.
	ProofGamma string `json:"proofGamma"`
	// 16-bytes VRF proof verification hash.
	ProofVerificationHash string `json:"proofVerificationHash"`
	// 32-bytes VRF proof scalar.
	ProofScalar string `json:"proofScalar"`
	PreviousBlockHash string `json:"previousBlockHash"`
	TransactionsHash string `json:"transactionsHash"`
	ReceiptsHash string `json:"receiptsHash"`
	StateHash string `json:"stateHash"`
	// Address encoded using a 32-character set.
	BeneficiaryAddress string `json:"beneficiaryAddress"`
	// Fee multiplier applied to transactions contained in block.
	FeeMultiplier int64 `json:"feeMultiplier"`
	// A number that allows uint 32 values.
	VotingEligibleAccountsCount int64 `json:"votingEligibleAccountsCount"`
	// A number that allows uint 64 values represented with a string.
	HarvestingEligibleAccountsCount string `json:"harvestingEligibleAccountsCount"`
	// Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
	TotalVotingBalance string `json:"totalVotingBalance"`
	PreviousImportanceBlockHash string `json:"previousImportanceBlockHash"`
}

type _ImportanceBlockDTO ImportanceBlockDTO

// NewImportanceBlockDTO instantiates a new ImportanceBlockDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportanceBlockDTO(size int64, signature string, signerPublicKey string, version int32, network NetworkTypeEnum, type_ int32, height string, timestamp string, difficulty string, proofGamma string, proofVerificationHash string, proofScalar string, previousBlockHash string, transactionsHash string, receiptsHash string, stateHash string, beneficiaryAddress string, feeMultiplier int64, votingEligibleAccountsCount int64, harvestingEligibleAccountsCount string, totalVotingBalance string, previousImportanceBlockHash string) *ImportanceBlockDTO {
	this := ImportanceBlockDTO{}
	this.Size = size
	this.Signature = signature
	this.SignerPublicKey = signerPublicKey
	this.Version = version
	this.Network = network
	this.Type = type_
	this.Height = height
	this.Timestamp = timestamp
	this.Difficulty = difficulty
	this.ProofGamma = proofGamma
	this.ProofVerificationHash = proofVerificationHash
	this.ProofScalar = proofScalar
	this.PreviousBlockHash = previousBlockHash
	this.TransactionsHash = transactionsHash
	this.ReceiptsHash = receiptsHash
	this.StateHash = stateHash
	this.BeneficiaryAddress = beneficiaryAddress
	this.FeeMultiplier = feeMultiplier
	this.VotingEligibleAccountsCount = votingEligibleAccountsCount
	this.HarvestingEligibleAccountsCount = harvestingEligibleAccountsCount
	this.TotalVotingBalance = totalVotingBalance
	this.PreviousImportanceBlockHash = previousImportanceBlockHash
	return &this
}

// NewImportanceBlockDTOWithDefaults instantiates a new ImportanceBlockDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportanceBlockDTOWithDefaults() *ImportanceBlockDTO {
	this := ImportanceBlockDTO{}
	return &this
}

// GetSize returns the Size field value
func (o *ImportanceBlockDTO) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *ImportanceBlockDTO) SetSize(v int64) {
	o.Size = v
}

// GetSignature returns the Signature field value
func (o *ImportanceBlockDTO) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *ImportanceBlockDTO) SetSignature(v string) {
	o.Signature = v
}

// GetSignerPublicKey returns the SignerPublicKey field value
func (o *ImportanceBlockDTO) GetSignerPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignerPublicKey
}

// GetSignerPublicKeyOk returns a tuple with the SignerPublicKey field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetSignerPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignerPublicKey, true
}

// SetSignerPublicKey sets field value
func (o *ImportanceBlockDTO) SetSignerPublicKey(v string) {
	o.SignerPublicKey = v
}

// GetVersion returns the Version field value
func (o *ImportanceBlockDTO) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ImportanceBlockDTO) SetVersion(v int32) {
	o.Version = v
}

// GetNetwork returns the Network field value
func (o *ImportanceBlockDTO) GetNetwork() NetworkTypeEnum {
	if o == nil {
		var ret NetworkTypeEnum
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetNetworkOk() (*NetworkTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *ImportanceBlockDTO) SetNetwork(v NetworkTypeEnum) {
	o.Network = v
}

// GetType returns the Type field value
func (o *ImportanceBlockDTO) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ImportanceBlockDTO) SetType(v int32) {
	o.Type = v
}

// GetHeight returns the Height field value
func (o *ImportanceBlockDTO) GetHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *ImportanceBlockDTO) SetHeight(v string) {
	o.Height = v
}

// GetTimestamp returns the Timestamp field value
func (o *ImportanceBlockDTO) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ImportanceBlockDTO) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetDifficulty returns the Difficulty field value
func (o *ImportanceBlockDTO) GetDifficulty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Difficulty
}

// GetDifficultyOk returns a tuple with the Difficulty field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetDifficultyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Difficulty, true
}

// SetDifficulty sets field value
func (o *ImportanceBlockDTO) SetDifficulty(v string) {
	o.Difficulty = v
}

// GetProofGamma returns the ProofGamma field value
func (o *ImportanceBlockDTO) GetProofGamma() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProofGamma
}

// GetProofGammaOk returns a tuple with the ProofGamma field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetProofGammaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProofGamma, true
}

// SetProofGamma sets field value
func (o *ImportanceBlockDTO) SetProofGamma(v string) {
	o.ProofGamma = v
}

// GetProofVerificationHash returns the ProofVerificationHash field value
func (o *ImportanceBlockDTO) GetProofVerificationHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProofVerificationHash
}

// GetProofVerificationHashOk returns a tuple with the ProofVerificationHash field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetProofVerificationHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProofVerificationHash, true
}

// SetProofVerificationHash sets field value
func (o *ImportanceBlockDTO) SetProofVerificationHash(v string) {
	o.ProofVerificationHash = v
}

// GetProofScalar returns the ProofScalar field value
func (o *ImportanceBlockDTO) GetProofScalar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProofScalar
}

// GetProofScalarOk returns a tuple with the ProofScalar field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetProofScalarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProofScalar, true
}

// SetProofScalar sets field value
func (o *ImportanceBlockDTO) SetProofScalar(v string) {
	o.ProofScalar = v
}

// GetPreviousBlockHash returns the PreviousBlockHash field value
func (o *ImportanceBlockDTO) GetPreviousBlockHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviousBlockHash
}

// GetPreviousBlockHashOk returns a tuple with the PreviousBlockHash field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetPreviousBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousBlockHash, true
}

// SetPreviousBlockHash sets field value
func (o *ImportanceBlockDTO) SetPreviousBlockHash(v string) {
	o.PreviousBlockHash = v
}

// GetTransactionsHash returns the TransactionsHash field value
func (o *ImportanceBlockDTO) GetTransactionsHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionsHash
}

// GetTransactionsHashOk returns a tuple with the TransactionsHash field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetTransactionsHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionsHash, true
}

// SetTransactionsHash sets field value
func (o *ImportanceBlockDTO) SetTransactionsHash(v string) {
	o.TransactionsHash = v
}

// GetReceiptsHash returns the ReceiptsHash field value
func (o *ImportanceBlockDTO) GetReceiptsHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReceiptsHash
}

// GetReceiptsHashOk returns a tuple with the ReceiptsHash field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetReceiptsHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceiptsHash, true
}

// SetReceiptsHash sets field value
func (o *ImportanceBlockDTO) SetReceiptsHash(v string) {
	o.ReceiptsHash = v
}

// GetStateHash returns the StateHash field value
func (o *ImportanceBlockDTO) GetStateHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateHash
}

// GetStateHashOk returns a tuple with the StateHash field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetStateHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateHash, true
}

// SetStateHash sets field value
func (o *ImportanceBlockDTO) SetStateHash(v string) {
	o.StateHash = v
}

// GetBeneficiaryAddress returns the BeneficiaryAddress field value
func (o *ImportanceBlockDTO) GetBeneficiaryAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeneficiaryAddress
}

// GetBeneficiaryAddressOk returns a tuple with the BeneficiaryAddress field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetBeneficiaryAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BeneficiaryAddress, true
}

// SetBeneficiaryAddress sets field value
func (o *ImportanceBlockDTO) SetBeneficiaryAddress(v string) {
	o.BeneficiaryAddress = v
}

// GetFeeMultiplier returns the FeeMultiplier field value
func (o *ImportanceBlockDTO) GetFeeMultiplier() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FeeMultiplier
}

// GetFeeMultiplierOk returns a tuple with the FeeMultiplier field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetFeeMultiplierOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeeMultiplier, true
}

// SetFeeMultiplier sets field value
func (o *ImportanceBlockDTO) SetFeeMultiplier(v int64) {
	o.FeeMultiplier = v
}

// GetVotingEligibleAccountsCount returns the VotingEligibleAccountsCount field value
func (o *ImportanceBlockDTO) GetVotingEligibleAccountsCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.VotingEligibleAccountsCount
}

// GetVotingEligibleAccountsCountOk returns a tuple with the VotingEligibleAccountsCount field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetVotingEligibleAccountsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VotingEligibleAccountsCount, true
}

// SetVotingEligibleAccountsCount sets field value
func (o *ImportanceBlockDTO) SetVotingEligibleAccountsCount(v int64) {
	o.VotingEligibleAccountsCount = v
}

// GetHarvestingEligibleAccountsCount returns the HarvestingEligibleAccountsCount field value
func (o *ImportanceBlockDTO) GetHarvestingEligibleAccountsCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HarvestingEligibleAccountsCount
}

// GetHarvestingEligibleAccountsCountOk returns a tuple with the HarvestingEligibleAccountsCount field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetHarvestingEligibleAccountsCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HarvestingEligibleAccountsCount, true
}

// SetHarvestingEligibleAccountsCount sets field value
func (o *ImportanceBlockDTO) SetHarvestingEligibleAccountsCount(v string) {
	o.HarvestingEligibleAccountsCount = v
}

// GetTotalVotingBalance returns the TotalVotingBalance field value
func (o *ImportanceBlockDTO) GetTotalVotingBalance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalVotingBalance
}

// GetTotalVotingBalanceOk returns a tuple with the TotalVotingBalance field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetTotalVotingBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalVotingBalance, true
}

// SetTotalVotingBalance sets field value
func (o *ImportanceBlockDTO) SetTotalVotingBalance(v string) {
	o.TotalVotingBalance = v
}

// GetPreviousImportanceBlockHash returns the PreviousImportanceBlockHash field value
func (o *ImportanceBlockDTO) GetPreviousImportanceBlockHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviousImportanceBlockHash
}

// GetPreviousImportanceBlockHashOk returns a tuple with the PreviousImportanceBlockHash field value
// and a boolean to check if the value has been set.
func (o *ImportanceBlockDTO) GetPreviousImportanceBlockHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousImportanceBlockHash, true
}

// SetPreviousImportanceBlockHash sets field value
func (o *ImportanceBlockDTO) SetPreviousImportanceBlockHash(v string) {
	o.PreviousImportanceBlockHash = v
}

func (o ImportanceBlockDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportanceBlockDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["size"] = o.Size
	toSerialize["signature"] = o.Signature
	toSerialize["signerPublicKey"] = o.SignerPublicKey
	toSerialize["version"] = o.Version
	toSerialize["network"] = o.Network
	toSerialize["type"] = o.Type
	toSerialize["height"] = o.Height
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["difficulty"] = o.Difficulty
	toSerialize["proofGamma"] = o.ProofGamma
	toSerialize["proofVerificationHash"] = o.ProofVerificationHash
	toSerialize["proofScalar"] = o.ProofScalar
	toSerialize["previousBlockHash"] = o.PreviousBlockHash
	toSerialize["transactionsHash"] = o.TransactionsHash
	toSerialize["receiptsHash"] = o.ReceiptsHash
	toSerialize["stateHash"] = o.StateHash
	toSerialize["beneficiaryAddress"] = o.BeneficiaryAddress
	toSerialize["feeMultiplier"] = o.FeeMultiplier
	toSerialize["votingEligibleAccountsCount"] = o.VotingEligibleAccountsCount
	toSerialize["harvestingEligibleAccountsCount"] = o.HarvestingEligibleAccountsCount
	toSerialize["totalVotingBalance"] = o.TotalVotingBalance
	toSerialize["previousImportanceBlockHash"] = o.PreviousImportanceBlockHash
	return toSerialize, nil
}

func (o *ImportanceBlockDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
		"signature",
		"signerPublicKey",
		"version",
		"network",
		"type",
		"height",
		"timestamp",
		"difficulty",
		"proofGamma",
		"proofVerificationHash",
		"proofScalar",
		"previousBlockHash",
		"transactionsHash",
		"receiptsHash",
		"stateHash",
		"beneficiaryAddress",
		"feeMultiplier",
		"votingEligibleAccountsCount",
		"harvestingEligibleAccountsCount",
		"totalVotingBalance",
		"previousImportanceBlockHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportanceBlockDTO := _ImportanceBlockDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportanceBlockDTO)

	if err != nil {
		return err
	}

	*o = ImportanceBlockDTO(varImportanceBlockDTO)

	return err
}

type NullableImportanceBlockDTO struct {
	value *ImportanceBlockDTO
	isSet bool
}

func (v NullableImportanceBlockDTO) Get() *ImportanceBlockDTO {
	return v.value
}

func (v *NullableImportanceBlockDTO) Set(val *ImportanceBlockDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableImportanceBlockDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableImportanceBlockDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportanceBlockDTO(val *ImportanceBlockDTO) *NullableImportanceBlockDTO {
	return &NullableImportanceBlockDTO{value: val, isSet: true}
}

func (v NullableImportanceBlockDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportanceBlockDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


