/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HashLockInfoDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HashLockInfoDTO{}

// HashLockInfoDTO struct for HashLockInfoDTO
type HashLockInfoDTO struct {
	Id string `json:"id"`
	Lock HashLockEntryDTO `json:"lock"`
}

type _HashLockInfoDTO HashLockInfoDTO

// NewHashLockInfoDTO instantiates a new HashLockInfoDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHashLockInfoDTO(id string, lock HashLockEntryDTO) *HashLockInfoDTO {
	this := HashLockInfoDTO{}
	this.Id = id
	this.Lock = lock
	return &this
}

// NewHashLockInfoDTOWithDefaults instantiates a new HashLockInfoDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHashLockInfoDTOWithDefaults() *HashLockInfoDTO {
	this := HashLockInfoDTO{}
	return &this
}

// GetId returns the Id field value
func (o *HashLockInfoDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HashLockInfoDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HashLockInfoDTO) SetId(v string) {
	o.Id = v
}

// GetLock returns the Lock field value
func (o *HashLockInfoDTO) GetLock() HashLockEntryDTO {
	if o == nil {
		var ret HashLockEntryDTO
		return ret
	}

	return o.Lock
}

// GetLockOk returns a tuple with the Lock field value
// and a boolean to check if the value has been set.
func (o *HashLockInfoDTO) GetLockOk() (*HashLockEntryDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lock, true
}

// SetLock sets field value
func (o *HashLockInfoDTO) SetLock(v HashLockEntryDTO) {
	o.Lock = v
}

func (o HashLockInfoDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HashLockInfoDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["lock"] = o.Lock
	return toSerialize, nil
}

func (o *HashLockInfoDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"lock",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHashLockInfoDTO := _HashLockInfoDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHashLockInfoDTO)

	if err != nil {
		return err
	}

	*o = HashLockInfoDTO(varHashLockInfoDTO)

	return err
}

type NullableHashLockInfoDTO struct {
	value *HashLockInfoDTO
	isSet bool
}

func (v NullableHashLockInfoDTO) Get() *HashLockInfoDTO {
	return v.value
}

func (v *NullableHashLockInfoDTO) Set(val *HashLockInfoDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableHashLockInfoDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableHashLockInfoDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHashLockInfoDTO(val *HashLockInfoDTO) *NullableHashLockInfoDTO {
	return &NullableHashLockInfoDTO{value: val, isSet: true}
}

func (v NullableHashLockInfoDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHashLockInfoDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


