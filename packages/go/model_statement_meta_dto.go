/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StatementMetaDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatementMetaDTO{}

// StatementMetaDTO Metadata related to the statment, including block information.
type StatementMetaDTO struct {
	// Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
	Timestamp string `json:"timestamp"`
}

type _StatementMetaDTO StatementMetaDTO

// NewStatementMetaDTO instantiates a new StatementMetaDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementMetaDTO(timestamp string) *StatementMetaDTO {
	this := StatementMetaDTO{}
	this.Timestamp = timestamp
	return &this
}

// NewStatementMetaDTOWithDefaults instantiates a new StatementMetaDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementMetaDTOWithDefaults() *StatementMetaDTO {
	this := StatementMetaDTO{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *StatementMetaDTO) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *StatementMetaDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *StatementMetaDTO) SetTimestamp(v string) {
	o.Timestamp = v
}

func (o StatementMetaDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatementMetaDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *StatementMetaDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatementMetaDTO := _StatementMetaDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatementMetaDTO)

	if err != nil {
		return err
	}

	*o = StatementMetaDTO(varStatementMetaDTO)

	return err
}

type NullableStatementMetaDTO struct {
	value *StatementMetaDTO
	isSet bool
}

func (v NullableStatementMetaDTO) Get() *StatementMetaDTO {
	return v.value
}

func (v *NullableStatementMetaDTO) Set(val *StatementMetaDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementMetaDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementMetaDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementMetaDTO(val *StatementMetaDTO) *NullableStatementMetaDTO {
	return &NullableStatementMetaDTO{value: val, isSet: true}
}

func (v NullableStatementMetaDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementMetaDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


