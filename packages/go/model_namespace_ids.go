/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the NamespaceIds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceIds{}

// NamespaceIds struct for NamespaceIds
type NamespaceIds struct {
	// Array of namespace identifiers.
	NamespaceIds []string `json:"namespaceIds,omitempty"`
}

// NewNamespaceIds instantiates a new NamespaceIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceIds() *NamespaceIds {
	this := NamespaceIds{}
	return &this
}

// NewNamespaceIdsWithDefaults instantiates a new NamespaceIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceIdsWithDefaults() *NamespaceIds {
	this := NamespaceIds{}
	return &this
}

// GetNamespaceIds returns the NamespaceIds field value if set, zero value otherwise.
func (o *NamespaceIds) GetNamespaceIds() []string {
	if o == nil || IsNil(o.NamespaceIds) {
		var ret []string
		return ret
	}
	return o.NamespaceIds
}

// GetNamespaceIdsOk returns a tuple with the NamespaceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceIds) GetNamespaceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.NamespaceIds) {
		return nil, false
	}
	return o.NamespaceIds, true
}

// HasNamespaceIds returns a boolean if a field has been set.
func (o *NamespaceIds) HasNamespaceIds() bool {
	if o != nil && !IsNil(o.NamespaceIds) {
		return true
	}

	return false
}

// SetNamespaceIds gets a reference to the given []string and assigns it to the NamespaceIds field.
func (o *NamespaceIds) SetNamespaceIds(v []string) {
	o.NamespaceIds = v
}

func (o NamespaceIds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceIds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NamespaceIds) {
		toSerialize["namespaceIds"] = o.NamespaceIds
	}
	return toSerialize, nil
}

type NullableNamespaceIds struct {
	value *NamespaceIds
	isSet bool
}

func (v NullableNamespaceIds) Get() *NamespaceIds {
	return v.value
}

func (v *NullableNamespaceIds) Set(val *NamespaceIds) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceIds) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceIds(val *NamespaceIds) *NullableNamespaceIds {
	return &NullableNamespaceIds{value: val, isSet: true}
}

func (v NullableNamespaceIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


