/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbeddedNamespaceRegistrationTransactionDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddedNamespaceRegistrationTransactionDTO{}

// EmbeddedNamespaceRegistrationTransactionDTO struct for EmbeddedNamespaceRegistrationTransactionDTO
type EmbeddedNamespaceRegistrationTransactionDTO struct {
	// Public key.
	SignerPublicKey string `json:"signerPublicKey"`
	// Entity version.
	Version int32 `json:"version"`
	Network NetworkTypeEnum `json:"network"`
	Type int32 `json:"type"`
	// Duration expressed in number of blocks.
	Duration *string `json:"duration,omitempty"`
	// Namespace identifier.
	ParentId *string `json:"parentId,omitempty"`
	// Namespace identifier.
	Id string `json:"id"`
	RegistrationType NamespaceRegistrationTypeEnum `json:"registrationType"`
	// Namespace name.
	Name string `json:"name"`
}

type _EmbeddedNamespaceRegistrationTransactionDTO EmbeddedNamespaceRegistrationTransactionDTO

// NewEmbeddedNamespaceRegistrationTransactionDTO instantiates a new EmbeddedNamespaceRegistrationTransactionDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddedNamespaceRegistrationTransactionDTO(signerPublicKey string, version int32, network NetworkTypeEnum, type_ int32, id string, registrationType NamespaceRegistrationTypeEnum, name string) *EmbeddedNamespaceRegistrationTransactionDTO {
	this := EmbeddedNamespaceRegistrationTransactionDTO{}
	this.SignerPublicKey = signerPublicKey
	this.Version = version
	this.Network = network
	this.Type = type_
	this.Id = id
	this.RegistrationType = registrationType
	this.Name = name
	return &this
}

// NewEmbeddedNamespaceRegistrationTransactionDTOWithDefaults instantiates a new EmbeddedNamespaceRegistrationTransactionDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddedNamespaceRegistrationTransactionDTOWithDefaults() *EmbeddedNamespaceRegistrationTransactionDTO {
	this := EmbeddedNamespaceRegistrationTransactionDTO{}
	return &this
}

// GetSignerPublicKey returns the SignerPublicKey field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetSignerPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignerPublicKey
}

// GetSignerPublicKeyOk returns a tuple with the SignerPublicKey field value
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetSignerPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignerPublicKey, true
}

// SetSignerPublicKey sets field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetSignerPublicKey(v string) {
	o.SignerPublicKey = v
}

// GetVersion returns the Version field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetVersion(v int32) {
	o.Version = v
}

// GetNetwork returns the Network field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetNetwork() NetworkTypeEnum {
	if o == nil {
		var ret NetworkTypeEnum
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetNetworkOk() (*NetworkTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetNetwork(v NetworkTypeEnum) {
	o.Network = v
}

// GetType returns the Type field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetType(v int32) {
	o.Type = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetDuration() string {
	if o == nil || IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetDurationOk() (*string, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetDuration(v string) {
	o.Duration = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetParentId(v string) {
	o.ParentId = &v
}

// GetId returns the Id field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetId(v string) {
	o.Id = v
}

// GetRegistrationType returns the RegistrationType field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetRegistrationType() NamespaceRegistrationTypeEnum {
	if o == nil {
		var ret NamespaceRegistrationTypeEnum
		return ret
	}

	return o.RegistrationType
}

// GetRegistrationTypeOk returns a tuple with the RegistrationType field value
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetRegistrationTypeOk() (*NamespaceRegistrationTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrationType, true
}

// SetRegistrationType sets field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetRegistrationType(v NamespaceRegistrationTypeEnum) {
	o.RegistrationType = v
}

// GetName returns the Name field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EmbeddedNamespaceRegistrationTransactionDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EmbeddedNamespaceRegistrationTransactionDTO) SetName(v string) {
	o.Name = v
}

func (o EmbeddedNamespaceRegistrationTransactionDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddedNamespaceRegistrationTransactionDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["signerPublicKey"] = o.SignerPublicKey
	toSerialize["version"] = o.Version
	toSerialize["network"] = o.Network
	toSerialize["type"] = o.Type
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	toSerialize["id"] = o.Id
	toSerialize["registrationType"] = o.RegistrationType
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *EmbeddedNamespaceRegistrationTransactionDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"signerPublicKey",
		"version",
		"network",
		"type",
		"id",
		"registrationType",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddedNamespaceRegistrationTransactionDTO := _EmbeddedNamespaceRegistrationTransactionDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbeddedNamespaceRegistrationTransactionDTO)

	if err != nil {
		return err
	}

	*o = EmbeddedNamespaceRegistrationTransactionDTO(varEmbeddedNamespaceRegistrationTransactionDTO)

	return err
}

type NullableEmbeddedNamespaceRegistrationTransactionDTO struct {
	value *EmbeddedNamespaceRegistrationTransactionDTO
	isSet bool
}

func (v NullableEmbeddedNamespaceRegistrationTransactionDTO) Get() *EmbeddedNamespaceRegistrationTransactionDTO {
	return v.value
}

func (v *NullableEmbeddedNamespaceRegistrationTransactionDTO) Set(val *EmbeddedNamespaceRegistrationTransactionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddedNamespaceRegistrationTransactionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddedNamespaceRegistrationTransactionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddedNamespaceRegistrationTransactionDTO(val *EmbeddedNamespaceRegistrationTransactionDTO) *NullableEmbeddedNamespaceRegistrationTransactionDTO {
	return &NullableEmbeddedNamespaceRegistrationTransactionDTO{value: val, isSet: true}
}

func (v NullableEmbeddedNamespaceRegistrationTransactionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddedNamespaceRegistrationTransactionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


