/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BmTreeSignature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BmTreeSignature{}

// BmTreeSignature struct for BmTreeSignature
type BmTreeSignature struct {
	Root ParentPublicKeySignaturePair `json:"root"`
	Bottom ParentPublicKeySignaturePair `json:"bottom"`
}

type _BmTreeSignature BmTreeSignature

// NewBmTreeSignature instantiates a new BmTreeSignature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBmTreeSignature(root ParentPublicKeySignaturePair, bottom ParentPublicKeySignaturePair) *BmTreeSignature {
	this := BmTreeSignature{}
	this.Root = root
	this.Bottom = bottom
	return &this
}

// NewBmTreeSignatureWithDefaults instantiates a new BmTreeSignature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBmTreeSignatureWithDefaults() *BmTreeSignature {
	this := BmTreeSignature{}
	return &this
}

// GetRoot returns the Root field value
func (o *BmTreeSignature) GetRoot() ParentPublicKeySignaturePair {
	if o == nil {
		var ret ParentPublicKeySignaturePair
		return ret
	}

	return o.Root
}

// GetRootOk returns a tuple with the Root field value
// and a boolean to check if the value has been set.
func (o *BmTreeSignature) GetRootOk() (*ParentPublicKeySignaturePair, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Root, true
}

// SetRoot sets field value
func (o *BmTreeSignature) SetRoot(v ParentPublicKeySignaturePair) {
	o.Root = v
}

// GetBottom returns the Bottom field value
func (o *BmTreeSignature) GetBottom() ParentPublicKeySignaturePair {
	if o == nil {
		var ret ParentPublicKeySignaturePair
		return ret
	}

	return o.Bottom
}

// GetBottomOk returns a tuple with the Bottom field value
// and a boolean to check if the value has been set.
func (o *BmTreeSignature) GetBottomOk() (*ParentPublicKeySignaturePair, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bottom, true
}

// SetBottom sets field value
func (o *BmTreeSignature) SetBottom(v ParentPublicKeySignaturePair) {
	o.Bottom = v
}

func (o BmTreeSignature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BmTreeSignature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["root"] = o.Root
	toSerialize["bottom"] = o.Bottom
	return toSerialize, nil
}

func (o *BmTreeSignature) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"root",
		"bottom",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBmTreeSignature := _BmTreeSignature{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBmTreeSignature)

	if err != nil {
		return err
	}

	*o = BmTreeSignature(varBmTreeSignature)

	return err
}

type NullableBmTreeSignature struct {
	value *BmTreeSignature
	isSet bool
}

func (v NullableBmTreeSignature) Get() *BmTreeSignature {
	return v.value
}

func (v *NullableBmTreeSignature) Set(val *BmTreeSignature) {
	v.value = val
	v.isSet = true
}

func (v NullableBmTreeSignature) IsSet() bool {
	return v.isSet
}

func (v *NullableBmTreeSignature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBmTreeSignature(val *BmTreeSignature) *NullableBmTreeSignature {
	return &NullableBmTreeSignature{value: val, isSet: true}
}

func (v NullableBmTreeSignature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBmTreeSignature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


