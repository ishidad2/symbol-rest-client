/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResolutionEntryDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolutionEntryDTO{}

// ResolutionEntryDTO struct for ResolutionEntryDTO
type ResolutionEntryDTO struct {
	Source SourceDTO `json:"source"`
	Resolved ResolutionEntryDTOResolved `json:"resolved"`
}

type _ResolutionEntryDTO ResolutionEntryDTO

// NewResolutionEntryDTO instantiates a new ResolutionEntryDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolutionEntryDTO(source SourceDTO, resolved ResolutionEntryDTOResolved) *ResolutionEntryDTO {
	this := ResolutionEntryDTO{}
	this.Source = source
	this.Resolved = resolved
	return &this
}

// NewResolutionEntryDTOWithDefaults instantiates a new ResolutionEntryDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolutionEntryDTOWithDefaults() *ResolutionEntryDTO {
	this := ResolutionEntryDTO{}
	return &this
}

// GetSource returns the Source field value
func (o *ResolutionEntryDTO) GetSource() SourceDTO {
	if o == nil {
		var ret SourceDTO
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ResolutionEntryDTO) GetSourceOk() (*SourceDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ResolutionEntryDTO) SetSource(v SourceDTO) {
	o.Source = v
}

// GetResolved returns the Resolved field value
func (o *ResolutionEntryDTO) GetResolved() ResolutionEntryDTOResolved {
	if o == nil {
		var ret ResolutionEntryDTOResolved
		return ret
	}

	return o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value
// and a boolean to check if the value has been set.
func (o *ResolutionEntryDTO) GetResolvedOk() (*ResolutionEntryDTOResolved, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resolved, true
}

// SetResolved sets field value
func (o *ResolutionEntryDTO) SetResolved(v ResolutionEntryDTOResolved) {
	o.Resolved = v
}

func (o ResolutionEntryDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolutionEntryDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	toSerialize["resolved"] = o.Resolved
	return toSerialize, nil
}

func (o *ResolutionEntryDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"resolved",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResolutionEntryDTO := _ResolutionEntryDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResolutionEntryDTO)

	if err != nil {
		return err
	}

	*o = ResolutionEntryDTO(varResolutionEntryDTO)

	return err
}

type NullableResolutionEntryDTO struct {
	value *ResolutionEntryDTO
	isSet bool
}

func (v NullableResolutionEntryDTO) Get() *ResolutionEntryDTO {
	return v.value
}

func (v *NullableResolutionEntryDTO) Set(val *ResolutionEntryDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableResolutionEntryDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableResolutionEntryDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolutionEntryDTO(val *ResolutionEntryDTO) *NullableResolutionEntryDTO {
	return &NullableResolutionEntryDTO{value: val, isSet: true}
}

func (v NullableResolutionEntryDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolutionEntryDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


