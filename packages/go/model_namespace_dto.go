/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NamespaceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceDTO{}

// NamespaceDTO struct for NamespaceDTO
type NamespaceDTO struct {
	// The version of the state
	Version int32 `json:"version"`
	RegistrationType NamespaceRegistrationTypeEnum `json:"registrationType"`
	// Level of the namespace.
	Depth int32 `json:"depth"`
	// Namespace identifier.
	Level0 string `json:"level0"`
	// Namespace identifier.
	Level1 *string `json:"level1,omitempty"`
	// Namespace identifier.
	Level2 *string `json:"level2,omitempty"`
	Alias AliasDTO `json:"alias"`
	// Namespace identifier.
	ParentId string `json:"parentId"`
	// Address encoded using a 32-character set.
	OwnerAddress string `json:"ownerAddress"`
	// Height of the blockchain.
	StartHeight string `json:"startHeight"`
	// Height of the blockchain.
	EndHeight string `json:"endHeight"`
}

type _NamespaceDTO NamespaceDTO

// NewNamespaceDTO instantiates a new NamespaceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceDTO(version int32, registrationType NamespaceRegistrationTypeEnum, depth int32, level0 string, alias AliasDTO, parentId string, ownerAddress string, startHeight string, endHeight string) *NamespaceDTO {
	this := NamespaceDTO{}
	this.Version = version
	this.RegistrationType = registrationType
	this.Depth = depth
	this.Level0 = level0
	this.Alias = alias
	this.ParentId = parentId
	this.OwnerAddress = ownerAddress
	this.StartHeight = startHeight
	this.EndHeight = endHeight
	return &this
}

// NewNamespaceDTOWithDefaults instantiates a new NamespaceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceDTOWithDefaults() *NamespaceDTO {
	this := NamespaceDTO{}
	return &this
}

// GetVersion returns the Version field value
func (o *NamespaceDTO) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *NamespaceDTO) SetVersion(v int32) {
	o.Version = v
}

// GetRegistrationType returns the RegistrationType field value
func (o *NamespaceDTO) GetRegistrationType() NamespaceRegistrationTypeEnum {
	if o == nil {
		var ret NamespaceRegistrationTypeEnum
		return ret
	}

	return o.RegistrationType
}

// GetRegistrationTypeOk returns a tuple with the RegistrationType field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetRegistrationTypeOk() (*NamespaceRegistrationTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrationType, true
}

// SetRegistrationType sets field value
func (o *NamespaceDTO) SetRegistrationType(v NamespaceRegistrationTypeEnum) {
	o.RegistrationType = v
}

// GetDepth returns the Depth field value
func (o *NamespaceDTO) GetDepth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Depth
}

// GetDepthOk returns a tuple with the Depth field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetDepthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Depth, true
}

// SetDepth sets field value
func (o *NamespaceDTO) SetDepth(v int32) {
	o.Depth = v
}

// GetLevel0 returns the Level0 field value
func (o *NamespaceDTO) GetLevel0() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level0
}

// GetLevel0Ok returns a tuple with the Level0 field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetLevel0Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level0, true
}

// SetLevel0 sets field value
func (o *NamespaceDTO) SetLevel0(v string) {
	o.Level0 = v
}

// GetLevel1 returns the Level1 field value if set, zero value otherwise.
func (o *NamespaceDTO) GetLevel1() string {
	if o == nil || IsNil(o.Level1) {
		var ret string
		return ret
	}
	return *o.Level1
}

// GetLevel1Ok returns a tuple with the Level1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetLevel1Ok() (*string, bool) {
	if o == nil || IsNil(o.Level1) {
		return nil, false
	}
	return o.Level1, true
}

// HasLevel1 returns a boolean if a field has been set.
func (o *NamespaceDTO) HasLevel1() bool {
	if o != nil && !IsNil(o.Level1) {
		return true
	}

	return false
}

// SetLevel1 gets a reference to the given string and assigns it to the Level1 field.
func (o *NamespaceDTO) SetLevel1(v string) {
	o.Level1 = &v
}

// GetLevel2 returns the Level2 field value if set, zero value otherwise.
func (o *NamespaceDTO) GetLevel2() string {
	if o == nil || IsNil(o.Level2) {
		var ret string
		return ret
	}
	return *o.Level2
}

// GetLevel2Ok returns a tuple with the Level2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetLevel2Ok() (*string, bool) {
	if o == nil || IsNil(o.Level2) {
		return nil, false
	}
	return o.Level2, true
}

// HasLevel2 returns a boolean if a field has been set.
func (o *NamespaceDTO) HasLevel2() bool {
	if o != nil && !IsNil(o.Level2) {
		return true
	}

	return false
}

// SetLevel2 gets a reference to the given string and assigns it to the Level2 field.
func (o *NamespaceDTO) SetLevel2(v string) {
	o.Level2 = &v
}

// GetAlias returns the Alias field value
func (o *NamespaceDTO) GetAlias() AliasDTO {
	if o == nil {
		var ret AliasDTO
		return ret
	}

	return o.Alias
}

// GetAliasOk returns a tuple with the Alias field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetAliasOk() (*AliasDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alias, true
}

// SetAlias sets field value
func (o *NamespaceDTO) SetAlias(v AliasDTO) {
	o.Alias = v
}

// GetParentId returns the ParentId field value
func (o *NamespaceDTO) GetParentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentId, true
}

// SetParentId sets field value
func (o *NamespaceDTO) SetParentId(v string) {
	o.ParentId = v
}

// GetOwnerAddress returns the OwnerAddress field value
func (o *NamespaceDTO) GetOwnerAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerAddress
}

// GetOwnerAddressOk returns a tuple with the OwnerAddress field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetOwnerAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerAddress, true
}

// SetOwnerAddress sets field value
func (o *NamespaceDTO) SetOwnerAddress(v string) {
	o.OwnerAddress = v
}

// GetStartHeight returns the StartHeight field value
func (o *NamespaceDTO) GetStartHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartHeight
}

// GetStartHeightOk returns a tuple with the StartHeight field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetStartHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartHeight, true
}

// SetStartHeight sets field value
func (o *NamespaceDTO) SetStartHeight(v string) {
	o.StartHeight = v
}

// GetEndHeight returns the EndHeight field value
func (o *NamespaceDTO) GetEndHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndHeight
}

// GetEndHeightOk returns a tuple with the EndHeight field value
// and a boolean to check if the value has been set.
func (o *NamespaceDTO) GetEndHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndHeight, true
}

// SetEndHeight sets field value
func (o *NamespaceDTO) SetEndHeight(v string) {
	o.EndHeight = v
}

func (o NamespaceDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["registrationType"] = o.RegistrationType
	toSerialize["depth"] = o.Depth
	toSerialize["level0"] = o.Level0
	if !IsNil(o.Level1) {
		toSerialize["level1"] = o.Level1
	}
	if !IsNil(o.Level2) {
		toSerialize["level2"] = o.Level2
	}
	toSerialize["alias"] = o.Alias
	toSerialize["parentId"] = o.ParentId
	toSerialize["ownerAddress"] = o.OwnerAddress
	toSerialize["startHeight"] = o.StartHeight
	toSerialize["endHeight"] = o.EndHeight
	return toSerialize, nil
}

func (o *NamespaceDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"registrationType",
		"depth",
		"level0",
		"alias",
		"parentId",
		"ownerAddress",
		"startHeight",
		"endHeight",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNamespaceDTO := _NamespaceDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNamespaceDTO)

	if err != nil {
		return err
	}

	*o = NamespaceDTO(varNamespaceDTO)

	return err
}

type NullableNamespaceDTO struct {
	value *NamespaceDTO
	isSet bool
}

func (v NullableNamespaceDTO) Get() *NamespaceDTO {
	return v.value
}

func (v *NullableNamespaceDTO) Set(val *NamespaceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceDTO(val *NamespaceDTO) *NullableNamespaceDTO {
	return &NullableNamespaceDTO{value: val, isSet: true}
}

func (v NullableNamespaceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


