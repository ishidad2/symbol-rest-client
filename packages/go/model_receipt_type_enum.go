/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
)

// ReceiptTypeEnum Type of receipt: * 0x124D (4685 decimal) - Mosaic_Rental_Fee. * 0x134E (4942 decimal) - Namespace_Rental_Fee. * 0x2143 (8515 decimal) - Harvest_Fee. * 0x2248 (8776 decimal) - LockHash_Completed. * 0x2348 (9032 decimal) - LockHash_Expired. * 0x2252 (8786 decimal) - LockSecret_Completed. * 0x2352 (9042 decimal) - LockSecret_Expired. * 0x3148 (12616 decimal) - LockHash_Created. * 0x3152 (12626 decimal) - LockSecret_Created. * 0x414D (16717 decimal) - Mosaic_Expired. * 0x414E (16718 decimal) - Namespace_Expired. * 0x424E (16974 decimal) - Namespace_Deleted. * 0x5143 (20803 decimal) - Inflation. * 0xE143 (57667 decimal) - Transaction_Group. * 0xF143 (61763 decimal) - Address_Alias_Resolution. * 0xF243 (62019 decimal) - Mosaic_Alias_Resolution. 
type ReceiptTypeEnum int32

// List of ReceiptTypeEnum
const (
	_4685 ReceiptTypeEnum = 4685
	_4942 ReceiptTypeEnum = 4942
	_8515 ReceiptTypeEnum = 8515
	_8776 ReceiptTypeEnum = 8776
	_9032 ReceiptTypeEnum = 9032
	_8786 ReceiptTypeEnum = 8786
	_9042 ReceiptTypeEnum = 9042
	_12616 ReceiptTypeEnum = 12616
	_12626 ReceiptTypeEnum = 12626
	_16717 ReceiptTypeEnum = 16717
	_16718 ReceiptTypeEnum = 16718
	_16974 ReceiptTypeEnum = 16974
	_20803 ReceiptTypeEnum = 20803
	_57667 ReceiptTypeEnum = 57667
	_61763 ReceiptTypeEnum = 61763
	_62019 ReceiptTypeEnum = 62019
)

// All allowed values of ReceiptTypeEnum enum
var AllowedReceiptTypeEnumEnumValues = []ReceiptTypeEnum{
	4685,
	4942,
	8515,
	8776,
	9032,
	8786,
	9042,
	12616,
	12626,
	16717,
	16718,
	16974,
	20803,
	57667,
	61763,
	62019,
}

func (v *ReceiptTypeEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReceiptTypeEnum(value)
	for _, existing := range AllowedReceiptTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReceiptTypeEnum", value)
}

// NewReceiptTypeEnumFromValue returns a pointer to a valid ReceiptTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReceiptTypeEnumFromValue(v int32) (*ReceiptTypeEnum, error) {
	ev := ReceiptTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReceiptTypeEnum: valid values are %v", v, AllowedReceiptTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReceiptTypeEnum) IsValid() bool {
	for _, existing := range AllowedReceiptTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReceiptTypeEnum value
func (v ReceiptTypeEnum) Ptr() *ReceiptTypeEnum {
	return &v
}

type NullableReceiptTypeEnum struct {
	value *ReceiptTypeEnum
	isSet bool
}

func (v NullableReceiptTypeEnum) Get() *ReceiptTypeEnum {
	return v.value
}

func (v *NullableReceiptTypeEnum) Set(val *ReceiptTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiptTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiptTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiptTypeEnum(val *ReceiptTypeEnum) *NullableReceiptTypeEnum {
	return &NullableReceiptTypeEnum{value: val, isSet: true}
}

func (v NullableReceiptTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiptTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

