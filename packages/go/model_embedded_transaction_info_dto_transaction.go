/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"fmt"
	"bytes"
)

// EmbeddedTransactionInfoDTOTransaction struct for EmbeddedTransactionInfoDTOTransaction
type EmbeddedTransactionInfoDTOTransaction struct {
	EmbeddedAccountAddressRestrictionTransactionDTO *EmbeddedAccountAddressRestrictionTransactionDTO
	EmbeddedAccountKeyLinkTransactionDTO *EmbeddedAccountKeyLinkTransactionDTO
	EmbeddedAccountMetadataTransactionDTO *EmbeddedAccountMetadataTransactionDTO
	EmbeddedAccountMosaicRestrictionTransactionDTO *EmbeddedAccountMosaicRestrictionTransactionDTO
	EmbeddedAccountOperationRestrictionTransactionDTO *EmbeddedAccountOperationRestrictionTransactionDTO
	EmbeddedAddressAliasTransactionDTO *EmbeddedAddressAliasTransactionDTO
	EmbeddedHashLockTransactionDTO *EmbeddedHashLockTransactionDTO
	EmbeddedMosaicAddressRestrictionTransactionDTO *EmbeddedMosaicAddressRestrictionTransactionDTO
	EmbeddedMosaicAliasTransactionDTO *EmbeddedMosaicAliasTransactionDTO
	EmbeddedMosaicDefinitionTransactionDTO *EmbeddedMosaicDefinitionTransactionDTO
	EmbeddedMosaicGlobalRestrictionTransactionDTO *EmbeddedMosaicGlobalRestrictionTransactionDTO
	EmbeddedMosaicMetadataTransactionDTO *EmbeddedMosaicMetadataTransactionDTO
	EmbeddedMosaicSupplyChangeTransactionDTO *EmbeddedMosaicSupplyChangeTransactionDTO
	EmbeddedMosaicSupplyRevocationTransactionDTO *EmbeddedMosaicSupplyRevocationTransactionDTO
	EmbeddedMultisigAccountModificationTransactionDTO *EmbeddedMultisigAccountModificationTransactionDTO
	EmbeddedNamespaceMetadataTransactionDTO *EmbeddedNamespaceMetadataTransactionDTO
	EmbeddedNamespaceRegistrationTransactionDTO *EmbeddedNamespaceRegistrationTransactionDTO
	EmbeddedNodeKeyLinkTransactionDTO *EmbeddedNodeKeyLinkTransactionDTO
	EmbeddedSecretLockTransactionDTO *EmbeddedSecretLockTransactionDTO
	EmbeddedSecretProofTransactionDTO *EmbeddedSecretProofTransactionDTO
	EmbeddedTransferTransactionDTO *EmbeddedTransferTransactionDTO
	EmbeddedVotingKeyLinkTransactionDTO *EmbeddedVotingKeyLinkTransactionDTO
	EmbeddedVrfKeyLinkTransactionDTO *EmbeddedVrfKeyLinkTransactionDTO
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *EmbeddedTransactionInfoDTOTransaction) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into EmbeddedAccountAddressRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountAddressRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountAddressRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountAddressRestrictionTransactionDTO)
		if string(jsonEmbeddedAccountAddressRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountAddressRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountAddressRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountAddressRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountKeyLinkTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountKeyLinkTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountKeyLinkTransactionDTO)
		if string(jsonEmbeddedAccountKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountMetadataTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountMetadataTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountMetadataTransactionDTO)
		if string(jsonEmbeddedAccountMetadataTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountMosaicRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountMosaicRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountMosaicRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountMosaicRestrictionTransactionDTO)
		if string(jsonEmbeddedAccountMosaicRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountMosaicRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountMosaicRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountMosaicRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAccountOperationRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAccountOperationRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedAccountOperationRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedAccountOperationRestrictionTransactionDTO)
		if string(jsonEmbeddedAccountOperationRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAccountOperationRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAccountOperationRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAccountOperationRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedAddressAliasTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedAddressAliasTransactionDTO);
	if err == nil {
		jsonEmbeddedAddressAliasTransactionDTO, _ := json.Marshal(dst.EmbeddedAddressAliasTransactionDTO)
		if string(jsonEmbeddedAddressAliasTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedAddressAliasTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedAddressAliasTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedAddressAliasTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedHashLockTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedHashLockTransactionDTO);
	if err == nil {
		jsonEmbeddedHashLockTransactionDTO, _ := json.Marshal(dst.EmbeddedHashLockTransactionDTO)
		if string(jsonEmbeddedHashLockTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedHashLockTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedHashLockTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedHashLockTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicAddressRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicAddressRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicAddressRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicAddressRestrictionTransactionDTO)
		if string(jsonEmbeddedMosaicAddressRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicAddressRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicAddressRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicAddressRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicAliasTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicAliasTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicAliasTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicAliasTransactionDTO)
		if string(jsonEmbeddedMosaicAliasTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicAliasTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicAliasTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicAliasTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicDefinitionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicDefinitionTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicDefinitionTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicDefinitionTransactionDTO)
		if string(jsonEmbeddedMosaicDefinitionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicDefinitionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicDefinitionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicDefinitionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicGlobalRestrictionTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicGlobalRestrictionTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicGlobalRestrictionTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicGlobalRestrictionTransactionDTO)
		if string(jsonEmbeddedMosaicGlobalRestrictionTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicGlobalRestrictionTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicGlobalRestrictionTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicGlobalRestrictionTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicMetadataTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicMetadataTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicMetadataTransactionDTO)
		if string(jsonEmbeddedMosaicMetadataTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicSupplyChangeTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicSupplyChangeTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicSupplyChangeTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicSupplyChangeTransactionDTO)
		if string(jsonEmbeddedMosaicSupplyChangeTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicSupplyChangeTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicSupplyChangeTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicSupplyChangeTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMosaicSupplyRevocationTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMosaicSupplyRevocationTransactionDTO);
	if err == nil {
		jsonEmbeddedMosaicSupplyRevocationTransactionDTO, _ := json.Marshal(dst.EmbeddedMosaicSupplyRevocationTransactionDTO)
		if string(jsonEmbeddedMosaicSupplyRevocationTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMosaicSupplyRevocationTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMosaicSupplyRevocationTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMosaicSupplyRevocationTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedMultisigAccountModificationTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedMultisigAccountModificationTransactionDTO);
	if err == nil {
		jsonEmbeddedMultisigAccountModificationTransactionDTO, _ := json.Marshal(dst.EmbeddedMultisigAccountModificationTransactionDTO)
		if string(jsonEmbeddedMultisigAccountModificationTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedMultisigAccountModificationTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedMultisigAccountModificationTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedMultisigAccountModificationTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedNamespaceMetadataTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedNamespaceMetadataTransactionDTO);
	if err == nil {
		jsonEmbeddedNamespaceMetadataTransactionDTO, _ := json.Marshal(dst.EmbeddedNamespaceMetadataTransactionDTO)
		if string(jsonEmbeddedNamespaceMetadataTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedNamespaceMetadataTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedNamespaceMetadataTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedNamespaceMetadataTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedNamespaceRegistrationTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedNamespaceRegistrationTransactionDTO);
	if err == nil {
		jsonEmbeddedNamespaceRegistrationTransactionDTO, _ := json.Marshal(dst.EmbeddedNamespaceRegistrationTransactionDTO)
		if string(jsonEmbeddedNamespaceRegistrationTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedNamespaceRegistrationTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedNamespaceRegistrationTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedNamespaceRegistrationTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedNodeKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedNodeKeyLinkTransactionDTO);
	if err == nil {
		jsonEmbeddedNodeKeyLinkTransactionDTO, _ := json.Marshal(dst.EmbeddedNodeKeyLinkTransactionDTO)
		if string(jsonEmbeddedNodeKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedNodeKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedNodeKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedNodeKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedSecretLockTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedSecretLockTransactionDTO);
	if err == nil {
		jsonEmbeddedSecretLockTransactionDTO, _ := json.Marshal(dst.EmbeddedSecretLockTransactionDTO)
		if string(jsonEmbeddedSecretLockTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedSecretLockTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedSecretLockTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedSecretLockTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedSecretProofTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedSecretProofTransactionDTO);
	if err == nil {
		jsonEmbeddedSecretProofTransactionDTO, _ := json.Marshal(dst.EmbeddedSecretProofTransactionDTO)
		if string(jsonEmbeddedSecretProofTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedSecretProofTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedSecretProofTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedSecretProofTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedTransferTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedTransferTransactionDTO);
	if err == nil {
		jsonEmbeddedTransferTransactionDTO, _ := json.Marshal(dst.EmbeddedTransferTransactionDTO)
		if string(jsonEmbeddedTransferTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedTransferTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedTransferTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedTransferTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedVotingKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedVotingKeyLinkTransactionDTO);
	if err == nil {
		jsonEmbeddedVotingKeyLinkTransactionDTO, _ := json.Marshal(dst.EmbeddedVotingKeyLinkTransactionDTO)
		if string(jsonEmbeddedVotingKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedVotingKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedVotingKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedVotingKeyLinkTransactionDTO = nil
	}

	// try to unmarshal JSON data into EmbeddedVrfKeyLinkTransactionDTO
	err = json.Unmarshal(data, &dst.EmbeddedVrfKeyLinkTransactionDTO);
	if err == nil {
		jsonEmbeddedVrfKeyLinkTransactionDTO, _ := json.Marshal(dst.EmbeddedVrfKeyLinkTransactionDTO)
		if string(jsonEmbeddedVrfKeyLinkTransactionDTO) == "{}" { // empty struct
			dst.EmbeddedVrfKeyLinkTransactionDTO = nil
		} else {
			return nil // data stored in dst.EmbeddedVrfKeyLinkTransactionDTO, return on the first match
		}
	} else {
		dst.EmbeddedVrfKeyLinkTransactionDTO = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(EmbeddedTransactionInfoDTOTransaction)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *EmbeddedTransactionInfoDTOTransaction) MarshalJSON() ([]byte, error) {
	if src.EmbeddedAccountAddressRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountAddressRestrictionTransactionDTO)
	}

	if src.EmbeddedAccountKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountKeyLinkTransactionDTO)
	}

	if src.EmbeddedAccountMetadataTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountMetadataTransactionDTO)
	}

	if src.EmbeddedAccountMosaicRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountMosaicRestrictionTransactionDTO)
	}

	if src.EmbeddedAccountOperationRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAccountOperationRestrictionTransactionDTO)
	}

	if src.EmbeddedAddressAliasTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedAddressAliasTransactionDTO)
	}

	if src.EmbeddedHashLockTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedHashLockTransactionDTO)
	}

	if src.EmbeddedMosaicAddressRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicAddressRestrictionTransactionDTO)
	}

	if src.EmbeddedMosaicAliasTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicAliasTransactionDTO)
	}

	if src.EmbeddedMosaicDefinitionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicDefinitionTransactionDTO)
	}

	if src.EmbeddedMosaicGlobalRestrictionTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicGlobalRestrictionTransactionDTO)
	}

	if src.EmbeddedMosaicMetadataTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicMetadataTransactionDTO)
	}

	if src.EmbeddedMosaicSupplyChangeTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicSupplyChangeTransactionDTO)
	}

	if src.EmbeddedMosaicSupplyRevocationTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMosaicSupplyRevocationTransactionDTO)
	}

	if src.EmbeddedMultisigAccountModificationTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedMultisigAccountModificationTransactionDTO)
	}

	if src.EmbeddedNamespaceMetadataTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedNamespaceMetadataTransactionDTO)
	}

	if src.EmbeddedNamespaceRegistrationTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedNamespaceRegistrationTransactionDTO)
	}

	if src.EmbeddedNodeKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedNodeKeyLinkTransactionDTO)
	}

	if src.EmbeddedSecretLockTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedSecretLockTransactionDTO)
	}

	if src.EmbeddedSecretProofTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedSecretProofTransactionDTO)
	}

	if src.EmbeddedTransferTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedTransferTransactionDTO)
	}

	if src.EmbeddedVotingKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedVotingKeyLinkTransactionDTO)
	}

	if src.EmbeddedVrfKeyLinkTransactionDTO != nil {
		return json.Marshal(&src.EmbeddedVrfKeyLinkTransactionDTO)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableEmbeddedTransactionInfoDTOTransaction struct {
	value *EmbeddedTransactionInfoDTOTransaction
	isSet bool
}

func (v NullableEmbeddedTransactionInfoDTOTransaction) Get() *EmbeddedTransactionInfoDTOTransaction {
	return v.value
}

func (v *NullableEmbeddedTransactionInfoDTOTransaction) Set(val *EmbeddedTransactionInfoDTOTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddedTransactionInfoDTOTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddedTransactionInfoDTOTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddedTransactionInfoDTOTransaction(val *EmbeddedTransactionInfoDTOTransaction) *NullableEmbeddedTransactionInfoDTOTransaction {
	return &NullableEmbeddedTransactionInfoDTOTransaction{value: val, isSet: true}
}

func (v NullableEmbeddedTransactionInfoDTOTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddedTransactionInfoDTOTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


