/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceDTO{}

// SourceDTO Transaction that triggered the receipt.
type SourceDTO struct {
	// A number that allows uint 32 values.
	PrimaryId int64 `json:"primaryId"`
	// A number that allows uint 32 values.
	SecondaryId int64 `json:"secondaryId"`
}

type _SourceDTO SourceDTO

// NewSourceDTO instantiates a new SourceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceDTO(primaryId int64, secondaryId int64) *SourceDTO {
	this := SourceDTO{}
	this.PrimaryId = primaryId
	this.SecondaryId = secondaryId
	return &this
}

// NewSourceDTOWithDefaults instantiates a new SourceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceDTOWithDefaults() *SourceDTO {
	this := SourceDTO{}
	return &this
}

// GetPrimaryId returns the PrimaryId field value
func (o *SourceDTO) GetPrimaryId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PrimaryId
}

// GetPrimaryIdOk returns a tuple with the PrimaryId field value
// and a boolean to check if the value has been set.
func (o *SourceDTO) GetPrimaryIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryId, true
}

// SetPrimaryId sets field value
func (o *SourceDTO) SetPrimaryId(v int64) {
	o.PrimaryId = v
}

// GetSecondaryId returns the SecondaryId field value
func (o *SourceDTO) GetSecondaryId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SecondaryId
}

// GetSecondaryIdOk returns a tuple with the SecondaryId field value
// and a boolean to check if the value has been set.
func (o *SourceDTO) GetSecondaryIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecondaryId, true
}

// SetSecondaryId sets field value
func (o *SourceDTO) SetSecondaryId(v int64) {
	o.SecondaryId = v
}

func (o SourceDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["primaryId"] = o.PrimaryId
	toSerialize["secondaryId"] = o.SecondaryId
	return toSerialize, nil
}

func (o *SourceDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"primaryId",
		"secondaryId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceDTO := _SourceDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceDTO)

	if err != nil {
		return err
	}

	*o = SourceDTO(varSourceDTO)

	return err
}

type NullableSourceDTO struct {
	value *SourceDTO
	isSet bool
}

func (v NullableSourceDTO) Get() *SourceDTO {
	return v.value
}

func (v *NullableSourceDTO) Set(val *SourceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceDTO(val *SourceDTO) *NullableSourceDTO {
	return &NullableSourceDTO{value: val, isSet: true}
}

func (v NullableSourceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


