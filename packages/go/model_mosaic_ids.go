/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
)

// checks if the MosaicIds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MosaicIds{}

// MosaicIds struct for MosaicIds
type MosaicIds struct {
	// Array of mosaic identifiers.
	MosaicIds []string `json:"mosaicIds,omitempty"`
}

// NewMosaicIds instantiates a new MosaicIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMosaicIds() *MosaicIds {
	this := MosaicIds{}
	return &this
}

// NewMosaicIdsWithDefaults instantiates a new MosaicIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMosaicIdsWithDefaults() *MosaicIds {
	this := MosaicIds{}
	return &this
}

// GetMosaicIds returns the MosaicIds field value if set, zero value otherwise.
func (o *MosaicIds) GetMosaicIds() []string {
	if o == nil || IsNil(o.MosaicIds) {
		var ret []string
		return ret
	}
	return o.MosaicIds
}

// GetMosaicIdsOk returns a tuple with the MosaicIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MosaicIds) GetMosaicIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.MosaicIds) {
		return nil, false
	}
	return o.MosaicIds, true
}

// HasMosaicIds returns a boolean if a field has been set.
func (o *MosaicIds) HasMosaicIds() bool {
	if o != nil && !IsNil(o.MosaicIds) {
		return true
	}

	return false
}

// SetMosaicIds gets a reference to the given []string and assigns it to the MosaicIds field.
func (o *MosaicIds) SetMosaicIds(v []string) {
	o.MosaicIds = v
}

func (o MosaicIds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MosaicIds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MosaicIds) {
		toSerialize["mosaicIds"] = o.MosaicIds
	}
	return toSerialize, nil
}

type NullableMosaicIds struct {
	value *MosaicIds
	isSet bool
}

func (v NullableMosaicIds) Get() *MosaicIds {
	return v.value
}

func (v *NullableMosaicIds) Set(val *MosaicIds) {
	v.value = val
	v.isSet = true
}

func (v NullableMosaicIds) IsSet() bool {
	return v.isSet
}

func (v *NullableMosaicIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMosaicIds(val *MosaicIds) *NullableMosaicIds {
	return &NullableMosaicIds{value: val, isSet: true}
}

func (v NullableMosaicIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMosaicIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


