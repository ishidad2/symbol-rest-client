/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BlockMetaDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockMetaDTO{}

// BlockMetaDTO struct for BlockMetaDTO
type BlockMetaDTO struct {
	Hash string `json:"hash"`
	// Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
	TotalFee string `json:"totalFee"`
	GenerationHash string `json:"generationHash"`
	StateHashSubCacheMerkleRoots []string `json:"stateHashSubCacheMerkleRoots"`
	// Total number of [transactions](https://docs.symbolplatform.com/concepts/transaction.html) confirmed in this block, including *embedded* transactions (i.e. transactions contained within aggregate transactions). 
	TotalTransactionsCount int32 `json:"totalTransactionsCount"`
	// Number of [transactions](https://docs.symbolplatform.com/concepts/transaction.html) confirmed in this block. This does not count *embedded* transactions (i.e. transactions contained within aggregate transactions). 
	TransactionsCount int32 `json:"transactionsCount"`
	// Number of statements (of any kind) present in this block. Bear in mind that some of them (like [resolution statements](https://docs.symbolplatform.com/concepts/receipt.html#resolution-statement)) are triggered by transactions present in the block, but in general, [transaction statements](https://docs.symbolplatform.com/concepts/receipt.html#transaction-statement) are not. 
	StatementsCount int32 `json:"statementsCount"`
}

type _BlockMetaDTO BlockMetaDTO

// NewBlockMetaDTO instantiates a new BlockMetaDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockMetaDTO(hash string, totalFee string, generationHash string, stateHashSubCacheMerkleRoots []string, totalTransactionsCount int32, transactionsCount int32, statementsCount int32) *BlockMetaDTO {
	this := BlockMetaDTO{}
	this.Hash = hash
	this.TotalFee = totalFee
	this.GenerationHash = generationHash
	this.StateHashSubCacheMerkleRoots = stateHashSubCacheMerkleRoots
	this.TotalTransactionsCount = totalTransactionsCount
	this.TransactionsCount = transactionsCount
	this.StatementsCount = statementsCount
	return &this
}

// NewBlockMetaDTOWithDefaults instantiates a new BlockMetaDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockMetaDTOWithDefaults() *BlockMetaDTO {
	this := BlockMetaDTO{}
	return &this
}

// GetHash returns the Hash field value
func (o *BlockMetaDTO) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *BlockMetaDTO) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *BlockMetaDTO) SetHash(v string) {
	o.Hash = v
}

// GetTotalFee returns the TotalFee field value
func (o *BlockMetaDTO) GetTotalFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TotalFee
}

// GetTotalFeeOk returns a tuple with the TotalFee field value
// and a boolean to check if the value has been set.
func (o *BlockMetaDTO) GetTotalFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFee, true
}

// SetTotalFee sets field value
func (o *BlockMetaDTO) SetTotalFee(v string) {
	o.TotalFee = v
}

// GetGenerationHash returns the GenerationHash field value
func (o *BlockMetaDTO) GetGenerationHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GenerationHash
}

// GetGenerationHashOk returns a tuple with the GenerationHash field value
// and a boolean to check if the value has been set.
func (o *BlockMetaDTO) GetGenerationHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GenerationHash, true
}

// SetGenerationHash sets field value
func (o *BlockMetaDTO) SetGenerationHash(v string) {
	o.GenerationHash = v
}

// GetStateHashSubCacheMerkleRoots returns the StateHashSubCacheMerkleRoots field value
func (o *BlockMetaDTO) GetStateHashSubCacheMerkleRoots() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StateHashSubCacheMerkleRoots
}

// GetStateHashSubCacheMerkleRootsOk returns a tuple with the StateHashSubCacheMerkleRoots field value
// and a boolean to check if the value has been set.
func (o *BlockMetaDTO) GetStateHashSubCacheMerkleRootsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateHashSubCacheMerkleRoots, true
}

// SetStateHashSubCacheMerkleRoots sets field value
func (o *BlockMetaDTO) SetStateHashSubCacheMerkleRoots(v []string) {
	o.StateHashSubCacheMerkleRoots = v
}

// GetTotalTransactionsCount returns the TotalTransactionsCount field value
func (o *BlockMetaDTO) GetTotalTransactionsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalTransactionsCount
}

// GetTotalTransactionsCountOk returns a tuple with the TotalTransactionsCount field value
// and a boolean to check if the value has been set.
func (o *BlockMetaDTO) GetTotalTransactionsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalTransactionsCount, true
}

// SetTotalTransactionsCount sets field value
func (o *BlockMetaDTO) SetTotalTransactionsCount(v int32) {
	o.TotalTransactionsCount = v
}

// GetTransactionsCount returns the TransactionsCount field value
func (o *BlockMetaDTO) GetTransactionsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TransactionsCount
}

// GetTransactionsCountOk returns a tuple with the TransactionsCount field value
// and a boolean to check if the value has been set.
func (o *BlockMetaDTO) GetTransactionsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionsCount, true
}

// SetTransactionsCount sets field value
func (o *BlockMetaDTO) SetTransactionsCount(v int32) {
	o.TransactionsCount = v
}

// GetStatementsCount returns the StatementsCount field value
func (o *BlockMetaDTO) GetStatementsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StatementsCount
}

// GetStatementsCountOk returns a tuple with the StatementsCount field value
// and a boolean to check if the value has been set.
func (o *BlockMetaDTO) GetStatementsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatementsCount, true
}

// SetStatementsCount sets field value
func (o *BlockMetaDTO) SetStatementsCount(v int32) {
	o.StatementsCount = v
}

func (o BlockMetaDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockMetaDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	toSerialize["totalFee"] = o.TotalFee
	toSerialize["generationHash"] = o.GenerationHash
	toSerialize["stateHashSubCacheMerkleRoots"] = o.StateHashSubCacheMerkleRoots
	toSerialize["totalTransactionsCount"] = o.TotalTransactionsCount
	toSerialize["transactionsCount"] = o.TransactionsCount
	toSerialize["statementsCount"] = o.StatementsCount
	return toSerialize, nil
}

func (o *BlockMetaDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
		"totalFee",
		"generationHash",
		"stateHashSubCacheMerkleRoots",
		"totalTransactionsCount",
		"transactionsCount",
		"statementsCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlockMetaDTO := _BlockMetaDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlockMetaDTO)

	if err != nil {
		return err
	}

	*o = BlockMetaDTO(varBlockMetaDTO)

	return err
}

type NullableBlockMetaDTO struct {
	value *BlockMetaDTO
	isSet bool
}

func (v NullableBlockMetaDTO) Get() *BlockMetaDTO {
	return v.value
}

func (v *NullableBlockMetaDTO) Set(val *BlockMetaDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockMetaDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockMetaDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockMetaDTO(val *BlockMetaDTO) *NullableBlockMetaDTO {
	return &NullableBlockMetaDTO{value: val, isSet: true}
}

func (v NullableBlockMetaDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockMetaDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


