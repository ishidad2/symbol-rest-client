/*
Catapult REST Endpoints

OpenAPI Specification of catapult-rest

API version: 1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi_client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResolutionStatementDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResolutionStatementDTO{}

// ResolutionStatementDTO struct for ResolutionStatementDTO
type ResolutionStatementDTO struct {
	// Height of the blockchain.
	Height string `json:"height"`
	Unresolved ResolutionStatementDTOUnresolved `json:"unresolved"`
	// Array of resolution entries linked to the unresolved namespaceId. It is an array instead of a single resolution entry since within one block the resolution might change for different sources due to alias related transactions. 
	ResolutionEntries []ResolutionEntryDTO `json:"resolutionEntries"`
}

type _ResolutionStatementDTO ResolutionStatementDTO

// NewResolutionStatementDTO instantiates a new ResolutionStatementDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolutionStatementDTO(height string, unresolved ResolutionStatementDTOUnresolved, resolutionEntries []ResolutionEntryDTO) *ResolutionStatementDTO {
	this := ResolutionStatementDTO{}
	this.Height = height
	this.Unresolved = unresolved
	this.ResolutionEntries = resolutionEntries
	return &this
}

// NewResolutionStatementDTOWithDefaults instantiates a new ResolutionStatementDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolutionStatementDTOWithDefaults() *ResolutionStatementDTO {
	this := ResolutionStatementDTO{}
	return &this
}

// GetHeight returns the Height field value
func (o *ResolutionStatementDTO) GetHeight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *ResolutionStatementDTO) GetHeightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *ResolutionStatementDTO) SetHeight(v string) {
	o.Height = v
}

// GetUnresolved returns the Unresolved field value
func (o *ResolutionStatementDTO) GetUnresolved() ResolutionStatementDTOUnresolved {
	if o == nil {
		var ret ResolutionStatementDTOUnresolved
		return ret
	}

	return o.Unresolved
}

// GetUnresolvedOk returns a tuple with the Unresolved field value
// and a boolean to check if the value has been set.
func (o *ResolutionStatementDTO) GetUnresolvedOk() (*ResolutionStatementDTOUnresolved, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unresolved, true
}

// SetUnresolved sets field value
func (o *ResolutionStatementDTO) SetUnresolved(v ResolutionStatementDTOUnresolved) {
	o.Unresolved = v
}

// GetResolutionEntries returns the ResolutionEntries field value
func (o *ResolutionStatementDTO) GetResolutionEntries() []ResolutionEntryDTO {
	if o == nil {
		var ret []ResolutionEntryDTO
		return ret
	}

	return o.ResolutionEntries
}

// GetResolutionEntriesOk returns a tuple with the ResolutionEntries field value
// and a boolean to check if the value has been set.
func (o *ResolutionStatementDTO) GetResolutionEntriesOk() ([]ResolutionEntryDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionEntries, true
}

// SetResolutionEntries sets field value
func (o *ResolutionStatementDTO) SetResolutionEntries(v []ResolutionEntryDTO) {
	o.ResolutionEntries = v
}

func (o ResolutionStatementDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResolutionStatementDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["height"] = o.Height
	toSerialize["unresolved"] = o.Unresolved
	toSerialize["resolutionEntries"] = o.ResolutionEntries
	return toSerialize, nil
}

func (o *ResolutionStatementDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"height",
		"unresolved",
		"resolutionEntries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResolutionStatementDTO := _ResolutionStatementDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResolutionStatementDTO)

	if err != nil {
		return err
	}

	*o = ResolutionStatementDTO(varResolutionStatementDTO)

	return err
}

type NullableResolutionStatementDTO struct {
	value *ResolutionStatementDTO
	isSet bool
}

func (v NullableResolutionStatementDTO) Get() *ResolutionStatementDTO {
	return v.value
}

func (v *NullableResolutionStatementDTO) Set(val *ResolutionStatementDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableResolutionStatementDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableResolutionStatementDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolutionStatementDTO(val *ResolutionStatementDTO) *NullableResolutionStatementDTO {
	return &NullableResolutionStatementDTO{value: val, isSet: true}
}

func (v NullableResolutionStatementDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolutionStatementDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


