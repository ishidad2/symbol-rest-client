//
// NamespaceDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NamespaceDTO: Codable, JSONEncodable, Hashable {

    /** The version of the state */
    public var version: Int
    public var registrationType: NamespaceRegistrationTypeEnum
    /** Level of the namespace. */
    public var depth: Int
    /** Namespace identifier. */
    public var level0: String
    /** Namespace identifier. */
    public var level1: String?
    /** Namespace identifier. */
    public var level2: String?
    public var alias: AliasDTO
    /** Namespace identifier. */
    public var parentId: String
    /** Address encoded using a 32-character set. */
    public var ownerAddress: String
    /** Height of the blockchain. */
    public var startHeight: String
    /** Height of the blockchain. */
    public var endHeight: String

    public init(version: Int, registrationType: NamespaceRegistrationTypeEnum, depth: Int, level0: String, level1: String? = nil, level2: String? = nil, alias: AliasDTO, parentId: String, ownerAddress: String, startHeight: String, endHeight: String) {
        self.version = version
        self.registrationType = registrationType
        self.depth = depth
        self.level0 = level0
        self.level1 = level1
        self.level2 = level2
        self.alias = alias
        self.parentId = parentId
        self.ownerAddress = ownerAddress
        self.startHeight = startHeight
        self.endHeight = endHeight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case registrationType
        case depth
        case level0
        case level1
        case level2
        case alias
        case parentId
        case ownerAddress
        case startHeight
        case endHeight
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(registrationType, forKey: .registrationType)
        try container.encode(depth, forKey: .depth)
        try container.encode(level0, forKey: .level0)
        try container.encodeIfPresent(level1, forKey: .level1)
        try container.encodeIfPresent(level2, forKey: .level2)
        try container.encode(alias, forKey: .alias)
        try container.encode(parentId, forKey: .parentId)
        try container.encode(ownerAddress, forKey: .ownerAddress)
        try container.encode(startHeight, forKey: .startHeight)
        try container.encode(endHeight, forKey: .endHeight)
    }
}

