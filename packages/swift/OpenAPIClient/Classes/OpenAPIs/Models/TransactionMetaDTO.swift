//
// TransactionMetaDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TransactionMetaDTO: Codable, JSONEncodable, Hashable {

    /** Height of the blockchain. */
    public var height: String
    public var hash: String
    public var merkleComponentHash: String
    /** Transaction index within the block. */
    public var index: Int
    /** Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'. */
    public var timestamp: String?
    /** Fee multiplier applied to transactions contained in block. */
    public var feeMultiplier: Int64?

    public init(height: String, hash: String, merkleComponentHash: String, index: Int, timestamp: String? = nil, feeMultiplier: Int64? = nil) {
        self.height = height
        self.hash = hash
        self.merkleComponentHash = merkleComponentHash
        self.index = index
        self.timestamp = timestamp
        self.feeMultiplier = feeMultiplier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case height
        case hash
        case merkleComponentHash
        case index
        case timestamp
        case feeMultiplier
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(height, forKey: .height)
        try container.encode(hash, forKey: .hash)
        try container.encode(merkleComponentHash, forKey: .merkleComponentHash)
        try container.encode(index, forKey: .index)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(feeMultiplier, forKey: .feeMultiplier)
    }
}

