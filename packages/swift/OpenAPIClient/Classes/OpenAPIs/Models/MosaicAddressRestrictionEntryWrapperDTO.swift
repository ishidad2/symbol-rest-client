//
// MosaicAddressRestrictionEntryWrapperDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MosaicAddressRestrictionEntryWrapperDTO: Codable, JSONEncodable, Hashable {

    /** The version of the state */
    public var version: Int
    public var compositeHash: String
    public var entryType: MosaicRestrictionEntryTypeEnum
    /** Mosaic identifier. */
    public var mosaicId: String
    /** Address encoded using a 32-character set. */
    public var targetAddress: String
    public var restrictions: [MosaicAddressRestrictionEntryDTO]

    public init(version: Int, compositeHash: String, entryType: MosaicRestrictionEntryTypeEnum, mosaicId: String, targetAddress: String, restrictions: [MosaicAddressRestrictionEntryDTO]) {
        self.version = version
        self.compositeHash = compositeHash
        self.entryType = entryType
        self.mosaicId = mosaicId
        self.targetAddress = targetAddress
        self.restrictions = restrictions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case compositeHash
        case entryType
        case mosaicId
        case targetAddress
        case restrictions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(compositeHash, forKey: .compositeHash)
        try container.encode(entryType, forKey: .entryType)
        try container.encode(mosaicId, forKey: .mosaicId)
        try container.encode(targetAddress, forKey: .targetAddress)
        try container.encode(restrictions, forKey: .restrictions)
    }
}

