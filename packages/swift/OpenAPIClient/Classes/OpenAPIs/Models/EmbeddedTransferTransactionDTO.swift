//
// EmbeddedTransferTransactionDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EmbeddedTransferTransactionDTO: Codable, JSONEncodable, Hashable {

    /** Public key. */
    public var signerPublicKey: String
    /** Entity version. */
    public var version: Int
    public var network: NetworkTypeEnum
    public var type: Int
    /** Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA  */
    public var recipientAddress: String
    /** Array of mosaics sent to the recipient.  */
    public var mosaics: [UnresolvedMosaic]
    /** Transfer transaction message */
    public var message: String?

    public init(signerPublicKey: String, version: Int, network: NetworkTypeEnum, type: Int, recipientAddress: String, mosaics: [UnresolvedMosaic], message: String? = nil) {
        self.signerPublicKey = signerPublicKey
        self.version = version
        self.network = network
        self.type = type
        self.recipientAddress = recipientAddress
        self.mosaics = mosaics
        self.message = message
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case signerPublicKey
        case version
        case network
        case type
        case recipientAddress
        case mosaics
        case message
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(signerPublicKey, forKey: .signerPublicKey)
        try container.encode(version, forKey: .version)
        try container.encode(network, forKey: .network)
        try container.encode(type, forKey: .type)
        try container.encode(recipientAddress, forKey: .recipientAddress)
        try container.encode(mosaics, forKey: .mosaics)
        try container.encodeIfPresent(message, forKey: .message)
    }
}

