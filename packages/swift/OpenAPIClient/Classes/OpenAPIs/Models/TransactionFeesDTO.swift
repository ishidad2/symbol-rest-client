//
// TransactionFeesDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TransactionFeesDTO: Codable, JSONEncodable, Hashable {

    /** Fee multiplier applied to transactions contained in block. */
    public var averageFeeMultiplier: Int64
    /** Fee multiplier applied to transactions contained in block. */
    public var medianFeeMultiplier: Int64
    /** Fee multiplier applied to transactions contained in block. */
    public var highestFeeMultiplier: Int64
    /** Fee multiplier applied to transactions contained in block. */
    public var lowestFeeMultiplier: Int64
    /** Fee multiplier applied to transactions contained in block. */
    public var minFeeMultiplier: Int64

    public init(averageFeeMultiplier: Int64, medianFeeMultiplier: Int64, highestFeeMultiplier: Int64, lowestFeeMultiplier: Int64, minFeeMultiplier: Int64) {
        self.averageFeeMultiplier = averageFeeMultiplier
        self.medianFeeMultiplier = medianFeeMultiplier
        self.highestFeeMultiplier = highestFeeMultiplier
        self.lowestFeeMultiplier = lowestFeeMultiplier
        self.minFeeMultiplier = minFeeMultiplier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case averageFeeMultiplier
        case medianFeeMultiplier
        case highestFeeMultiplier
        case lowestFeeMultiplier
        case minFeeMultiplier
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(averageFeeMultiplier, forKey: .averageFeeMultiplier)
        try container.encode(medianFeeMultiplier, forKey: .medianFeeMultiplier)
        try container.encode(highestFeeMultiplier, forKey: .highestFeeMultiplier)
        try container.encode(lowestFeeMultiplier, forKey: .lowestFeeMultiplier)
        try container.encode(minFeeMultiplier, forKey: .minFeeMultiplier)
    }
}

