//
// SecretProofTransactionBodyDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SecretProofTransactionBodyDTO: Codable, JSONEncodable, Hashable {

    /** Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA  */
    public var recipientAddress: String
    public var secret: String
    public var hashAlgorithm: LockHashAlgorithmEnum
    /** Original random set of bytes. */
    public var proof: String

    public init(recipientAddress: String, secret: String, hashAlgorithm: LockHashAlgorithmEnum, proof: String) {
        self.recipientAddress = recipientAddress
        self.secret = secret
        self.hashAlgorithm = hashAlgorithm
        self.proof = proof
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case recipientAddress
        case secret
        case hashAlgorithm
        case proof
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(recipientAddress, forKey: .recipientAddress)
        try container.encode(secret, forKey: .secret)
        try container.encode(hashAlgorithm, forKey: .hashAlgorithm)
        try container.encode(proof, forKey: .proof)
    }
}

