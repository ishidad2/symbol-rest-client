//
// MosaicNetworkPropertiesDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MosaicNetworkPropertiesDTO: Codable, JSONEncodable, Hashable {

    /** Maximum number of mosaics that an account can own. */
    public var maxMosaicsPerAccount: String?
    /** Maximum mosaic duration. */
    public var maxMosaicDuration: String?
    /** Maximum mosaic divisibility. */
    public var maxMosaicDivisibility: String?
    /** Address encoded using a 32-character set. */
    public var mosaicRentalFeeSinkAddress: String?
    /** Mosaic rental fee. */
    public var mosaicRentalFee: String?

    public init(maxMosaicsPerAccount: String? = nil, maxMosaicDuration: String? = nil, maxMosaicDivisibility: String? = nil, mosaicRentalFeeSinkAddress: String? = nil, mosaicRentalFee: String? = nil) {
        self.maxMosaicsPerAccount = maxMosaicsPerAccount
        self.maxMosaicDuration = maxMosaicDuration
        self.maxMosaicDivisibility = maxMosaicDivisibility
        self.mosaicRentalFeeSinkAddress = mosaicRentalFeeSinkAddress
        self.mosaicRentalFee = mosaicRentalFee
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case maxMosaicsPerAccount
        case maxMosaicDuration
        case maxMosaicDivisibility
        case mosaicRentalFeeSinkAddress
        case mosaicRentalFee
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(maxMosaicsPerAccount, forKey: .maxMosaicsPerAccount)
        try container.encodeIfPresent(maxMosaicDuration, forKey: .maxMosaicDuration)
        try container.encodeIfPresent(maxMosaicDivisibility, forKey: .maxMosaicDivisibility)
        try container.encodeIfPresent(mosaicRentalFeeSinkAddress, forKey: .mosaicRentalFeeSinkAddress)
        try container.encodeIfPresent(mosaicRentalFee, forKey: .mosaicRentalFee)
    }
}

