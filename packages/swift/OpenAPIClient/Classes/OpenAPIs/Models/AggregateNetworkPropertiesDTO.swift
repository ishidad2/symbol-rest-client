//
// AggregateNetworkPropertiesDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AggregateNetworkPropertiesDTO: Codable, JSONEncodable, Hashable {

    /** Maximum number of transactions per aggregate. */
    public var maxTransactionsPerAggregate: String?
    /** Maximum number of cosignatures per aggregate. */
    public var maxCosignaturesPerAggregate: String?
    /** Set to true if cosignatures must exactly match component signers. Set to false if cosignatures should be validated externally. */
    public var enableStrictCosignatureCheck: Bool?
    /** Set to true if bonded aggregates should be allowed. Set to false if bonded aggregates should be rejected. */
    public var enableBondedAggregateSupport: Bool?
    /** Maximum lifetime a bonded transaction can have before it expires. */
    public var maxBondedTransactionLifetime: String?

    public init(maxTransactionsPerAggregate: String? = nil, maxCosignaturesPerAggregate: String? = nil, enableStrictCosignatureCheck: Bool? = nil, enableBondedAggregateSupport: Bool? = nil, maxBondedTransactionLifetime: String? = nil) {
        self.maxTransactionsPerAggregate = maxTransactionsPerAggregate
        self.maxCosignaturesPerAggregate = maxCosignaturesPerAggregate
        self.enableStrictCosignatureCheck = enableStrictCosignatureCheck
        self.enableBondedAggregateSupport = enableBondedAggregateSupport
        self.maxBondedTransactionLifetime = maxBondedTransactionLifetime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case maxTransactionsPerAggregate
        case maxCosignaturesPerAggregate
        case enableStrictCosignatureCheck
        case enableBondedAggregateSupport
        case maxBondedTransactionLifetime
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(maxTransactionsPerAggregate, forKey: .maxTransactionsPerAggregate)
        try container.encodeIfPresent(maxCosignaturesPerAggregate, forKey: .maxCosignaturesPerAggregate)
        try container.encodeIfPresent(enableStrictCosignatureCheck, forKey: .enableStrictCosignatureCheck)
        try container.encodeIfPresent(enableBondedAggregateSupport, forKey: .enableBondedAggregateSupport)
        try container.encodeIfPresent(maxBondedTransactionLifetime, forKey: .maxBondedTransactionLifetime)
    }
}

