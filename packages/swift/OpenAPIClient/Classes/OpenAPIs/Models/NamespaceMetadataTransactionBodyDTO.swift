//
// NamespaceMetadataTransactionBodyDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NamespaceMetadataTransactionBodyDTO: Codable, JSONEncodable, Hashable {

    /** Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA.  Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA  */
    public var targetAddress: String
    /** Metadata key scoped to source, target and type expressed. */
    public var scopedMetadataKey: String
    /** Namespace identifier. */
    public var targetNamespaceId: String?
    /** Change in value size in bytes. */
    public var valueSizeDelta: Int
    /** A number that allows uint 32 values. */
    public var valueSize: Int64
    /** Metadata value. If embedded in a transaction, this is calculated as xor(previous-value, value). */
    public var value: String

    public init(targetAddress: String, scopedMetadataKey: String, targetNamespaceId: String? = nil, valueSizeDelta: Int, valueSize: Int64, value: String) {
        self.targetAddress = targetAddress
        self.scopedMetadataKey = scopedMetadataKey
        self.targetNamespaceId = targetNamespaceId
        self.valueSizeDelta = valueSizeDelta
        self.valueSize = valueSize
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case targetAddress
        case scopedMetadataKey
        case targetNamespaceId
        case valueSizeDelta
        case valueSize
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(targetAddress, forKey: .targetAddress)
        try container.encode(scopedMetadataKey, forKey: .scopedMetadataKey)
        try container.encodeIfPresent(targetNamespaceId, forKey: .targetNamespaceId)
        try container.encode(valueSizeDelta, forKey: .valueSizeDelta)
        try container.encode(valueSize, forKey: .valueSize)
        try container.encode(value, forKey: .value)
    }
}

