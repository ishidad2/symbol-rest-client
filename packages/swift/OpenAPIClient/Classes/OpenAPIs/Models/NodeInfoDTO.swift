//
// NodeInfoDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NodeInfoDTO: Codable, JSONEncodable, Hashable {

    /** Version of the application. */
    public var version: Int
    /** Public key. */
    public var publicKey: String
    public var networkGenerationHashSeed: String
    /** A number that defines the different roles the node provides. Possible roles are: * 1 - Peer node. * 2 - Api node. * 4 - Voting node. * 64 - IPv4 compatible node * 128 - IPv6 compatible node.  The values are bitwise added together, Examples: 1 = Just Peer. 2 = Just Api. 3 = Peer and Api node. 7 = Peer, Api and Voting node. 65 = IPv4 and Peer node.  */
    public var roles: Int
    /** Port used for the communication. */
    public var port: Int
    public var networkIdentifier: Int
    /** Node friendly name. */
    public var friendlyName: String
    /** Node IP address. */
    public var host: String
    /** Public key. */
    public var nodePublicKey: String?

    public init(version: Int, publicKey: String, networkGenerationHashSeed: String, roles: Int, port: Int, networkIdentifier: Int, friendlyName: String, host: String, nodePublicKey: String? = nil) {
        self.version = version
        self.publicKey = publicKey
        self.networkGenerationHashSeed = networkGenerationHashSeed
        self.roles = roles
        self.port = port
        self.networkIdentifier = networkIdentifier
        self.friendlyName = friendlyName
        self.host = host
        self.nodePublicKey = nodePublicKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case publicKey
        case networkGenerationHashSeed
        case roles
        case port
        case networkIdentifier
        case friendlyName
        case host
        case nodePublicKey
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(publicKey, forKey: .publicKey)
        try container.encode(networkGenerationHashSeed, forKey: .networkGenerationHashSeed)
        try container.encode(roles, forKey: .roles)
        try container.encode(port, forKey: .port)
        try container.encode(networkIdentifier, forKey: .networkIdentifier)
        try container.encode(friendlyName, forKey: .friendlyName)
        try container.encode(host, forKey: .host)
        try container.encodeIfPresent(nodePublicKey, forKey: .nodePublicKey)
    }
}

