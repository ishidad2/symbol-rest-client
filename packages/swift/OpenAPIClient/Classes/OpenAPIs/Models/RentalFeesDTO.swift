//
// RentalFeesDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RentalFeesDTO: Codable, JSONEncodable, Hashable {

    /** Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative). */
    public var effectiveRootNamespaceRentalFeePerBlock: String
    /** Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative). */
    public var effectiveChildNamespaceRentalFee: String
    /** Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative). */
    public var effectiveMosaicRentalFee: String

    public init(effectiveRootNamespaceRentalFeePerBlock: String, effectiveChildNamespaceRentalFee: String, effectiveMosaicRentalFee: String) {
        self.effectiveRootNamespaceRentalFeePerBlock = effectiveRootNamespaceRentalFeePerBlock
        self.effectiveChildNamespaceRentalFee = effectiveChildNamespaceRentalFee
        self.effectiveMosaicRentalFee = effectiveMosaicRentalFee
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case effectiveRootNamespaceRentalFeePerBlock
        case effectiveChildNamespaceRentalFee
        case effectiveMosaicRentalFee
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(effectiveRootNamespaceRentalFeePerBlock, forKey: .effectiveRootNamespaceRentalFeePerBlock)
        try container.encode(effectiveChildNamespaceRentalFee, forKey: .effectiveChildNamespaceRentalFee)
        try container.encode(effectiveMosaicRentalFee, forKey: .effectiveMosaicRentalFee)
    }
}

