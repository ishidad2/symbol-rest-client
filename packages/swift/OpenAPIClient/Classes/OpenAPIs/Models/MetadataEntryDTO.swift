//
// MetadataEntryDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MetadataEntryDTO: Codable, JSONEncodable, Hashable {

    /** The version of the state */
    public var version: Int
    public var compositeHash: String
    /** Address encoded using a 32-character set. */
    public var sourceAddress: String
    /** Address encoded using a 32-character set. */
    public var targetAddress: String
    /** Metadata key scoped to source, target and type expressed. */
    public var scopedMetadataKey: String
    public var targetId: MetadataEntryDTOTargetId?
    public var metadataType: MetadataTypeEnum
    /** Metadata value. */
    public var value: String

    public init(version: Int, compositeHash: String, sourceAddress: String, targetAddress: String, scopedMetadataKey: String, targetId: MetadataEntryDTOTargetId? = nil, metadataType: MetadataTypeEnum, value: String) {
        self.version = version
        self.compositeHash = compositeHash
        self.sourceAddress = sourceAddress
        self.targetAddress = targetAddress
        self.scopedMetadataKey = scopedMetadataKey
        self.targetId = targetId
        self.metadataType = metadataType
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case compositeHash
        case sourceAddress
        case targetAddress
        case scopedMetadataKey
        case targetId
        case metadataType
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(compositeHash, forKey: .compositeHash)
        try container.encode(sourceAddress, forKey: .sourceAddress)
        try container.encode(targetAddress, forKey: .targetAddress)
        try container.encode(scopedMetadataKey, forKey: .scopedMetadataKey)
        try container.encodeIfPresent(targetId, forKey: .targetId)
        try container.encode(metadataType, forKey: .metadataType)
        try container.encode(value, forKey: .value)
    }
}

