//
// MultisigDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MultisigDTO: Codable, JSONEncodable, Hashable {

    /** The version of the state */
    public var version: Int
    /** Address encoded using a 32-character set. */
    public var accountAddress: String
    /** A number that allows uint 32 values. */
    public var minApproval: Int64
    /** A number that allows uint 32 values. */
    public var minRemoval: Int64
    /** Addresses of the cosignatory accounts. */
    public var cosignatoryAddresses: [String]
    /** Multisig accounts where the account is cosignatory. */
    public var multisigAddresses: [String]

    public init(version: Int, accountAddress: String, minApproval: Int64, minRemoval: Int64, cosignatoryAddresses: [String], multisigAddresses: [String]) {
        self.version = version
        self.accountAddress = accountAddress
        self.minApproval = minApproval
        self.minRemoval = minRemoval
        self.cosignatoryAddresses = cosignatoryAddresses
        self.multisigAddresses = multisigAddresses
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version
        case accountAddress
        case minApproval
        case minRemoval
        case cosignatoryAddresses
        case multisigAddresses
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(version, forKey: .version)
        try container.encode(accountAddress, forKey: .accountAddress)
        try container.encode(minApproval, forKey: .minApproval)
        try container.encode(minRemoval, forKey: .minRemoval)
        try container.encode(cosignatoryAddresses, forKey: .cosignatoryAddresses)
        try container.encode(multisigAddresses, forKey: .multisigAddresses)
    }
}

