//
// PluginsPropertiesDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Plugin related configuration properties. */
public struct PluginsPropertiesDTO: Codable, JSONEncodable, Hashable {

    public var accountlink: AccountKeyLinkNetworkPropertiesDTO?
    public var aggregate: AggregateNetworkPropertiesDTO?
    public var lockhash: HashLockNetworkPropertiesDTO?
    public var locksecret: SecretLockNetworkPropertiesDTO?
    public var metadata: MetadataNetworkPropertiesDTO?
    public var mosaic: MosaicNetworkPropertiesDTO?
    public var multisig: MultisigNetworkPropertiesDTO?
    public var namespace: NamespaceNetworkPropertiesDTO?
    public var restrictionaccount: AccountRestrictionNetworkPropertiesDTO?
    public var restrictionmosaic: MosaicRestrictionNetworkPropertiesDTO?
    public var transfer: TransferNetworkPropertiesDTO?

    public init(accountlink: AccountKeyLinkNetworkPropertiesDTO? = nil, aggregate: AggregateNetworkPropertiesDTO? = nil, lockhash: HashLockNetworkPropertiesDTO? = nil, locksecret: SecretLockNetworkPropertiesDTO? = nil, metadata: MetadataNetworkPropertiesDTO? = nil, mosaic: MosaicNetworkPropertiesDTO? = nil, multisig: MultisigNetworkPropertiesDTO? = nil, namespace: NamespaceNetworkPropertiesDTO? = nil, restrictionaccount: AccountRestrictionNetworkPropertiesDTO? = nil, restrictionmosaic: MosaicRestrictionNetworkPropertiesDTO? = nil, transfer: TransferNetworkPropertiesDTO? = nil) {
        self.accountlink = accountlink
        self.aggregate = aggregate
        self.lockhash = lockhash
        self.locksecret = locksecret
        self.metadata = metadata
        self.mosaic = mosaic
        self.multisig = multisig
        self.namespace = namespace
        self.restrictionaccount = restrictionaccount
        self.restrictionmosaic = restrictionmosaic
        self.transfer = transfer
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountlink
        case aggregate
        case lockhash
        case locksecret
        case metadata
        case mosaic
        case multisig
        case namespace
        case restrictionaccount
        case restrictionmosaic
        case transfer
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountlink, forKey: .accountlink)
        try container.encodeIfPresent(aggregate, forKey: .aggregate)
        try container.encodeIfPresent(lockhash, forKey: .lockhash)
        try container.encodeIfPresent(locksecret, forKey: .locksecret)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(mosaic, forKey: .mosaic)
        try container.encodeIfPresent(multisig, forKey: .multisig)
        try container.encodeIfPresent(namespace, forKey: .namespace)
        try container.encodeIfPresent(restrictionaccount, forKey: .restrictionaccount)
        try container.encodeIfPresent(restrictionmosaic, forKey: .restrictionmosaic)
        try container.encodeIfPresent(transfer, forKey: .transfer)
    }
}

