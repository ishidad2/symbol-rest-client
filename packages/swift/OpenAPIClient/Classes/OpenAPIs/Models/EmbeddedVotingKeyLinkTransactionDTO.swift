//
// EmbeddedVotingKeyLinkTransactionDTO.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EmbeddedVotingKeyLinkTransactionDTO: Codable, JSONEncodable, Hashable {

    /** Public key. */
    public var signerPublicKey: String
    /** Entity version. */
    public var version: Int
    public var network: NetworkTypeEnum
    public var type: Int
    /** 32 bytes voting public key. */
    public var linkedPublicKey: String
    /** Finalization Epoch */
    public var startEpoch: Int64
    /** Finalization Epoch */
    public var endEpoch: Int64
    public var linkAction: LinkActionEnum

    public init(signerPublicKey: String, version: Int, network: NetworkTypeEnum, type: Int, linkedPublicKey: String, startEpoch: Int64, endEpoch: Int64, linkAction: LinkActionEnum) {
        self.signerPublicKey = signerPublicKey
        self.version = version
        self.network = network
        self.type = type
        self.linkedPublicKey = linkedPublicKey
        self.startEpoch = startEpoch
        self.endEpoch = endEpoch
        self.linkAction = linkAction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case signerPublicKey
        case version
        case network
        case type
        case linkedPublicKey
        case startEpoch
        case endEpoch
        case linkAction
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(signerPublicKey, forKey: .signerPublicKey)
        try container.encode(version, forKey: .version)
        try container.encode(network, forKey: .network)
        try container.encode(type, forKey: .type)
        try container.encode(linkedPublicKey, forKey: .linkedPublicKey)
        try container.encode(startEpoch, forKey: .startEpoch)
        try container.encode(endEpoch, forKey: .endEpoch)
        try container.encode(linkAction, forKey: .linkAction)
    }
}

