//
// MetadataRoutesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MetadataRoutesAPI {

    /**
     Get metadata information
     
     - parameter compositeHash: (path) Filter by composite hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMetadata(compositeHash: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MetadataInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getMetadataWithRequestBuilder(compositeHash: compositeHash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get metadata information
     - GET /metadata/{compositeHash}
     - Gets the metadata for a given composite hash.
     - parameter compositeHash: (path) Filter by composite hash. 
     - returns: RequestBuilder<MetadataInfoDTO> 
     */
    open class func getMetadataWithRequestBuilder(compositeHash: String) -> RequestBuilder<MetadataInfoDTO> {
        var localVariablePath = "/metadata/{compositeHash}"
        let compositeHashPreEscape = "\(APIHelper.mapValueToPathItem(compositeHash))"
        let compositeHashPostEscape = compositeHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{compositeHash}", with: compositeHashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MetadataInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get metadata merkle information
     
     - parameter compositeHash: (path) Filter by composite hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMetadataMerkle(compositeHash: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MerkleStateInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getMetadataMerkleWithRequestBuilder(compositeHash: compositeHash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get metadata merkle information
     - GET /metadata/{compositeHash}/merkle
     - Gets the metadata merkle for a given composite hash.
     - parameter compositeHash: (path) Filter by composite hash. 
     - returns: RequestBuilder<MerkleStateInfoDTO> 
     */
    open class func getMetadataMerkleWithRequestBuilder(compositeHash: String) -> RequestBuilder<MerkleStateInfoDTO> {
        var localVariablePath = "/metadata/{compositeHash}/merkle"
        let compositeHashPreEscape = "\(APIHelper.mapValueToPathItem(compositeHash))"
        let compositeHashPostEscape = compositeHashPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{compositeHash}", with: compositeHashPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MerkleStateInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Search metadata entries
     
     - parameter sourceAddress: (query) Filter by address sending the metadata entry. (optional)
     - parameter targetAddress: (query) Filter by target address. (optional)
     - parameter scopedMetadataKey: (query) Filter by metadata key. (optional)
     - parameter targetId: (query) Filter by namespace or mosaic id. (optional)
     - parameter metadataType: (query) Filter by metadata type. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchMetadataEntries(sourceAddress: String? = nil, targetAddress: String? = nil, scopedMetadataKey: String? = nil, targetId: String? = nil, metadataType: MetadataTypeEnum? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MetadataPage?, _ error: Error?) -> Void)) -> RequestTask {
        return searchMetadataEntriesWithRequestBuilder(sourceAddress: sourceAddress, targetAddress: targetAddress, scopedMetadataKey: scopedMetadataKey, targetId: targetId, metadataType: metadataType, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search metadata entries
     - GET /metadata
     - Returns an array of metadata.
     - parameter sourceAddress: (query) Filter by address sending the metadata entry. (optional)
     - parameter targetAddress: (query) Filter by target address. (optional)
     - parameter scopedMetadataKey: (query) Filter by metadata key. (optional)
     - parameter targetId: (query) Filter by namespace or mosaic id. (optional)
     - parameter metadataType: (query) Filter by metadata type. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - returns: RequestBuilder<MetadataPage> 
     */
    open class func searchMetadataEntriesWithRequestBuilder(sourceAddress: String? = nil, targetAddress: String? = nil, scopedMetadataKey: String? = nil, targetId: String? = nil, metadataType: MetadataTypeEnum? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil) -> RequestBuilder<MetadataPage> {
        let localVariablePath = "/metadata"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "sourceAddress": (wrappedValue: sourceAddress?.encodeToJSON(), isExplode: true),
            "targetAddress": (wrappedValue: targetAddress?.encodeToJSON(), isExplode: true),
            "scopedMetadataKey": (wrappedValue: scopedMetadataKey?.encodeToJSON(), isExplode: true),
            "targetId": (wrappedValue: targetId?.encodeToJSON(), isExplode: true),
            "metadataType": (wrappedValue: metadataType?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pageNumber": (wrappedValue: pageNumber?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MetadataPage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
