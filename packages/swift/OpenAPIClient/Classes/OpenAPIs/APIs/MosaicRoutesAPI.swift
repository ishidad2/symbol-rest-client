//
// MosaicRoutesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MosaicRoutesAPI {

    /**
     Get mosaic information
     
     - parameter mosaicId: (path) Mosaic identifier. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMosaic(mosaicId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MosaicInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getMosaicWithRequestBuilder(mosaicId: mosaicId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get mosaic information
     - GET /mosaics/{mosaicId}
     - Gets the mosaic definition for a given mosaic identifier.
     - parameter mosaicId: (path) Mosaic identifier. 
     - returns: RequestBuilder<MosaicInfoDTO> 
     */
    open class func getMosaicWithRequestBuilder(mosaicId: String) -> RequestBuilder<MosaicInfoDTO> {
        var localVariablePath = "/mosaics/{mosaicId}"
        let mosaicIdPreEscape = "\(APIHelper.mapValueToPathItem(mosaicId))"
        let mosaicIdPostEscape = mosaicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mosaicId}", with: mosaicIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MosaicInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get mosaic merkle information
     
     - parameter mosaicId: (path) Mosaic identifier. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMosaicMerkle(mosaicId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MerkleStateInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getMosaicMerkleWithRequestBuilder(mosaicId: mosaicId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get mosaic merkle information
     - GET /mosaics/{mosaicId}/merkle
     - Gets the mosaic definition merkle for a given mosaic identifier.
     - parameter mosaicId: (path) Mosaic identifier. 
     - returns: RequestBuilder<MerkleStateInfoDTO> 
     */
    open class func getMosaicMerkleWithRequestBuilder(mosaicId: String) -> RequestBuilder<MerkleStateInfoDTO> {
        var localVariablePath = "/mosaics/{mosaicId}/merkle"
        let mosaicIdPreEscape = "\(APIHelper.mapValueToPathItem(mosaicId))"
        let mosaicIdPostEscape = mosaicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mosaicId}", with: mosaicIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MerkleStateInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get mosaics information for an array of mosaics
     
     - parameter mosaicIds: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMosaics(mosaicIds: MosaicIds, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [MosaicInfoDTO]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMosaicsWithRequestBuilder(mosaicIds: mosaicIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get mosaics information for an array of mosaics
     - POST /mosaics
     - Gets an array of mosaic definition.
     - parameter mosaicIds: (body)  
     - returns: RequestBuilder<[MosaicInfoDTO]> 
     */
    open class func getMosaicsWithRequestBuilder(mosaicIds: MosaicIds) -> RequestBuilder<[MosaicInfoDTO]> {
        let localVariablePath = "/mosaics"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mosaicIds)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[MosaicInfoDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Search mosaics
     
     - parameter ownerAddress: (query) Filter by owner address. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchMosaics(ownerAddress: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MosaicPage?, _ error: Error?) -> Void)) -> RequestTask {
        return searchMosaicsWithRequestBuilder(ownerAddress: ownerAddress, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search mosaics
     - GET /mosaics
     - Gets an array of mosaics.
     - parameter ownerAddress: (query) Filter by owner address. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - returns: RequestBuilder<MosaicPage> 
     */
    open class func searchMosaicsWithRequestBuilder(ownerAddress: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil) -> RequestBuilder<MosaicPage> {
        let localVariablePath = "/mosaics"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ownerAddress": (wrappedValue: ownerAddress?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pageNumber": (wrappedValue: pageNumber?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MosaicPage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
