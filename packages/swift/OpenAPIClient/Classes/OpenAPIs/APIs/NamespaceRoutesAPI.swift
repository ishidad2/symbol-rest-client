//
// NamespaceRoutesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NamespaceRoutesAPI {

    /**
     Get readable names for a set of accountIds
     
     - parameter addresses: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountsNames(addresses: Addresses, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountsNamesDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountsNamesWithRequestBuilder(addresses: addresses).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get readable names for a set of accountIds
     - POST /namespaces/account/names
     - Returns friendly names for accounts.
     - parameter addresses: (body)  
     - returns: RequestBuilder<AccountsNamesDTO> 
     */
    open class func getAccountsNamesWithRequestBuilder(addresses: Addresses) -> RequestBuilder<AccountsNamesDTO> {
        let localVariablePath = "/namespaces/account/names"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addresses)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountsNamesDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get readable names for a set of mosaics
     
     - parameter mosaicIds: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMosaicsNames(mosaicIds: MosaicIds, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MosaicsNamesDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getMosaicsNamesWithRequestBuilder(mosaicIds: mosaicIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get readable names for a set of mosaics
     - POST /namespaces/mosaic/names
     - Returns friendly names for mosaics.
     - parameter mosaicIds: (body)  
     - returns: RequestBuilder<MosaicsNamesDTO> 
     */
    open class func getMosaicsNamesWithRequestBuilder(mosaicIds: MosaicIds) -> RequestBuilder<MosaicsNamesDTO> {
        let localVariablePath = "/namespaces/mosaic/names"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mosaicIds)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MosaicsNamesDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get namespace information
     
     - parameter namespaceId: (path) Namespace identifier. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNamespace(namespaceId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NamespaceInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getNamespaceWithRequestBuilder(namespaceId: namespaceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get namespace information
     - GET /namespaces/{namespaceId}
     - Gets the namespace for a given namespace identifier.
     - parameter namespaceId: (path) Namespace identifier. 
     - returns: RequestBuilder<NamespaceInfoDTO> 
     */
    open class func getNamespaceWithRequestBuilder(namespaceId: String) -> RequestBuilder<NamespaceInfoDTO> {
        var localVariablePath = "/namespaces/{namespaceId}"
        let namespaceIdPreEscape = "\(APIHelper.mapValueToPathItem(namespaceId))"
        let namespaceIdPostEscape = namespaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{namespaceId}", with: namespaceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NamespaceInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get namespace merkle information
     
     - parameter namespaceId: (path) Namespace identifier. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNamespaceMerkle(namespaceId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MerkleStateInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getNamespaceMerkleWithRequestBuilder(namespaceId: namespaceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get namespace merkle information
     - GET /namespaces/{namespaceId}/merkle
     - Gets the namespace merkle for a given namespace identifier.
     - parameter namespaceId: (path) Namespace identifier. 
     - returns: RequestBuilder<MerkleStateInfoDTO> 
     */
    open class func getNamespaceMerkleWithRequestBuilder(namespaceId: String) -> RequestBuilder<MerkleStateInfoDTO> {
        var localVariablePath = "/namespaces/{namespaceId}/merkle"
        let namespaceIdPreEscape = "\(APIHelper.mapValueToPathItem(namespaceId))"
        let namespaceIdPostEscape = namespaceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{namespaceId}", with: namespaceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MerkleStateInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get readable names for a set of namespaces
     
     - parameter namespaceIds: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNamespacesNames(namespaceIds: NamespaceIds, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [NamespaceNameDTO]?, _ error: Error?) -> Void)) -> RequestTask {
        return getNamespacesNamesWithRequestBuilder(namespaceIds: namespaceIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get readable names for a set of namespaces
     - POST /namespaces/names
     - Returns friendly names for namespaces.
     - parameter namespaceIds: (body)  
     - returns: RequestBuilder<[NamespaceNameDTO]> 
     */
    open class func getNamespacesNamesWithRequestBuilder(namespaceIds: NamespaceIds) -> RequestBuilder<[NamespaceNameDTO]> {
        let localVariablePath = "/namespaces/names"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: namespaceIds)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NamespaceNameDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Search namespaces
     
     - parameter ownerAddress: (query) Filter by owner address. (optional)
     - parameter registrationType: (query) Filter by registration type. (optional)
     - parameter level0: (query) Filter by root namespace. (optional)
     - parameter aliasType: (query) Filter by alias type. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchNamespaces(ownerAddress: String? = nil, registrationType: NamespaceRegistrationTypeEnum? = nil, level0: String? = nil, aliasType: AliasTypeEnum? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NamespacePage?, _ error: Error?) -> Void)) -> RequestTask {
        return searchNamespacesWithRequestBuilder(ownerAddress: ownerAddress, registrationType: registrationType, level0: level0, aliasType: aliasType, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search namespaces
     - GET /namespaces
     - Gets an array of namespaces.
     - parameter ownerAddress: (query) Filter by owner address. (optional)
     - parameter registrationType: (query) Filter by registration type. (optional)
     - parameter level0: (query) Filter by root namespace. (optional)
     - parameter aliasType: (query) Filter by alias type. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - returns: RequestBuilder<NamespacePage> 
     */
    open class func searchNamespacesWithRequestBuilder(ownerAddress: String? = nil, registrationType: NamespaceRegistrationTypeEnum? = nil, level0: String? = nil, aliasType: AliasTypeEnum? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil) -> RequestBuilder<NamespacePage> {
        let localVariablePath = "/namespaces"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ownerAddress": (wrappedValue: ownerAddress?.encodeToJSON(), isExplode: true),
            "registrationType": (wrappedValue: registrationType?.encodeToJSON(), isExplode: true),
            "level0": (wrappedValue: level0?.encodeToJSON(), isExplode: true),
            "aliasType": (wrappedValue: aliasType?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pageNumber": (wrappedValue: pageNumber?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NamespacePage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
