//
// TransactionRoutesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TransactionRoutesAPI {

    /**
     Announce a cosignature transaction
     
     - parameter cosignature: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announceCosignatureTransaction(cosignature: Cosignature, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnnounceTransactionInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return announceCosignatureTransactionWithRequestBuilder(cosignature: cosignature).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Announce a cosignature transaction
     - PUT /transactions/cosignature
     - Announces a cosignature transaction to the network.
     - parameter cosignature: (body)  
     - returns: RequestBuilder<AnnounceTransactionInfoDTO> 
     */
    open class func announceCosignatureTransactionWithRequestBuilder(cosignature: Cosignature) -> RequestBuilder<AnnounceTransactionInfoDTO> {
        let localVariablePath = "/transactions/cosignature"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cosignature)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnnounceTransactionInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Announce an aggregate bonded transaction
     
     - parameter transactionPayload: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announcePartialTransaction(transactionPayload: TransactionPayload, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnnounceTransactionInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return announcePartialTransactionWithRequestBuilder(transactionPayload: transactionPayload).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Announce an aggregate bonded transaction
     - PUT /transactions/partial
     - Announces an aggregate bonded transaction to the network.
     - parameter transactionPayload: (body)  
     - returns: RequestBuilder<AnnounceTransactionInfoDTO> 
     */
    open class func announcePartialTransactionWithRequestBuilder(transactionPayload: TransactionPayload) -> RequestBuilder<AnnounceTransactionInfoDTO> {
        let localVariablePath = "/transactions/partial"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnnounceTransactionInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Announce a new transaction
     
     - parameter transactionPayload: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func announceTransaction(transactionPayload: TransactionPayload, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnnounceTransactionInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return announceTransactionWithRequestBuilder(transactionPayload: transactionPayload).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Announce a new transaction
     - PUT /transactions
     - Announces a transaction to the network. The [catbuffer library](https://github.com/nemtech/catbuffer) defines the protocol to serialize and deserialize Symbol entities. Catbuffers are integrated into [Symbol SDKs](https://nemtech.github.io/sdk.html).  It's recommended to use SDKs instead of calling the API endpoint directly to announce transactions. 
     - parameter transactionPayload: (body)  
     - returns: RequestBuilder<AnnounceTransactionInfoDTO> 
     */
    open class func announceTransactionWithRequestBuilder(transactionPayload: TransactionPayload) -> RequestBuilder<AnnounceTransactionInfoDTO> {
        let localVariablePath = "/transactions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnnounceTransactionInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get confirmed transaction information
     
     - parameter transactionId: (path) Transaction id or hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConfirmedTransaction(transactionId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getConfirmedTransactionWithRequestBuilder(transactionId: transactionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get confirmed transaction information
     - GET /transactions/confirmed/{transactionId}
     - Returns confirmed transaction information given a transactionId or hash.
     - parameter transactionId: (path) Transaction id or hash. 
     - returns: RequestBuilder<TransactionInfoDTO> 
     */
    open class func getConfirmedTransactionWithRequestBuilder(transactionId: String) -> RequestBuilder<TransactionInfoDTO> {
        var localVariablePath = "/transactions/confirmed/{transactionId}"
        let transactionIdPreEscape = "\(APIHelper.mapValueToPathItem(transactionId))"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get confirmed trasactions information
     
     - parameter transactionIds: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConfirmedTransactions(transactionIds: TransactionIds, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TransactionInfoDTO]?, _ error: Error?) -> Void)) -> RequestTask {
        return getConfirmedTransactionsWithRequestBuilder(transactionIds: transactionIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get confirmed trasactions information
     - POST /transactions/confirmed
     - Returns confirmed transactions information for a given array of transactionIds.
     - parameter transactionIds: (body)  
     - returns: RequestBuilder<[TransactionInfoDTO]> 
     */
    open class func getConfirmedTransactionsWithRequestBuilder(transactionIds: TransactionIds) -> RequestBuilder<[TransactionInfoDTO]> {
        let localVariablePath = "/transactions/confirmed"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionIds)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TransactionInfoDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get partial transaction information
     
     - parameter transactionId: (path) Transaction id or hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPartialTransaction(transactionId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getPartialTransactionWithRequestBuilder(transactionId: transactionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get partial transaction information
     - GET /transactions/partial/{transactionId}
     - Returns partial transaction information given a transactionId or hash.
     - parameter transactionId: (path) Transaction id or hash. 
     - returns: RequestBuilder<TransactionInfoDTO> 
     */
    open class func getPartialTransactionWithRequestBuilder(transactionId: String) -> RequestBuilder<TransactionInfoDTO> {
        var localVariablePath = "/transactions/partial/{transactionId}"
        let transactionIdPreEscape = "\(APIHelper.mapValueToPathItem(transactionId))"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get partial trasactions information
     
     - parameter transactionIds: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPartialTransactions(transactionIds: TransactionIds, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TransactionInfoDTO]?, _ error: Error?) -> Void)) -> RequestTask {
        return getPartialTransactionsWithRequestBuilder(transactionIds: transactionIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get partial trasactions information
     - POST /transactions/partial
     - Returns partial transactions information for a given array of transactionIds.
     - parameter transactionIds: (body)  
     - returns: RequestBuilder<[TransactionInfoDTO]> 
     */
    open class func getPartialTransactionsWithRequestBuilder(transactionIds: TransactionIds) -> RequestBuilder<[TransactionInfoDTO]> {
        let localVariablePath = "/transactions/partial"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionIds)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TransactionInfoDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get unconfirmed transaction information
     
     - parameter transactionId: (path) Transaction id or hash. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUnconfirmedTransaction(transactionId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionInfoDTO?, _ error: Error?) -> Void)) -> RequestTask {
        return getUnconfirmedTransactionWithRequestBuilder(transactionId: transactionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get unconfirmed transaction information
     - GET /transactions/unconfirmed/{transactionId}
     - Returns unconfirmed transaction information given a transactionId or hash.
     - parameter transactionId: (path) Transaction id or hash. 
     - returns: RequestBuilder<TransactionInfoDTO> 
     */
    open class func getUnconfirmedTransactionWithRequestBuilder(transactionId: String) -> RequestBuilder<TransactionInfoDTO> {
        var localVariablePath = "/transactions/unconfirmed/{transactionId}"
        let transactionIdPreEscape = "\(APIHelper.mapValueToPathItem(transactionId))"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionInfoDTO>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get unconfirmed trasactions information
     
     - parameter transactionIds: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUnconfirmedTransactions(transactionIds: TransactionIds, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TransactionInfoDTO]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUnconfirmedTransactionsWithRequestBuilder(transactionIds: transactionIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get unconfirmed trasactions information
     - POST /transactions/unconfirmed
     - Returns unconfirmed transactions information for a given array of transactionIds.
     - parameter transactionIds: (body)  
     - returns: RequestBuilder<[TransactionInfoDTO]> 
     */
    open class func getUnconfirmedTransactionsWithRequestBuilder(transactionIds: TransactionIds) -> RequestBuilder<[TransactionInfoDTO]> {
        let localVariablePath = "/transactions/unconfirmed"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactionIds)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TransactionInfoDTO]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Search confirmed transactions
     
     - parameter address: (query) Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)
     - parameter recipientAddress: (query) Filter by address of the account receiving the transaction. (optional)
     - parameter signerPublicKey: (query) Filter by public key of the account signing the entity. (optional)
     - parameter height: (query) Filter by block height. (optional)
     - parameter fromHeight: (query) Only blocks with height greater or equal than this one are returned. (optional)
     - parameter toHeight: (query) Only blocks with height smaller or equal than this one are returned. (optional)
     - parameter fromTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)
     - parameter toTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)
     - parameter type: (query) Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)
     - parameter embedded: (query) When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)
     - parameter transferMosaicId: (query) Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchConfirmedTransactions(address: String? = nil, recipientAddress: String? = nil, signerPublicKey: String? = nil, height: String? = nil, fromHeight: String? = nil, toHeight: String? = nil, fromTransferAmount: String? = nil, toTransferAmount: String? = nil, type: [TransactionTypeEnum]? = nil, embedded: Bool? = nil, transferMosaicId: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionPage?, _ error: Error?) -> Void)) -> RequestTask {
        return searchConfirmedTransactionsWithRequestBuilder(address: address, recipientAddress: recipientAddress, signerPublicKey: signerPublicKey, height: height, fromHeight: fromHeight, toHeight: toHeight, fromTransferAmount: fromTransferAmount, toTransferAmount: toTransferAmount, type: type, embedded: embedded, transferMosaicId: transferMosaicId, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search confirmed transactions
     - GET /transactions/confirmed
     - Returns an array of confirmed transactions. If a transaction was announced with an alias rather than an address, the address that will be considered when querying is the one that was resolved from the alias at confirmation time. 
     - parameter address: (query) Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)
     - parameter recipientAddress: (query) Filter by address of the account receiving the transaction. (optional)
     - parameter signerPublicKey: (query) Filter by public key of the account signing the entity. (optional)
     - parameter height: (query) Filter by block height. (optional)
     - parameter fromHeight: (query) Only blocks with height greater or equal than this one are returned. (optional)
     - parameter toHeight: (query) Only blocks with height smaller or equal than this one are returned. (optional)
     - parameter fromTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)
     - parameter toTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)
     - parameter type: (query) Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)
     - parameter embedded: (query) When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)
     - parameter transferMosaicId: (query) Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - returns: RequestBuilder<TransactionPage> 
     */
    open class func searchConfirmedTransactionsWithRequestBuilder(address: String? = nil, recipientAddress: String? = nil, signerPublicKey: String? = nil, height: String? = nil, fromHeight: String? = nil, toHeight: String? = nil, fromTransferAmount: String? = nil, toTransferAmount: String? = nil, type: [TransactionTypeEnum]? = nil, embedded: Bool? = nil, transferMosaicId: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil) -> RequestBuilder<TransactionPage> {
        let localVariablePath = "/transactions/confirmed"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "recipientAddress": (wrappedValue: recipientAddress?.encodeToJSON(), isExplode: true),
            "signerPublicKey": (wrappedValue: signerPublicKey?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "fromHeight": (wrappedValue: fromHeight?.encodeToJSON(), isExplode: true),
            "toHeight": (wrappedValue: toHeight?.encodeToJSON(), isExplode: true),
            "fromTransferAmount": (wrappedValue: fromTransferAmount?.encodeToJSON(), isExplode: true),
            "toTransferAmount": (wrappedValue: toTransferAmount?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "embedded": (wrappedValue: embedded?.encodeToJSON(), isExplode: true),
            "transferMosaicId": (wrappedValue: transferMosaicId?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pageNumber": (wrappedValue: pageNumber?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionPage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Search partial transactions
     
     - parameter address: (query) Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)
     - parameter recipientAddress: (query) Filter by address of the account receiving the transaction. (optional)
     - parameter signerPublicKey: (query) Filter by public key of the account signing the entity. (optional)
     - parameter height: (query) Filter by block height. (optional)
     - parameter fromHeight: (query) Only blocks with height greater or equal than this one are returned. (optional)
     - parameter toHeight: (query) Only blocks with height smaller or equal than this one are returned. (optional)
     - parameter fromTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)
     - parameter toTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)
     - parameter type: (query) Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)
     - parameter embedded: (query) When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)
     - parameter transferMosaicId: (query) Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchPartialTransactions(address: String? = nil, recipientAddress: String? = nil, signerPublicKey: String? = nil, height: String? = nil, fromHeight: String? = nil, toHeight: String? = nil, fromTransferAmount: String? = nil, toTransferAmount: String? = nil, type: [TransactionTypeEnum]? = nil, embedded: Bool? = nil, transferMosaicId: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionPage?, _ error: Error?) -> Void)) -> RequestTask {
        return searchPartialTransactionsWithRequestBuilder(address: address, recipientAddress: recipientAddress, signerPublicKey: signerPublicKey, height: height, fromHeight: fromHeight, toHeight: toHeight, fromTransferAmount: fromTransferAmount, toTransferAmount: toTransferAmount, type: type, embedded: embedded, transferMosaicId: transferMosaicId, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search partial transactions
     - GET /transactions/partial
     - Returns an array of partial transactions.
     - parameter address: (query) Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)
     - parameter recipientAddress: (query) Filter by address of the account receiving the transaction. (optional)
     - parameter signerPublicKey: (query) Filter by public key of the account signing the entity. (optional)
     - parameter height: (query) Filter by block height. (optional)
     - parameter fromHeight: (query) Only blocks with height greater or equal than this one are returned. (optional)
     - parameter toHeight: (query) Only blocks with height smaller or equal than this one are returned. (optional)
     - parameter fromTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)
     - parameter toTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)
     - parameter type: (query) Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)
     - parameter embedded: (query) When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)
     - parameter transferMosaicId: (query) Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - returns: RequestBuilder<TransactionPage> 
     */
    open class func searchPartialTransactionsWithRequestBuilder(address: String? = nil, recipientAddress: String? = nil, signerPublicKey: String? = nil, height: String? = nil, fromHeight: String? = nil, toHeight: String? = nil, fromTransferAmount: String? = nil, toTransferAmount: String? = nil, type: [TransactionTypeEnum]? = nil, embedded: Bool? = nil, transferMosaicId: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil) -> RequestBuilder<TransactionPage> {
        let localVariablePath = "/transactions/partial"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "recipientAddress": (wrappedValue: recipientAddress?.encodeToJSON(), isExplode: true),
            "signerPublicKey": (wrappedValue: signerPublicKey?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "fromHeight": (wrappedValue: fromHeight?.encodeToJSON(), isExplode: true),
            "toHeight": (wrappedValue: toHeight?.encodeToJSON(), isExplode: true),
            "fromTransferAmount": (wrappedValue: fromTransferAmount?.encodeToJSON(), isExplode: true),
            "toTransferAmount": (wrappedValue: toTransferAmount?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "embedded": (wrappedValue: embedded?.encodeToJSON(), isExplode: true),
            "transferMosaicId": (wrappedValue: transferMosaicId?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pageNumber": (wrappedValue: pageNumber?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionPage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Search unconfirmed transactions
     
     - parameter address: (query) Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)
     - parameter recipientAddress: (query) Filter by address of the account receiving the transaction. (optional)
     - parameter signerPublicKey: (query) Filter by public key of the account signing the entity. (optional)
     - parameter height: (query) Filter by block height. (optional)
     - parameter fromHeight: (query) Only blocks with height greater or equal than this one are returned. (optional)
     - parameter toHeight: (query) Only blocks with height smaller or equal than this one are returned. (optional)
     - parameter fromTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)
     - parameter toTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)
     - parameter type: (query) Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)
     - parameter embedded: (query) When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)
     - parameter transferMosaicId: (query) Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchUnconfirmedTransactions(address: String? = nil, recipientAddress: String? = nil, signerPublicKey: String? = nil, height: String? = nil, fromHeight: String? = nil, toHeight: String? = nil, fromTransferAmount: String? = nil, toTransferAmount: String? = nil, type: [TransactionTypeEnum]? = nil, embedded: Bool? = nil, transferMosaicId: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransactionPage?, _ error: Error?) -> Void)) -> RequestTask {
        return searchUnconfirmedTransactionsWithRequestBuilder(address: address, recipientAddress: recipientAddress, signerPublicKey: signerPublicKey, height: height, fromHeight: fromHeight, toHeight: toHeight, fromTransferAmount: fromTransferAmount, toTransferAmount: toTransferAmount, type: type, embedded: embedded, transferMosaicId: transferMosaicId, pageSize: pageSize, pageNumber: pageNumber, offset: offset, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search unconfirmed transactions
     - GET /transactions/unconfirmed
     - Returns an array of unconfirmed transactions.
     - parameter address: (query) Filter by address involved in the transaction. An account&#39;s address is considered to be involved in the transaction when the account is the sender, recipient, or it is required to cosign the transaction. This filter cannot be combined with &#x60;&#x60;recipientAddress&#x60;&#x60; and &#x60;&#x60;signerPublicKey&#x60;&#x60; query params.  (optional)
     - parameter recipientAddress: (query) Filter by address of the account receiving the transaction. (optional)
     - parameter signerPublicKey: (query) Filter by public key of the account signing the entity. (optional)
     - parameter height: (query) Filter by block height. (optional)
     - parameter fromHeight: (query) Only blocks with height greater or equal than this one are returned. (optional)
     - parameter toHeight: (query) Only blocks with height smaller or equal than this one are returned. (optional)
     - parameter fromTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, greater or equal than this amount are returned.  (optional)
     - parameter toTransferAmount: (query) Requires providing the &#x60;transferMosaicId&#x60; filter. Only transfer transactions with a transfer amount of the provided mosaic id, lesser or equal than this amount are returned.  (optional)
     - parameter type: (query) Filter by transaction type. To filter by multiple transaction types, add more filter query params like: &#x60;&#x60;type&#x3D;16974&amp;type&#x3D;16718&#x60;&#x60;.  (optional)
     - parameter embedded: (query) When true, the endpoint also returns all the embedded aggregate transactions. Otherwise, only top-level transactions used to calculate the block transactionsHash are returned. **Note:** This field does not work when combined with the &#x60;&#x60;address&#x60;&#x60; parameter. This is, embedded transactions containing the address specified through the &#x60;&#x60;address&#x60;&#x60; parameter will not be returned even when used with &#x60;&#x60;embedded&#x3D;true&#x60;&#x60;. There is no problem when using other parameters like &#x60;&#x60;recipientAddress&#x60;&#x60; instead.  (optional, default to false)
     - parameter transferMosaicId: (query) Filters transactions involving a specific &#x60;&#x60;mosaicId&#x60;&#x60;. (optional)
     - parameter pageSize: (query) Select the number of entries to return. (optional, default to 10)
     - parameter pageNumber: (query) Filter by page number. (optional, default to 1)
     - parameter offset: (query) Entry id at which to start pagination. If the ordering parameter is set to -id, the elements returned precede the identifier. Otherwise, newer elements with respect to the id are returned.  (optional)
     - parameter order: (query) Sort responses in ascending or descending order based on the collection property set on the param &#x60;&#x60;orderBy&#x60;&#x60;. If the request does not specify &#x60;&#x60;orderBy&#x60;&#x60;, REST returns the collection ordered by id.  (optional)
     - returns: RequestBuilder<TransactionPage> 
     */
    open class func searchUnconfirmedTransactionsWithRequestBuilder(address: String? = nil, recipientAddress: String? = nil, signerPublicKey: String? = nil, height: String? = nil, fromHeight: String? = nil, toHeight: String? = nil, fromTransferAmount: String? = nil, toTransferAmount: String? = nil, type: [TransactionTypeEnum]? = nil, embedded: Bool? = nil, transferMosaicId: String? = nil, pageSize: Int? = nil, pageNumber: Int? = nil, offset: String? = nil, order: Order? = nil) -> RequestBuilder<TransactionPage> {
        let localVariablePath = "/transactions/unconfirmed"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "recipientAddress": (wrappedValue: recipientAddress?.encodeToJSON(), isExplode: true),
            "signerPublicKey": (wrappedValue: signerPublicKey?.encodeToJSON(), isExplode: true),
            "height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "fromHeight": (wrappedValue: fromHeight?.encodeToJSON(), isExplode: true),
            "toHeight": (wrappedValue: toHeight?.encodeToJSON(), isExplode: true),
            "fromTransferAmount": (wrappedValue: fromTransferAmount?.encodeToJSON(), isExplode: true),
            "toTransferAmount": (wrappedValue: toTransferAmount?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "embedded": (wrappedValue: embedded?.encodeToJSON(), isExplode: true),
            "transferMosaicId": (wrappedValue: transferMosaicId?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "pageNumber": (wrappedValue: pageNumber?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionPage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
